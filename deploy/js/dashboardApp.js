var mainConfig={DOM:{USER_LIST_CSS_CLASS:"root-touchsoft-dashboard_users-list",CSS_CHAT_CONTAINS_BLOCK_STYLE:"root-touchsoft-dashboard_chat",CSS_SEND_MESSAGE_BUTTON_CLASS:"root-touchsoft-dashboard_send-button",CSS_CLOSE_CHAT_BUTTON_CLASS:"root-touchsoft-dashboard_close-chat",CSS_FILTER_INPUT_ID:"root-touchsoft-dashboard_filter-input",CSS_SORT_SELECT_ID:"root-touchsoft-dashboard_sort"},launcher:{pattern:"touchsoft_chat-launcher_",after:["chatTitle","chatUrl","chatClass","chatPositionSelect","allowMinimize","allowDrag","requireName","showTime","networkRadioXMR","networkRadioFetch","scriptCode"],srcStart:"&ltscript src='https://rawgit.com/UnacceptableCondition/Homework_2/master/js/chat.js?",srcEnd:"'&gt&lt/script&gt"},userList:{USER_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user",USER_ID_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user-id",USER_INDICATOR_CSS_CLASS_OFFLINE:"root-touchsoft-dashboard_user-offline",USER_INDICATOR_CSS_CLASS_ONLINE:"root-touchsoft-dashboard_user-online"},chatSettings:{typeOfRequest:"fetch"},currentUserSettings:{userId:null,userName:null},currentDashboardCondition:{filterBy:null,sortBy:null},interval:{UPDATE_USERS_TIME:5e3,ONLINE_INTERVAL:12e4},router:{ABOUT_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/about.html",LAUNCHER_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/chatLauncher.html",DASHBOARD_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/dashboard.html",CONTENT_CLASS:"content",NAVIGATION_ACTIVE_CSS:"navigation-active"},messages:{CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root-touchsoft-dashboard_chat-messages",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message"},INVISIBLE_CLASS:"root-touchsoft-dashboard_invisible-element",DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",ADMIN_NAME:"Admin",CSS_CURRENT_INPUT_CLASS:"root-touchsoft-dashboard_textarea-for-message",LOCAL_STORAGE_NAME:"currentCondition",CSS_HAVE_NEW_MESSAGE_STYLE:"root-touchsoft-dashboard_user-have-new-message"},dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var r=s?"#":".";return t?document.querySelectorAll(r+e):document.querySelector(r+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},sorter=function(){function e(){}return e.prototype.quickSort=function(e,t,s,r){var n;return 1<e.length&&(t<(n=function(e,t,s,r){for(var n,o,a,i,u=e[Math.floor((s+t)/2)][r],c=t,l=s;c<=l;){for(;e[c][r]>u;)c++;for(;e[l][r]<u;)l--;c<=l&&(a=l,i=(n=e)[o=c],n[o]=n[a],n[a]=i,c++,l--)}return c}(e,t,s,r))-1&&this.quickSort(e,t,n-1,r),n<s&&this.quickSort(e,n,s,r)),e},new e}();function clearElementContent(e){for(var t=getElement(e);t.firstChild;)t.removeChild(t.firstChild)}var dataConnector=function(e){var t;function s(){}return s.prototype.requestFetch=function(e,t,s,r){return fetch(e,{headers:{Accept:r,"Content-Type":r},method:s,body:t}).then(function(e){return"application/json"===r?e.json():e.text()})},s.prototype.requestXMR=function(r,n,o,a){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(o,r,!0),s.setRequestHeader("Content-Type",a),s.onload=function(){e("application/json"===a?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},n?s.send(n):s.send()})},t=new s,"fetch"===e.typeOfRequest?{request:t.requestFetch}:{request:t.requestXMR}}(dataConnectorConfig),dataSource=function(n){var e;function t(){n=n}return t.prototype.createRequestPath=function(e,t,s){var r=e+"/users";return null!==t&&(r+="/"+t),null!==s&&(r+="/"+s),r+=".json"},t.prototype.getHTML=function(e){return n.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},t.prototype.getUserData=function(e){var s={},t=this.createRequestPath(dataBaseUrl,e,null);return n.request(t,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},t.prototype.getSettingField=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,t);return n.request(s,null,"GET","application/json")},t.prototype.setSettingField=function(e,t,s){var r=this.createRequestPath(dataBaseUrl,e,t);return n.request(r,JSON.stringify(s),"PUT","application/json")},t.prototype.sendMessage=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,"messages"),r=JSON.stringify({date:t.date,message:t.message,title:"message",user:t.sender,itIsRead:t.read});return n.request(s,r,"POST","application/json")},t.prototype.getAllUsers=function(){var s={},e=this.createRequestPath(dataBaseUrl,null,null);return n.request(e,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},{usersAPI:{getUserData:(e=new t).getUserData.bind(e),sendMessage:e.sendMessage.bind(e),setField:e.setSettingField.bind(e),getField:e.getSettingField.bind(e),getAllUsers:e.getAllUsers.bind(e)},commonAPI:{getHTML:e.getHTML.bind(e)}}}(dataConnector),viewFactory=function(r){function e(){}return e.prototype.createView=function(s,r,n){var o=this;return new Promise(function(e,t){s?(r&&o.includeViewCssToPage(o.createCSSLink(r,"stylesheet","text/css","touch-soft-chat-css")),e(o.includeViewHTMLToPage(s,n))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return r.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,r){var n=document.createElement("link");return r&&n.setAttribute("id",r),t&&n.setAttribute("rel",t),s&&n.setAttribute("type",s),n.setAttribute("href",e),n},new e}(dataSource),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.messages.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,r){var n=this.createMessageContainerDiv(r,s),o=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.messages.CSS_CHAT_MESSAGE_DATE]),a=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.messages.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.messages.CSS_CHAT_MESSAGE]);return n.appendChild(o),n.appendChild(a),n.appendChild(i),n},e.prototype.getMessageObjectsForMarkAsRead=function(e,t){var s,r=[],n=e||u.currentUserSettings.userName,o=t||u.currentUserSettings.userId;for(s=this.messageList.length-1;0<=s;s--)if(this.messageList[s].sender!==n){if(this.messageList[s].read)break;r.push({userId:o,fieldName:"messages/"+this.messageList[s].id+"/itIsRead",fieldValue:!0})}return r},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.messages.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.messages.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var r=document.createElement("div");return s.forEach(function(e){r.classList.add(e)}),r.innerHTML=e,r},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e)},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(r){function e(){}function n(e,t,s,r,n){return{sender:s,message:e,read:r,date:t,id:n}}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.getUserData=function(e){return dataSource.usersAPI.getUserData(e).then(function(t){if(r.currentUserSettings.userName=t.userName,r.currentUserSettings.isMinimize=t.isMinimize,t.messages){var e,s=[];Object.keys(t.messages).map(function(e){s.push(n(t.messages[e].message,t.messages[e].date,t.messages[e].user,t.messages[e].itIsRead,e))}),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}})},e.prototype.createNewUserProfileToDataBase=function(){var t=this;Object.keys(r.currentUserSettings).map(function(e){t.saveSettingField(e)})},e.prototype.saveSettingField=function(e){this.saveUserSettingsToDataSource([{userId:r.currentUserSettings.userId,fieldName:e,fieldValue:r.currentUserSettings[e]}])},e.prototype.sendMessage=function(e){var t,s,r=n(this.getMessageFromInputElement(),(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),e,!1);messageListManager.addMessageToMessageList(r),messageListManager.displayMessages(),this.saveMessageToDataSource(r)},e.prototype.getMessageFromInputElement=function(){var e=getElement(r.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&this.saveUserSettingsToDataSource(e)},e.prototype.saveMessageToDataSource=function(e){if(e.sender===r.currentUserSettings.userName){var t=[{userId:r.currentUserSettings.userId,fieldName:"sendNewMessage",fieldValue:!0}];this.saveUserSettingsToDataSource(t)}dataSource.usersAPI.sendMessage(r.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setField(e.userId,e.fieldName,e.fieldValue)})},new e}(mainConfig),userListManager=function(o,e){function t(){this.uList={}}return t.prototype.setup=function(){},t.prototype.createUserElement=function(e,t){var s=document.createElement("div"),r=document.createElement("div"),n=document.createElement("div");return s.classList.add(o.userList.USER_ELEMENT_CSS_CLASS),r.classList.add(o.userList.USER_ID_ELEMENT_CSS_CLASS),r.innerHTML=e,t?n.classList.add(o.userList.USER_INDICATOR_CSS_CLASS_ONLINE):n.classList.add(o.userList.USER_INDICATOR_CSS_CLASS_OFFLINE),s.appendChild(r),s.appendChild(n),s},t.prototype.setUserList=function(e){this.uList=e},t.prototype.addUserToUsersArray=function(e,t,s){var r=this.userIsOnline(e.lastOnline);s.push({userId:t,userElement:this.createUserElement(t,r),online:r,visible:!0,sendNewMessage:e.sendNewMessage,readLastMessage:e.readLastMessage,lastOnline:e.lastOnline,userName:e.userName})},t.prototype.getUserFromUserListById=function(t){var s=this,r=null;return Object.keys(s.uList).map(function(e){return s.uList[e].userId===t&&(r=e),!0}),r},t.prototype.userIsOnline=function(e){return(new Date).getTime()-e<=o.interval.ONLINE_INTERVAL},t.prototype.filterByName=function(){this.uList.forEach(function(e){e.visible=-1!==e.userId.indexOf(o.currentDashboardCondition.filterBy)})},t.prototype.sortUsersByField=function(){e.quickSort(this.uList,0,this.uList.length-1,o.currentDashboardCondition.sortBy)},t.prototype.displayUsers=function(){!function(e){var t=getElement(e);for(;t.firstChild;)t.removeChild(t.firstChild)}(o.DOM.USER_LIST_CSS_CLASS),this.uList.forEach(function(e){e.visible&&getElement(o.DOM.USER_LIST_CSS_CLASS).appendChild(e.userElement)})},new t}(mainConfig,sorter),dashboard=function(n,e,s,o,t){var r=[];function a(){}return a.prototype.startApp=function(){o.setup(n,t),s.setup(n),this.setupUsersListBlock(),this.setupCommonListenerFunctions(),this.setupIntervalFunctions()},a.prototype.saveCurrentConditionToLocalStorage=function(){var e=JSON.stringify({filter:n.currentDashboardCondition.filterBy,sort:n.currentDashboardCondition.sortBy,currentUserId:n.currentUserSettings.userId});localStorage.setItem(n.LOCAL_STORAGE_NAME,e)},a.prototype.getCurrentUserIdFromLocalStorage=function(){var e=localStorage.getItem(n.LOCAL_STORAGE_NAME),t=null;return e&&(t=JSON.parse(e),n.currentDashboardCondition.filterBy=t.filter,n.currentDashboardCondition.sortBy=t.sort,n.currentUserSettings.userId=t.currentUserId),t},a.prototype.localSettingsSetup=function(e){e&&(e.filter&&(getElement(n.DOM.CSS_FILTER_INPUT_ID).value=e.filter,this.filter()),e.sort&&(getElement(n.DOM.CSS_SORT_SELECT_ID).value=e.sort,this.sort()),e.currentUserId&&(n.currentUserSettings.userId=e.currentUserId,this.startConversationWithUser(n.currentUserSettings.userId)))},a.prototype.filter=function(){n.currentDashboardCondition.filterBy=getElement(n.DOM.CSS_FILTER_INPUT_ID).value,this.saveCurrentConditionToLocalStorage(),o.filterByName(n.currentDashboardCondition.filterBy),o.displayUsers()},a.prototype.sort=function(){n.currentDashboardCondition.sortBy=getElement(n.DOM.CSS_SORT_SELECT_ID).value,this.saveCurrentConditionToLocalStorage(),o.sortUsersByField(),o.displayUsers()},a.prototype.setupUsersListBlock=function(e){this.setupUsersListeners(e)},a.prototype.setupUsersListeners=function(e){var t=this;return this.getAcessToUsersList(e).then(function(){Array.from(n.users).forEach(function(e){e.addEventListener("click",t.userListener.bind(t,e.firstChild.innerText))})})},a.prototype.getAcessToUsersList=function(e){return this.displayUsersList(e).then(function(){n.users=getElement(n.userList.USER_ELEMENT_CSS_CLASS,!0)})},a.prototype.displayUsersList=function(e){var t=this;return this.setUsersListToUsersModule(e).then(function(){o.displayUsers()}).then(function(){t.toggleNewMessageIndicatorToUser()})},a.prototype.setUsersListToUsersModule=function(t){var s=this;return t?new Promise(function(e){e(o.setUserList(t))}):this.getUserList().then(function(e){o.setUserList(e)}).then(function(){var e=s.getCurrentUserIdFromLocalStorage();s.localSettingsSetup(e)})},a.prototype.getUserList=function(){var s=[];return e.usersAPI.getAllUsers().then(function(t){Object.keys(t).map(function(e){return o.addUserToUsersArray(t[e],e,s),!0})}).then(function(){return s})},a.prototype.userListener=function(e){this.startConversationWithUser(e),this.markMessageFromUserAsRead(e)},a.prototype.startConversationWithUser=function(e){var t=this;n.currentUserSettings.userId=e,s.getUserData(e).then(function(){getElement(n.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.remove(n.INVISIBLE_CLASS),t.saveCurrentConditionToLocalStorage()})},a.prototype.updateUsers=function(){var s=this,r=[];e.usersAPI.getAllUsers().then(function(t){Object.keys(t).map(function(e){return o.addUserToUsersArray(t[e],e,r),n.currentUserSettings.userId&&s.updateUserMessagesAndDisplayIt(),!0})}).then(function(){o.uList=r,n.currentDashboardCondition.filterBy&&s.filter(),n.currentDashboardCondition.sortBy&&s.sort(),s.setupUsersListeners(r)})},a.prototype.updateUserMessagesAndDisplayIt=function(){s.getUserData(n.currentUserSettings.userId),this.markMessageFromUserAsRead(n.currentUserSettings.userId)},a.prototype.setupCommonListenerFunctions=function(){var e=this;getElement(n.DOM.CSS_SEND_MESSAGE_BUTTON_CLASS).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,n.ADMIN_NAME)),getElement(n.DOM.CSS_CLOSE_CHAT_BUTTON_CLASS).addEventListener("click",e.closeConversation.bind(e)),getElement(n.DOM.CSS_FILTER_INPUT_ID).addEventListener("input",e.filter.bind(e)),getElement(n.DOM.CSS_SORT_SELECT_ID).addEventListener("input",e.sort.bind(e))},a.prototype.markMessageFromUserAsRead=function(e){var t=o.getUserFromUserListById(e);o.uList[t].sendNewMessage=!1,s.saveUserSettingsToDataSource([{userId:e,fieldName:"sendNewMessage",fieldValue:!1}]),this.toggleNewMessageIndicatorToUser()},a.prototype.closeConversation=function(){getElement(n.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.add(n.INVISIBLE_CLASS),n.currentUserSettings.userId=null,this.saveCurrentConditionToLocalStorage()},a.prototype.toggleNewMessageIndicatorToUser=function(){var t;Object.keys(o.uList).map(function(e){return t=o.uList[e].userElement.getElementsByClassName(n.CSS_HAVE_NEW_MESSAGE_STYLE)[0],o.uList[e].sendNewMessage&&!t&&((t=document.createElement("div")).classList.add(n.CSS_HAVE_NEW_MESSAGE_STYLE),o.uList[e].userElement.appendChild(t)),!o.uList[e].sendNewMessage&&t&&o.uList[e].userElement.removeChild(t),!0})},a.prototype.setupIntervalFunctions=function(){var e=this;r.push(setInterval(function(){e.updateUsers()},n.interval.UPDATE_USERS_TIME))},a.prototype.closeApp=function(){r.forEach(function(e){clearInterval(e)})},new a}(mainConfig,dataSource,userDataManager,userListManager,sorter),launcher=function(s){var a={};function e(){}var r={chatTitle:{typeOfValue:"value"},chatUrl:{typeOfValue:"value"},chatClass:{typeOfValue:"value"},chatPositionSelect:{typeOfValue:"value"},allowMinimize:{typeOfValue:"checked"},allowDrag:{typeOfValue:"checked"},showTime:{typeOfValue:"checked"},requireName:{typeOfValue:"checked"},networkRadioXMR:{typeOfValue:"checked",true:"XHR",false:"fetch"}};return e.prototype.getDataFromElement=function(s){var r,n="",o=this;return Object.keys(a).map(function(e,t){s[e]&&(0<t?(r=a[e].getAttribute("type"),n+="'&"+e+"='"+o.getElementValue(e,r)):n+=e+"='"+o.getElementValue(e))}),n.length<1&&(n=null),n},e.prototype.getElementValue=function(e,t){var s=a[e][r[e].typeOfValue];return"radio"===t?r[e][s]:s},e.prototype.startApp=function(){var t=this;s.launcher.after.map(function(e){a[e]=getElement(s.launcher.pattern+e,!1,!0),a[e].addEventListener("input",function(){var e=s.launcher.srcStart+this.getDataFromElement(r);e+=s.launcher.srcEnd,a.scriptCode.innerHTML=e}.bind(t))})},e.prototype.closeApp=function(){a={}},new e}(mainConfig),about=function(){function e(){}return e.prototype.startApp=function(){},e.prototype.closeApp=function(){},new e}(),mainController=function(s){var r={dashboard:s.router.DASHBOARD_HTML_PATH,configuration:s.router.LAUNCHER_HTML_PATH,about:s.router.ABOUT_HTML_PATH},n={dashboard:dashboard.closeApp.bind(dashboard),configuration:launcher.closeApp.bind(launcher),about:about.closeApp.bind(about)},o={dashboard:dashboard.startApp.bind(dashboard),configuration:launcher.startApp.bind(launcher),about:about.startApp.bind(about)};function e(){}return e.prototype.startApp=function(){var t=this;window.addEventListener("hashchange",function(e){t.handleUrl(e.newURL)}),t.handleUrl(window.location.href+"#dashboard")},e.prototype.handleUrl=function(e){var t;-1!==e.indexOf("#")&&(t=e.split("#").pop(),this.closePreviousPage(t),document.querySelectorAll("a."+s.router.NAVIGATION_ACTIVE_CSS).forEach(function(e){e.classList.remove(s.router.NAVIGATION_ACTIVE_CSS)}),document.querySelectorAll('a[href="#'+t+'"]').forEach(function(e){e.classList.add(s.router.NAVIGATION_ACTIVE_CSS)}),clearElementContent(s.router.CONTENT_CLASS),viewFactory.createView(r[t],null,s.router.CONTENT_CLASS).then(function(){o[t]()}))},e.prototype.closePreviousPage=function(t){Object.keys(n).map(function(e){e!==t&&n[e]()})},new e}(mainConfig);mainController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
