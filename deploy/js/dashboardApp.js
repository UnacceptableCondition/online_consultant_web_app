var mainConfig={DOM:{USER_LIST_CSS_CLASS:"root-touchsoft-dashboard_users-list",CSS_CHAT_CONTAINS_BLOCK_STYLE:"root-touchsoft-dashboard_chat",CSS_SEND_MESSAGE_BUTTON_CLASS:"root-touchsoft-dashboard_send-button",CSS_CLOSE_CHAT_BUTTON_CLASS:"root-touchsoft-dashboard_close-chat",CSS_FILTER_INPUT_ID:"root-touchsoft-dashboard_filter-input",CSS_SORT_SELECT_ID:"root-touchsoft-dashboard_sort"},launcher:{pattern:"touchsoft_chat-launcher_",after:["chatTitle","chatUrl","chatClass","chatPositionSelect","allowMinimize","allowDrag","requireName","showTime","networkRadioXMR","networkRadioFetch","networkRadioLongPoll","scriptCode"],srcStart:"&ltscript src='https://rawgit.com/UnacceptableCondition/Homework_2/master/js/chat.js?",srcEnd:"'&gt&lt/script&gt"},userList:{USER_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user",USER_ID_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user-id",USER_INDICATOR_CSS_CLASS_OFFLINE:"root-touchsoft-dashboard_user-offline",USER_INDICATOR_CSS_CLASS_ONLINE:"root-touchsoft-dashboard_user-online"},chatSettings:{typeOfRequest:"longPoll"},currentUserSettings:{userId:null,userName:null},currentDashboardCondition:{filterBy:null,sortBy:null},interval:{UPDATE_USERS_TIME:5e3,ONLINE_INTERVAL:12e3},router:{ABOUT_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/about.html",LAUNCHER_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/chatLauncher.html",DASHBOARD_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/dashboard.html",CONTENT_CLASS:"content",NAVIGATION_ACTIVE_CSS:"navigation-active"},messages:{CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root-touchsoft-dashboard_chat-messages",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message"},INVISIBLE_CLASS:"root-touchsoft-dashboard_invisible-element",DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",ADMIN_NAME:"Admin",CSS_CURRENT_INPUT_CLASS:"root-touchsoft-dashboard_textarea-for-message",LOCAL_STORAGE_NAME:"currentCondition",CSS_HAVE_NEW_MESSAGE_STYLE:"root-touchsoft-dashboard_user-have-new-message"},dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var r=s?"#":".";return t?document.querySelectorAll(r+e):document.querySelector(r+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},sorter=function(){function e(){}return e.prototype.quickSort=function(e,t,s,r){var n;return 1<e.length&&(t<(n=function(e,t,s,r){for(var n,a,o,i,u=e[Math.floor((s+t)/2)][r],c=t,l=s;c<=l;){for(;e[c][r]>u;)c++;for(;e[l][r]<u;)l--;c<=l&&(o=l,i=(n=e)[a=c],n[a]=n[o],n[o]=i,c++,l--)}return c}(e,t,s,r))-1&&this.quickSort(e,t,n-1,r),n<s&&this.quickSort(e,n,s,r)),e},new e}();function clearElementContent(e){for(var t=getElement(e);t.firstChild;)t.removeChild(t.firstChild)}var dataConnector=function(e){var t;function s(){}return s.prototype.requestFetch=function(e,t,s,r){return fetch(e,{headers:{Accept:r,"Content-Type":r},method:s,body:t}).then(function(e){return"application/json"===r?e.json():e.text()})},s.prototype.requestXMR=function(r,n,a,o){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(a,r,!0),s.setRequestHeader("Content-Type",o),s.onload=function(){e("application/json"===o?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},n?s.send(n):s.send()})},s.prototype.longPoll=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!0),t.setRequestHeader("Accept","text/event-stream"),t},t=new s,"fetch"===e.typeOfRequest?{request:t.requestFetch}:"XHR"===e.typeOfRequest?{request:t.requestXMR}:{request:t.requestXMR,createLongPollConnection:t.longPoll}}(dataConnectorConfig),dataSource=function(o,e){var t,n="userList",s="usersMessages",a="usersSettings",i={isMinimize:!1,readLastMessage:!0};function r(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.createLongPollConnection(s)}function u(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.request.bind(null,s,null,"GET","application/json")}function c(){c.prototype.getData="longPoll"===e.chatSettings.typeOfRequest?r:u}return c.prototype.createRequestPath=function(e,t,s,r){var n=e;return null!==r&&(n+="/"+r),null!==t&&(n+="/"+t),null!==s&&(n+="/"+s),n+=".json"},c.prototype.getHTML=function(e){return o.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},c.prototype.setData=function(e,t,s,r,n){var a;return a="PUT"===t?this.createRequestPath(dataBaseUrl,r,s,e):this.createRequestPath(dataBaseUrl,r,null,e),o.request(a,JSON.stringify(n),t,"application/json")},c.prototype.addNewUserToDataSource=function(t,e){var s=new Date,r=this;i.userName=e,Object.keys(i).map(function(e){r.setData(a,"PUT",e,t,i[e])}),this.setData(n,"PUT",null,t,{lastOnline:s.getTime(),sendNewMessage:!1})},{usersAPI:{getUserList:(t=new c).getData.bind(t,n),getUserSettings:t.getData.bind(t,a),getUserMessages:t.getData.bind(t,s),getSettingField:t.getData.bind(t,a),sendMessage:t.setData.bind(t,s,"POST"),setSettingField:t.setData.bind(t,a,"PUT"),addNewUserToDataSource:t.addNewUserToDataSource.bind(t),updateLastOnline:t.setData.bind(t,n,"PUT","lastOnline"),updateSendNewMessageFlag:t.setData.bind(t,n,"PUT","sendNewMessage"),updateMessageIsReadField:t.setData.bind(t,s,"PUT")},commonAPI:{getHTML:t.getHTML.bind(t)}}}(dataConnector,mainConfig),eventEmitter=function(){function e(){this.events={}}return e.prototype.addSubscribe=function(e,t){var s=this;return this.events[e]||(this.events[e]=[]),this.events[e].push(t),function(){s.events[e]=s.events[e].filter(function(e){return e!==t})}},e.prototype.emit=function(e,t){var s=this.events[e];s&&s.forEach(function(e){e.call(null,t)})},new e}(),longPollResponseParser=function(){var s={message:/message/,userList:/lastOnline.{1,}sendNewMessage/,lastOnline:/"path":"\/\w{1,}\/lastOnline/,sendNewMessage:/"path":"\/\w{1,}\/sendNewMessage/,setting:/readLastMessage/,read:/read/},n=/event: put/,t=/data: null/,a=/","data":/,o=/"path":"\/-/,r=/"data":{"lastOnline":\d+,"sendNewMessage":/,i=!0,u=!0;function e(){}return e.prototype.getTypeOfChanges=function(t){return Object.keys(s).filter(function(e){if(s[e].test(t))return e})[0]},e.prototype.prepareDataBeforeJsonParse=function(e){return e[e.length-1].split(a)[1].trim().slice(0,-1)},e.prototype.parseUsersMessages=function(e,t){var s,r={},n={};return"read"===t?(r.id=e[e.length-1].split('data: {"path":"/').pop().split('/read","').shift(),r.value=e[e.length-1].split('/read","data":').pop().trim().slice(0,-1),r):o.test(e[e.length-1])?(s=e[e.length-1].split('data: {"path":"/').pop().split(a).shift(),r=JSON.parse(this.prepareDataBeforeJsonParse(e)),n[s]=r,n):this.getFirstData(e)},e.prototype.hasNewData=function(e){return!t.test(e[e.length-1])&&1<e.length},e.prototype.parseUserList=function(e,t){var s={};return i?(i=!1,this.getFirstData(e)):r.test(e[e.length-1])?(s[this.getUserId(e[e.length-1],null)]=this.getFirstData(e),s):(s=JSON.parse(e[e.length-1].split(a)[1].trim().slice(0,-1)),[this.getUserId(e[e.length-1],t),s])},e.prototype.getFirstData=function(e){try{return JSON.parse(this.prepareDataBeforeJsonParse(e))}catch(e){return null}},e.prototype.getUserId=function(e,t){return t?e.split(t).shift().split('data: {"path":"/').pop().slice(0,-1):e.split('data: {"path":"/').pop().split(",")[0].trim().slice(0,-1)},e.prototype.parseUsersSettings=function(e){return u?(u=!1,this.getFirstData(e)):[null,JSON.parse(e[e.length-1].split(a)[1].trim().slice(0,-1))]},e.prototype.parse=function(e){var t=e.split(n),s=this.getTypeOfChanges(t[t.length-1]),r={type:s};if(this.hasNewData(t)){if("message"===s||"read"===s)return r.object=this.parseUsersMessages(t,s),r;if("sendNewMessage"===s||"lastOnline"===s||"userList"===s)return r.object=this.parseUserList(t,s),r;if("setting"===s)return r.object=this.parseUsersSettings(t,s),r}},new e}(),viewFactory=function(r){function e(){}return e.prototype.createView=function(s,r,n){var a=this;return new Promise(function(e,t){s?(r&&a.includeViewCssToPage(a.createCSSLink(r,"stylesheet","text/css","touch-soft-chat-css")),e(a.includeViewHTMLToPage(s,n))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return r.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,r){var n=document.createElement("link");return r&&n.setAttribute("id",r),t&&n.setAttribute("rel",t),s&&n.setAttribute("type",s),n.setAttribute("href",e),n},new e}(dataSource),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.messages.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,r){var n=this.createMessageContainerDiv(r,s),a=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.messages.CSS_CHAT_MESSAGE_DATE]),o=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.messages.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.messages.CSS_CHAT_MESSAGE]);return n.appendChild(a),n.appendChild(o),n.appendChild(i),n},e.prototype.getMessageObjectsForMarkAsRead=function(){var e,t=[],s=u.ADMIN_NAME||u.currentUserSettings.userName,r=u.currentUserSettings.userId;for(e=this.messageList.length-1;0<=e;e--)if(this.messageList[e].sender!==s){if(this.messageList[e].read)break;t.push({userId:r,fieldName:this.messageList[e].id+"/read",fieldValue:!0}),this.messageList[e].read=!0}return t},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.messages.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.messages.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var r=document.createElement("div");return s.forEach(function(e){r.classList.add(e)}),r.innerHTML=e,r},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){0<this.getMessageObjectsForMarkAsRead().length&&(u.currentUserSettings.readLastMessage=!1),this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e)},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(i,s,r){function e(){var t=this;"longPoll"===i.chatSettings.typeOfRequest?(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){s.getUserCorrespondence(t),e()})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t;i.currentMessageConnection&&i.currentMessageConnection.abort();i.currentMessageConnection=dataSource.usersAPI.getUserMessages(e),i.currentMessageConnection.onreadystatechange=function(){3==this.readyState&&200==this.status&&(t=r.parse(this.responseText))&&s.emit(t.type,t.object)},i.currentMessageConnection.send()}.bind(this),e.prototype.updateMessageList=function(t){t&&Object.keys(t).map(function(e){t[e].id=e,messageListManager.addMessageToMessageList(t[e])});messageListManager.displayMessages()}.bind(this),s.addSubscribe("message",function(e){t.updateMessageList(e)}),s.addSubscribe("read",function(t){t&&messageListManager.messageList.forEach(function(e){(e.id=t.id)&&(e.read=t.value,messageListManager.displayMessages())})})):(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){return s.getUserCorrespondence(t).then(function(){e()})})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t=this;return dataSource.usersAPI.getUserMessages(e)().then(function(e){t.updateMessageList(e)})}.bind(this),e.prototype.updateMessageList=function(t){var e,s=[];t&&Object.keys(t).map(function(e){t[e].id=e,s.push(t[e])});messageListManager.displayMessages(),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}.bind(this))}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.clearMessageList=function(){messageListManager.messageList=[]},e.prototype.createNewUserProfileToDataBase=function(e,t){dataSource.usersAPI.addNewUserToDataSource(e,t)},e.prototype.saveSettingField=function(e){dataSource.usersAPI.setSettingField(e,i.currentUserSettings.userId,i.currentUserSettings[e])},e.prototype.updateUserOnline=function(e){var t=new Date;dataSource.usersAPI.updateLastOnline(e,t.getTime())},e.prototype.sendMessage=function(e){var t,s,r,n=this.getMessageFromInputElement(),a=(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),o={sender:e,message:n,read:!1,date:a,id:r};"longPoll"!==i.chatSettings.typeOfRequest&&(messageListManager.addMessageToMessageList(o),messageListManager.displayMessages()),this.saveMessageToDataSource(o)},e.prototype.getMessageFromInputElement=function(){var e=getElement(i.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&(console.log(e),e.forEach(function(e){dataSource.usersAPI.updateMessageIsReadField(e.fieldName,e.userId,e.fieldValue)}),i.currentUserSettings.readLastMessage=!0),messageListManager.displayMessages()},e.prototype.saveMessageToDataSource=function(e){e.sender===i.currentUserSettings.userName&&dataSource.usersAPI.updateSendNewMessageFlag(i.currentUserSettings.userId,!0),dataSource.usersAPI.sendMessage(null,i.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setSettingField(e.fieldName,e.userId,e.fieldValue)})},new e}(mainConfig,eventEmitter,longPollResponseParser),userListManager=function(a,e){function t(){this.uList=[]}return t.prototype.setup=function(){},t.prototype.createUserElement=function(e,t){var s=document.createElement("div"),r=document.createElement("div"),n=document.createElement("div");return s.classList.add(a.userList.USER_ELEMENT_CSS_CLASS),r.classList.add(a.userList.USER_ID_ELEMENT_CSS_CLASS),r.innerHTML=e,t?n.classList.add(a.userList.USER_INDICATOR_CSS_CLASS_ONLINE):n.classList.add(a.userList.USER_INDICATOR_CSS_CLASS_OFFLINE),s.appendChild(r),s.appendChild(n),s},t.prototype.setUserList=function(e){this.uList=e},t.prototype.addUserToUsersArray=function(e,t,s){var r=this.userIsOnline(e.lastOnline);s.push({userId:t,userElement:this.createUserElement(t,r),online:r,visible:!0,sendNewMessage:e.sendNewMessage,readLastMessage:e.readLastMessage,lastOnline:e.lastOnline,userName:e.userName})},t.prototype.updateUserOnlineStatus=function(e,t){var s=this.getUserFromUserListById(e);this.uList[s].lastOnline=t,this.uList[s].online=this.userIsOnline(t),this.uList[s].userElement=this.createUserElement(e,this.userIsOnline(t))},t.prototype.getUserFromUserListById=function(t){var s=this,r=null;return Object.keys(s.uList).map(function(e){return s.uList[e].userId===t&&(r=e),!0}),r},t.prototype.userIsOnline=function(e){return(new Date).getTime()-e<=a.interval.ONLINE_INTERVAL},t.prototype.filterByName=function(){this.uList.forEach(function(e){e.visible=-1!==e.userId.indexOf(a.currentDashboardCondition.filterBy)})},t.prototype.sortUsersByField=function(){e.quickSort(this.uList,0,this.uList.length-1,a.currentDashboardCondition.sortBy)},t.prototype.clearUserList=function(){this.uList=[]},t.prototype.displayUsers=function(){!function(e){var t=getElement(e);for(;t.firstChild;)t.removeChild(t.firstChild)}(a.DOM.USER_LIST_CSS_CLASS),this.uList.forEach(function(e){e.visible&&getElement(a.DOM.USER_LIST_CSS_CLASS).appendChild(e.userElement)})},new t}(mainConfig,sorter),dashboard=function(s,r,n,a,e,o){var t=[];function i(){this.setupEventEmitter()}return i.prototype.startApp=function(){n.setup(s),this.getUserList(),this.setupCommonListenerFunctions(),this.setupIntervalFunctions()},i.prototype.setupEventEmitter=function(){var r=this;o.addSubscribe("userList",function(t){var s=[];t instanceof Array&&(t=t[1]),Object.keys(t).map(function(e){a.addUserToUsersArray(t[e],e,s)}),a.uList=a.uList.concat(s);var e=r.getCurrentUserIdFromLocalStorage();r.localSettingsSetup(e),r.setupUserListDOM()}),o.addSubscribe("lastOnline",function(e){var t=e[0],s=e[1];a.updateUserOnlineStatus(t,s)}),o.addSubscribe("sendNewMessage",function(e){var t=a.getUserFromUserListById(e[0]);a.uList[t].sendNewMessage=e[1],r.toggleNewMessageIndicatorToUser()})},i.prototype.saveCurrentConditionToLocalStorage=function(){var e=JSON.stringify({filter:s.currentDashboardCondition.filterBy,sort:s.currentDashboardCondition.sortBy,currentUserId:s.currentUserSettings.userId});localStorage.setItem(s.LOCAL_STORAGE_NAME,e)},i.prototype.getCurrentUserIdFromLocalStorage=function(){var e=localStorage.getItem(s.LOCAL_STORAGE_NAME),t=null;return e&&(t=JSON.parse(e),s.currentDashboardCondition.filterBy=t.filter,s.currentDashboardCondition.sortBy=t.sort,s.currentUserSettings.userId=t.currentUserId),t},i.prototype.localSettingsSetup=function(e){e&&(e.filter&&(getElement(s.DOM.CSS_FILTER_INPUT_ID).value=e.filter,this.filter()),e.sort&&(getElement(s.DOM.CSS_SORT_SELECT_ID).value=e.sort,this.sort()),e.currentUserId&&(s.currentUserSettings.userId=e.currentUserId,this.startConversationWithUser(s.currentUserSettings.userId)))},i.prototype.filter=function(){s.currentDashboardCondition.filterBy=getElement(s.DOM.CSS_FILTER_INPUT_ID).value,this.saveCurrentConditionToLocalStorage(),a.filterByName(s.currentDashboardCondition.filterBy),a.displayUsers()},i.prototype.sort=function(){s.currentDashboardCondition.sortBy=getElement(s.DOM.CSS_SORT_SELECT_ID).value,this.saveCurrentConditionToLocalStorage(),a.sortUsersByField(),a.displayUsers()},i.prototype.setupUsersListeners=function(){var t=this;Array.from(s.users).forEach(function(e){e.addEventListener("click",t.userListener.bind(t,e.firstChild.innerText))})},i.prototype.setupUserListDOM=function(){a.displayUsers(),this.getAcessToUsersList(),this.toggleNewMessageIndicatorToUser(),this.setupUsersListeners()},i.prototype.getAcessToUsersList=function(){s.users=getElement(s.userList.USER_ELEMENT_CSS_CLASS,!0)},i.prototype.getUserList=function(){var e,t=r.usersAPI.getUserList(null);t.onreadystatechange=function(){this.status&&(e=longPollResponseParser.parse(this.responseText))&&o.emit(e.type,e.object)},t.send(),s.currentUserListConnection=t},i.prototype.userListener=function(e){this.startConversationWithUser(e),this.markMessageFromUserAsRead(e)},i.prototype.startConversationWithUser=function(e){var t=this;s.currentUserSettings.userId=e,n.clearMessageList(),n.getUserData(e).then(function(){getElement(s.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.remove(s.INVISIBLE_CLASS),t.saveCurrentConditionToLocalStorage()}),r.usersAPI.updateSendNewMessageFlag(e,!1)},i.prototype.updateUserMessagesAndDisplayIt=function(){n.getUserData(s.currentUserSettings.userId),this.markMessageFromUserAsRead(s.currentUserSettings.userId)},i.prototype.setupCommonListenerFunctions=function(){var e=this;getElement(s.DOM.CSS_SEND_MESSAGE_BUTTON_CLASS).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,s.ADMIN_NAME)),getElement(s.DOM.CSS_CLOSE_CHAT_BUTTON_CLASS).addEventListener("click",e.closeConversation.bind(e)),getElement(s.DOM.CSS_FILTER_INPUT_ID).addEventListener("input",e.filter.bind(e)),getElement(s.DOM.CSS_SORT_SELECT_ID).addEventListener("input",e.sort.bind(e)),document.addEventListener("mousemove",userDataManager.setMessageAsRead.bind(userDataManager))},i.prototype.markMessageFromUserAsRead=function(e){var t=a.getUserFromUserListById(e);a.uList[t].sendNewMessage=!1,n.saveUserSettingsToDataSource([{userId:e,fieldName:"sendNewMessage",fieldValue:!1}]),this.toggleNewMessageIndicatorToUser()},i.prototype.closeConversation=function(){getElement(s.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.add(s.INVISIBLE_CLASS),s.currentUserSettings.userId=null,s.currentMessageConnection.abort(),this.saveCurrentConditionToLocalStorage()},i.prototype.toggleNewMessageIndicatorToUser=function(){var t;Object.keys(a.uList).map(function(e){return t=a.uList[e].userElement.getElementsByClassName(s.CSS_HAVE_NEW_MESSAGE_STYLE)[0],a.uList[e].sendNewMessage&&!t&&((t=document.createElement("div")).classList.add(s.CSS_HAVE_NEW_MESSAGE_STYLE),a.uList[e].userElement.appendChild(t)),!a.uList[e].sendNewMessage&&t&&a.uList[e].userElement.removeChild(t),!0})},i.prototype.setupIntervalFunctions=function(){var e=this;t.push=setInterval(function(){Object.keys(a.uList).map(function(e){a.updateUserOnlineStatus(a.uList[e].userId,a.uList[e].lastOnline)}),e.setupUserListDOM()},s.interval.UPDATE_USERS_TIME)},i.prototype.closeApp=function(){t.forEach(function(e){clearInterval(e)}),userDataManager.clearMessageList(),a.clearUserList(),s.currentMessageConnection.abort(),s.currentUserListConnection.abort()},new i}(mainConfig,dataSource,userDataManager,userListManager,0,eventEmitter),launcher=function(s){var o={},r={chatTitle:{typeOfValue:"value"},chatUrl:{typeOfValue:"value"},chatClass:{typeOfValue:"value"},chatPositionSelect:{typeOfValue:"value"},allowMinimize:{typeOfValue:"checked"},allowDrag:{typeOfValue:"checked"},showTime:{typeOfValue:"checked"},requireName:{typeOfValue:"checked"},networkRadioXMR:{typeOfValue:"value",true:"XHR"},networkRadioLongPoll:{typeOfValue:"value",true:"longPoll"},networkRadioFetch:{typeOfValue:"value",true:"fetch"}};function e(){}return e.prototype.getDataFromElement=function(s){var r,n="",a=this;return Object.keys(o).map(function(e,t){return s[e]&&(0<t?"radio"===(r=o[e].getAttribute("type"))?o[e].checked&&(n+="'&typeOfRequest='"+a.getElementValue(e,r)):n+="'&"+e+"='"+a.getElementValue(e,r):n+=e+"='"+a.getElementValue(e)),!0}),n.length<1&&(n=null),n},e.prototype.getElementValue=function(e){return o[e][r[e].typeOfValue]},e.prototype.startApp=function(){var t=this;s.launcher.after.map(function(e){return o[e]=getElement(s.launcher.pattern+e,!1,!0),o[e].addEventListener("input",function(){var e=s.launcher.srcStart+this.getDataFromElement(r);e+=s.launcher.srcEnd,o.scriptCode.innerHTML=e}.bind(t)),!0})},e.prototype.closeApp=function(){o={}},new e}(mainConfig),about=function(){function e(){}return e.prototype.startApp=function(){},e.prototype.closeApp=function(){},new e}(),mainController=function(s){var r={dashboard:s.router.DASHBOARD_HTML_PATH,configuration:s.router.LAUNCHER_HTML_PATH,about:s.router.ABOUT_HTML_PATH},n={dashboard:dashboard.closeApp.bind(dashboard),configuration:launcher.closeApp.bind(launcher),about:about.closeApp.bind(about)},a={dashboard:dashboard.startApp.bind(dashboard),configuration:launcher.startApp.bind(launcher),about:about.startApp.bind(about)};function e(){}return e.prototype.startApp=function(){var t=this;window.addEventListener("hashchange",function(e){t.handleUrl(e.newURL)}),t.handleUrl(window.location.href+"#dashboard")},e.prototype.handleUrl=function(e){var t;-1!==e.indexOf("#")&&(t=e.split("#").pop(),this.closePreviousPage(t),document.querySelectorAll("a."+s.router.NAVIGATION_ACTIVE_CSS).forEach(function(e){e.classList.remove(s.router.NAVIGATION_ACTIVE_CSS)}),document.querySelectorAll('a[href="#'+t+'"]').forEach(function(e){e.classList.add(s.router.NAVIGATION_ACTIVE_CSS)}),clearElementContent(s.router.CONTENT_CLASS),viewFactory.createView(r[t],null,s.router.CONTENT_CLASS).then(function(){a[t]()}))},e.prototype.closePreviousPage=function(t){Object.keys(n).map(function(e){return e!==t&&n[e](),!0})},new e}(mainConfig);mainController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRhc2hib2FyZEFwcC5qcyJdLCJuYW1lcyI6WyJtYWluQ29uZmlnIiwiRE9NIiwiVVNFUl9MSVNUX0NTU19DTEFTUyIsIkNTU19DSEFUX0NPTlRBSU5TX0JMT0NLX1NUWUxFIiwiQ1NTX1NFTkRfTUVTU0FHRV9CVVRUT05fQ0xBU1MiLCJDU1NfQ0xPU0VfQ0hBVF9CVVRUT05fQ0xBU1MiLCJDU1NfRklMVEVSX0lOUFVUX0lEIiwiQ1NTX1NPUlRfU0VMRUNUX0lEIiwibGF1bmNoZXIiLCJwYXR0ZXJuIiwiYWZ0ZXIiLCJzcmNTdGFydCIsInNyY0VuZCIsInVzZXJMaXN0IiwiVVNFUl9FTEVNRU5UX0NTU19DTEFTUyIsIlVTRVJfSURfRUxFTUVOVF9DU1NfQ0xBU1MiLCJVU0VSX0lORElDQVRPUl9DU1NfQ0xBU1NfT0ZGTElORSIsIlVTRVJfSU5ESUNBVE9SX0NTU19DTEFTU19PTkxJTkUiLCJjaGF0U2V0dGluZ3MiLCJ0eXBlT2ZSZXF1ZXN0IiwiY3VycmVudFVzZXJTZXR0aW5ncyIsInVzZXJJZCIsInVzZXJOYW1lIiwiY3VycmVudERhc2hib2FyZENvbmRpdGlvbiIsImZpbHRlckJ5Iiwic29ydEJ5IiwiaW50ZXJ2YWwiLCJVUERBVEVfVVNFUlNfVElNRSIsIk9OTElORV9JTlRFUlZBTCIsInJvdXRlciIsIkFCT1VUX0hUTUxfUEFUSCIsIkxBVU5DSEVSX0hUTUxfUEFUSCIsIkRBU0hCT0FSRF9IVE1MX1BBVEgiLCJDT05URU5UX0NMQVNTIiwiTkFWSUdBVElPTl9BQ1RJVkVfQ1NTIiwibWVzc2FnZXMiLCJDU1NfVVNFUl9OT1RfUkVBRF9NRVNTQUdFUyIsIkNTU19DSEFUX01FU1NBR0VTX0NPTlRBSU5FUiIsIkNTU19NRVNTQUdFX0NPTlRBSU5FUiIsIkNTU19DSEFUX01FU1NBR0VfU0VOREVSX05BTUUiLCJDU1NfQ0hBVF9NRVNTQUdFX0RBVEUiLCJDU1NfQ0hBVF9NRVNTQUdFIiwiSU5WSVNJQkxFX0NMQVNTIiwiREFUQV9CQVNFX1VSTCIsIkFETUlOX05BTUUiLCJDU1NfQ1VSUkVOVF9JTlBVVF9DTEFTUyIsIkxPQ0FMX1NUT1JBR0VfTkFNRSIsIkNTU19IQVZFX05FV19NRVNTQUdFX1NUWUxFIiwiZGF0YUJhc2VVcmwiLCJnZXRFbGVtZW50Iiwic2VsZWN0b3IiLCJpc0FsbCIsIml0SXNJZCIsInNlbGVjdG9yU3RhcnQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJxdWVyeVNlbGVjdG9yIiwiZGF0YUNvbm5lY3RvckNvbmZpZyIsInNvcnRlciIsIlNvcnRlciIsInByb3RvdHlwZSIsInF1aWNrU29ydCIsIml0ZW1zIiwibGVmdCIsInJpZ2h0Iiwic29ydEZpZWxkIiwiaW5kZXgiLCJsZW5ndGgiLCJmaXJzdEluZGV4Iiwic2Vjb25kSW5kZXgiLCJ0ZW1wIiwicGl2b3QiLCJNYXRoIiwiZmxvb3IiLCJpIiwiaiIsInBhcnRpdGlvbiIsInRoaXMiLCJjbGVhckVsZW1lbnRDb250ZW50IiwiZWxlbWVudFNlbGVjdG9yIiwiZWxlbWVudCIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImRhdGFDb25uZWN0b3IiLCJkYXRhQ29ubmVjdG9yQ29uZmlnT2JqIiwiZGF0YUJhc2VDb25uZWN0b3IiLCJEYXRhQmFzZUNvbm5lY3RvciIsInJlcXVlc3RGZXRjaCIsInJlcXVlc3RQYXRoIiwicmVxdWVzdEJvZHkiLCJyZXF1ZXN0VHlwZSIsImNvbnRlbnRUeXBlIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwiQ29udGVudC1UeXBlIiwibWV0aG9kIiwiYm9keSIsInRoZW4iLCJyZXNwb25zZSIsImpzb24iLCJ0ZXh0IiwicmVxdWVzdFhNUiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ubG9hZCIsIkpTT04iLCJwYXJzZSIsIm9uZXJyb3IiLCJzdGF0dXNUZXh0Iiwic2VuZCIsImxvbmdQb2xsIiwidGFyZ2V0VXJsIiwieGh0dHAiLCJyZXF1ZXN0IiwiY3JlYXRlTG9uZ1BvbGxDb25uZWN0aW9uIiwiZGF0YVNvdXJjZSIsImNvbmZpZyIsImRhdGFTb3VyY2VJbnN0YW5jZSIsIlVTRVJfTElTVCIsIlVTRVJfTUVTU0FHRVMiLCJVU0VSU19TRVRUSU5HUyIsIm5ld1VzZXJEYXRhIiwiaXNNaW5pbWl6ZSIsInJlYWRMYXN0TWVzc2FnZSIsImxvbmdQb2xsQ29ubmVjdCIsImRhdGFUeXBlIiwiY3JlYXRlUmVxdWVzdFBhdGgiLCJiYXNpY0Nvbm5lY3QiLCJiaW5kIiwiRGF0YVNvdXJjZSIsImdldERhdGEiLCJkYXRhQmFzZVVSTCIsInJlcXVlc3RQb3N0Zml4IiwicmVxdWVzdFByZWZpeCIsInBhdGgiLCJnZXRIVE1MIiwic2V0RGF0YSIsImZpZWxkTmFtZSIsInZhbHVlIiwic3RyaW5naWZ5IiwiYWRkTmV3VXNlclRvRGF0YVNvdXJjZSIsImRhdGUiLCJEYXRlIiwidGhhdCIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJzZXR0aW5nTmFtZSIsImxhc3RPbmxpbmUiLCJnZXRUaW1lIiwic2VuZE5ld01lc3NhZ2UiLCJ1c2Vyc0FQSSIsImdldFVzZXJMaXN0IiwiZ2V0VXNlclNldHRpbmdzIiwiZ2V0VXNlck1lc3NhZ2VzIiwiZ2V0U2V0dGluZ0ZpZWxkIiwic2VuZE1lc3NhZ2UiLCJzZXRTZXR0aW5nRmllbGQiLCJ1cGRhdGVMYXN0T25saW5lIiwidXBkYXRlU2VuZE5ld01lc3NhZ2VGbGFnIiwidXBkYXRlTWVzc2FnZUlzUmVhZEZpZWxkIiwiY29tbW9uQVBJIiwiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiZXZlbnRzIiwiYWRkU3Vic2NyaWJlIiwiZXZlbnROYW1lIiwiY2FsbGJhY2siLCJwdXNoIiwiZmlsdGVyIiwiZWxlbWVudENhbGxiYWNrIiwiZW1pdCIsImRhdGEiLCJldmVudCIsImZvckVhY2giLCJjYWxsIiwibG9uZ1BvbGxSZXNwb25zZVBhcnNlciIsInR5cGVzT2ZDaGFuZ2UiLCJtZXNzYWdlIiwic2V0dGluZyIsInJlYWQiLCJldmVudFJlZ3VsYXIiLCJoYXNOdWxsRGF0YSIsImdldERhdGFSZWd1bGFyIiwiaXRJc05ld01lc3NhZ2VSZWd1bGFyIiwiaXRJc05ld1VzZXJMaXN0UmVndWxhciIsIml0SXNGaXJzdFVzZXJMaXN0Q29ubmVjdGlvbiIsIml0SXNGaXJzdFVzZXJTZXR0aW5nQ29ubmVjdGlvbiIsIkxvbmdQb2xsUmVzcG9uc2VQYXJzZXIiLCJnZXRUeXBlT2ZDaGFuZ2VzIiwiYW5zd2VyRGF0YSIsInR5cGVOYW1lIiwidGVzdCIsInByZXBhcmVEYXRhQmVmb3JlSnNvblBhcnNlIiwic3BsaXQiLCJ0cmltIiwic2xpY2UiLCJwYXJzZVVzZXJzTWVzc2FnZXMiLCJjaGFuZ2VUeXBlIiwibWVzc2FnZUlkIiwicmVzdWx0T2JqZWN0IiwiaWQiLCJwb3AiLCJzaGlmdCIsImdldEZpcnN0RGF0YSIsImhhc05ld0RhdGEiLCJwYXJzZVVzZXJMaXN0IiwiZ2V0VXNlcklkIiwiZXhjZXB0aW9uIiwicGFyc2VVc2Vyc1NldHRpbmdzIiwicmVzdWx0IiwicmVzdWx0T2ZQYXJzZSIsInR5cGUiLCJvYmplY3QiLCJ2aWV3RmFjdG9yeSIsIlZpZXdGYWN0b3J5IiwiY3JlYXRlVmlldyIsImh0bWxQYXRoIiwiY3NzUGF0aCIsImNvbnRhaW5lckNsYXNzIiwiaW5jbHVkZVZpZXdDc3NUb1BhZ2UiLCJjcmVhdGVDU1NMaW5rIiwiaW5jbHVkZVZpZXdIVE1MVG9QYWdlIiwiRXJyb3IiLCJjb250YWluZXJEaXYiLCJodG1sIiwiaW5uZXJIVE1MIiwibGluayIsImhlYWQiLCJhcHBlbmRDaGlsZCIsImZpbGVQYXRoIiwicmVsIiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm1lc3NhZ2VMaXN0TWFuYWdlciIsIk1lc3NhZ2VMaXN0TWFuYWdlciIsInNldHVwIiwibWVzc2FnZUxpc3QiLCJjRE9NIiwibWVzc2FnZXNCbG9jayIsImNyZWF0ZU1lc3NhZ2VFbGVtZW50IiwibWVzc2FnZURhdGUiLCJzZW5kZXIiLCJpc1JlYWQiLCJtZXNzYWdlQ29udGFpbmVyRGl2IiwiY3JlYXRlTWVzc2FnZUNvbnRhaW5lckRpdiIsIm1lc3NhZ2VEYXRlRGl2IiwiY3JlYXRlRGl2Rm9yTWVzc2FnZUJsb2NrIiwiRElTUExBWV9NRVNTQUdFX0RBVEUiLCJtZXNzYWdlU2VuZGVyRGl2IiwiRElTUExBWV9TRU5ERVJfTkFNRSIsIm1lc3NhZ2VEaXYiLCJESVNQTEFZX01FU1NBR0UiLCJnZXRNZXNzYWdlT2JqZWN0c0Zvck1hcmtBc1JlYWQiLCJtZXNzYWdlc0lzUmVhZCIsImZpZWxkVmFsdWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpc0Rpc3BsYXkiLCJzdHlsZUNsYXNzZXMiLCJkaXYiLCJzdHlsZSIsImNyZWF0ZU1lc3NhZ2VMaXN0IiwibWVzc2FnZU9iamVjdHMiLCJuZXdNZXNzYWdlTGlzdCIsInVwZGF0ZU1lc3NhZ2VMaXN0IiwiZGlzcGxheU1lc3NhZ2VzIiwiYWRkTWVzc2FnZVRvTWVzc2FnZUxpc3QiLCJtZXNzYWdlT2JqIiwiY2xlYXJDaGF0IiwibWVzc2FnZU9iamVjdCIsInVzZXJEYXRhTWFuYWdlciIsIlVzZXJEYXRhTWFuYWdlciIsImdldFVzZXJEYXRhIiwiZ2V0VXNlckNvcnJlc3BvbmRlbmNlIiwiY3VycmVudE1lc3NhZ2VDb25uZWN0aW9uIiwiYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0Iiwia2V5IiwibWVzc2FnZXNPYmplY3QiLCJjbGVhck1lc3NhZ2VMaXN0IiwiY3JlYXRlTmV3VXNlclByb2ZpbGVUb0RhdGFCYXNlIiwic2F2ZVNldHRpbmdGaWVsZCIsInVwZGF0ZVVzZXJPbmxpbmUiLCJzZW5kZXJOYW1lIiwibWludXRlcyIsImdldE1lc3NhZ2VGcm9tSW5wdXRFbGVtZW50IiwiZ2V0TWludXRlcyIsInRvU3RyaW5nIiwiZ2V0SG91cnMiLCJjb25jYXQiLCJzYXZlTWVzc2FnZVRvRGF0YVNvdXJjZSIsInNldE1lc3NhZ2VBc1JlYWQiLCJjb25zb2xlIiwibG9nIiwic2F2ZVVzZXJTZXR0aW5nc1RvRGF0YVNvdXJjZSIsInNldHRpbmdzIiwibmV3RmllbGRTZXR0aW5nIiwidXNlckxpc3RNYW5hZ2VyIiwiVXNlckxpc3RNYW5hZ2VyIiwidUxpc3QiLCJjcmVhdGVVc2VyRWxlbWVudCIsImlzT25saW5lIiwidXNlckRpdiIsInVzZXJJZERpdiIsInVzZXJJbmRpY2F0b3IiLCJzZXRVc2VyTGlzdCIsInVzZXJMdXN0T2JqZWN0IiwiYWRkVXNlclRvVXNlcnNBcnJheSIsInVzZXIiLCJ1c2Vyc0xpc3QiLCJ1c2VySXNPbmxpbmUiLCJ1c2VyRWxlbWVudCIsIm9ubGluZSIsInZpc2libGUiLCJ1cGRhdGVVc2VyT25saW5lU3RhdHVzIiwidXNlckluZGV4IiwiZ2V0VXNlckZyb21Vc2VyTGlzdEJ5SWQiLCJ1c2VyTWFuYWdlciIsImxhc3RVc2VyT25saW5lVGltZSIsImZpbHRlckJ5TmFtZSIsImluZGV4T2YiLCJzb3J0VXNlcnNCeUZpZWxkIiwiY2xlYXJVc2VyTGlzdCIsImRpc3BsYXlVc2VycyIsImVsZW0iLCJkYXNoYm9hcmQiLCJ1RGF0YU1hbmFnZXIiLCJ1TGlzdE1hbmFnZXIiLCJpbnRlcnZhbElkIiwiRGFzaGJvYXJkQ29udHJvbGxlciIsInNldHVwRXZlbnRFbWl0dGVyIiwic3RhcnRBcHAiLCJzZXR1cENvbW1vbkxpc3RlbmVyRnVuY3Rpb25zIiwic2V0dXBJbnRlcnZhbEZ1bmN0aW9ucyIsIkFycmF5IiwiY29uZGl0aW9uIiwiZ2V0Q3VycmVudFVzZXJJZEZyb21Mb2NhbFN0b3JhZ2UiLCJsb2NhbFNldHRpbmdzU2V0dXAiLCJzZXR1cFVzZXJMaXN0RE9NIiwidG9nZ2xlTmV3TWVzc2FnZUluZGljYXRvclRvVXNlciIsInNhdmVDdXJyZW50Q29uZGl0aW9uVG9Mb2NhbFN0b3JhZ2UiLCJzZXJpYWxDb25kaXRpb24iLCJzb3J0IiwiY3VycmVudFVzZXJJZCIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwic3RhcnRDb252ZXJzYXRpb25XaXRoVXNlciIsInNldHVwVXNlcnNMaXN0ZW5lcnMiLCJmcm9tIiwidXNlcnMiLCJhZGRFdmVudExpc3RlbmVyIiwidXNlckxpc3RlbmVyIiwiaW5uZXJUZXh0IiwiZ2V0QWNlc3NUb1VzZXJzTGlzdCIsImxvbmdQb2xsVXNlckxpc3RDb25uZWN0b3IiLCJjdXJyZW50VXNlckxpc3RDb25uZWN0aW9uIiwibWFya01lc3NhZ2VGcm9tVXNlckFzUmVhZCIsInJlbW92ZSIsInVwZGF0ZVVzZXJNZXNzYWdlc0FuZERpc3BsYXlJdCIsImNsb3NlQ29udmVyc2F0aW9uIiwibmV3TWVzc2FnZURpdiIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJzZXRJbnRlcnZhbCIsInZpZXdJZCIsImNsb3NlQXBwIiwiY2xlYXJJbnRlcnZhbCIsIkRPTVZhcmlhYmxlcyIsImtleU9mVmFsdWUiLCJjaGF0VGl0bGUiLCJ0eXBlT2ZWYWx1ZSIsImNoYXRVcmwiLCJjaGF0Q2xhc3MiLCJjaGF0UG9zaXRpb25TZWxlY3QiLCJhbGxvd01pbmltaXplIiwiYWxsb3dEcmFnIiwic2hvd1RpbWUiLCJyZXF1aXJlTmFtZSIsIm5ldHdvcmtSYWRpb1hNUiIsInRydWUiLCJuZXR3b3JrUmFkaW9Mb25nUG9sbCIsIm5ldHdvcmtSYWRpb0ZldGNoIiwiTGF1bmNoZXIiLCJnZXREYXRhRnJvbUVsZW1lbnQiLCJzcmMiLCJlbGVtZW50TmFtZSIsImdldEF0dHJpYnV0ZSIsImNoZWNrZWQiLCJnZXRFbGVtZW50VmFsdWUiLCJuYW1lIiwic2NyaXB0Q29kZSIsImFib3V0IiwiQWJvdXQiLCJtYWluQ29udHJvbGxlciIsIm1hdGNoZXNIdG1sUGF0aCIsImNvbmZpZ3VyYXRpb24iLCJjbG9zZUZ1bmN0aW9ucyIsInN0YXJ0RnVuY3Rpb25zIiwiTWFpbkNvbnRyb2xsZXIiLCJ3aW5kb3ciLCJoYW5kbGVVcmwiLCJuZXdVUkwiLCJsb2NhdGlvbiIsImhyZWYiLCJ1cmwiLCJoYXNoIiwiY2xvc2VQcmV2aW91c1BhZ2UiXSwibWFwcGluZ3MiOiJB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QUFlNVYsVUFBVThWLFVBQVksU0FBbUJJLEdBQ3BELElBQUlDLEdBQ3FCLElBQXRCRCxFQUFJcEYsUUFBUSxPQUdmcUYsRUFBT0QsRUFBSXROLE1BQU0sS0FBS1EsTUFDdEJuSSxLQUFLbVYsa0JBQWtCRCxHQUd2QnpXLFNBQVNDLGlCQUFpQixLQUFPbUUsRUFBTzdGLE9BQU9LLHVCQUF1QmtKLFFBQVEsU0FBNEJwRyxHQUN0R0EsRUFBUXNMLFVBQVUwRyxPQUFPdFAsRUFBTzdGLE9BQU9LLHlCQUUzQ29CLFNBQVNDLGlCQUFpQixZQUFjd1csRUFBTyxNQUFNM08sUUFBUSxTQUF5QnBHLEdBQ2xGQSxFQUFRc0wsVUFBVUMsSUFBSTdJLEVBQU83RixPQUFPSyx5QkFHeEM0QyxvQkFBb0I0QyxFQUFPN0YsT0FBT0ksZUFDbEMyTCxZQUFZRSxXQUFXc0wsRUFBZ0JXLEdBQU8sS0FBTXJTLEVBQU83RixPQUFPSSxlQUFlaUUsS0FBSyxXQUNsRnFULEVBQWVRLFNBS3ZCUCxFQUFlNVYsVUFBVW9XLGtCQUFvQixTQUEyQkQsR0FDcEV6USxPQUFPQyxLQUFLK1AsR0FBZ0I5UCxJQUFJLFNBQThCdUksR0FJMUQsT0FIR0EsSUFBUWdJLEdBQ1BULEVBQWV2SCxNQUVaLEtBSVIsSUFBSXlILEVBcEVNLENBc0VsQnhaLFlBRUhtWixlQUFlOUQiLCJmaWxlIjoiZGFzaGJvYXJkQXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gY29uZmlnXHJcblxyXG4vKiBleHBvcnRlZCBtYWluQ29uZmlnICovXHJcbnZhciBtYWluQ29uZmlnID0ge1xyXG4gICAgRE9NOiB7XHJcbiAgICAgICAgLy8gQ3NzINC60LvQsNGB0YEgRE9NINGN0LvQtdC80LXQvdGC0LAg0LIg0LrQvtGC0L7RgNC+0Lwg0L3QtdC+0LHRhdC+0LTQuNC80L4g0L7RgtC+0LHRgNCw0LbQsNGC0Ywg0YHQv9C40YHQvtC6INGO0LfQtdGA0L7QslxyXG4gICAgICAgIFVTRVJfTElTVF9DU1NfQ0xBU1M6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX3VzZXJzLWxpc3RcIixcclxuICAgICAgICAvLyDQkdC70L7QuiDQsiDQutC+0YLQvtGA0YvQuSDQt9Cw0LPRgNGD0LbQsNC10YLRgdGPINGH0LDRglxyXG4gICAgICAgIENTU19DSEFUX0NPTlRBSU5TX0JMT0NLX1NUWUxFOiBcInJvb3QtdG91Y2hzb2Z0LWRhc2hib2FyZF9jaGF0XCIsXHJcbiAgICAgICAgLy8g0JrQu9Cw0YHRgSBET00g0Y3Qu9C10LzQtdC90YLQsCDQtNC70Y8g0L7RgtC/0YDQsNCy0LrQuCDRgdC+0L7QsdGJ0LXQvdC40Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOINC/0L4g0L3QsNC20LDRgtC40Y5cclxuICAgICAgICBDU1NfU0VORF9NRVNTQUdFX0JVVFRPTl9DTEFTUzogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfc2VuZC1idXR0b25cIixcclxuICAgICAgICAvLyDQmtC70LDRgdGBINC60L3QvtC/0LrQuCDQt9Cw0LrRgNGL0LLQsNGO0YnQtdC5INGH0LDRglxyXG4gICAgICAgIENTU19DTE9TRV9DSEFUX0JVVFRPTl9DTEFTUzogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfY2xvc2UtY2hhdFwiLFxyXG4gICAgICAgIC8vIElEIERPTSDRjdC70LXQvNC10L3RgtCwINC00Y/QuyDQstCy0L7QtNCwINC/0LDRgNCw0LzQtdGC0YDQsCDRhNC40LvRjNGC0YDQsNGG0LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuVxyXG4gICAgICAgIENTU19GSUxURVJfSU5QVVRfSUQ6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX2ZpbHRlci1pbnB1dFwiLFxyXG4gICAgICAgIC8vIElEIERPTSDRjdC70LXQvNC10L3RgtCwINC00Y/QuyDQstCy0L7QtNCwINC/0LDRgNCw0LzQtdGC0YDQsCDRgdC+0YDRgtC40YDQvtCy0LrQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQuVxyXG4gICAgICAgIENTU19TT1JUX1NFTEVDVF9JRDogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfc29ydFwiXHJcblxyXG4gICAgfSxcclxuICAgIGxhdW5jaGVyOiB7XHJcbiAgICAgICAgcGF0dGVybjogXCJ0b3VjaHNvZnRfY2hhdC1sYXVuY2hlcl9cIixcclxuICAgICAgICBhZnRlciA6IFtcclxuICAgICAgICAgICAgXCJjaGF0VGl0bGVcIiwgXCJjaGF0VXJsXCIsIFwiY2hhdENsYXNzXCIsIFwiY2hhdFBvc2l0aW9uU2VsZWN0XCIsXHJcbiAgICAgICAgICAgIFwiYWxsb3dNaW5pbWl6ZVwiLCBcImFsbG93RHJhZ1wiLCBcInJlcXVpcmVOYW1lXCIsIFwic2hvd1RpbWVcIiwgXCJuZXR3b3JrUmFkaW9YTVJcIixcclxuICAgICAgICAgICAgXCJuZXR3b3JrUmFkaW9GZXRjaFwiLFwibmV0d29ya1JhZGlvTG9uZ1BvbGxcIiwgXCJzY3JpcHRDb2RlXCJcclxuICAgICAgICBdLFxyXG4gICAgICAgIHNyY1N0YXJ0OiBcIiZsdHNjcmlwdCBzcmM9J2h0dHBzOi8vcmF3Z2l0LmNvbS9VbmFjY2VwdGFibGVDb25kaXRpb24vSG9tZXdvcmtfMi9tYXN0ZXIvanMvY2hhdC5qcz9cIixcclxuICAgICAgICBzcmNFbmQ6ICBcIicmZ3QmbHQvc2NyaXB0Jmd0XCJcclxuICAgIH0sXHJcbiAgICB1c2VyTGlzdDoge1xyXG4gICAgICAgIC8vIENzcyDQutC70LDRgdGB0Ysg0LTQu9GPINGA0LDQsdC+0YLRiyDRgSDQvtCx0YrQtdC60YLQvtC8INGB0L/QuNGB0LrQsCDRjtC30LXRgNC+0LJcclxuICAgICAgICAvLyDQrdC70LXQvNC10L3RgiDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cclxuICAgICAgICBVU0VSX0VMRU1FTlRfQ1NTX0NMQVNTOiBcInJvb3QtdG91Y2hzb2Z0LWRhc2hib2FyZF91c2VyXCIsXHJcbiAgICAgICAgLy8g0K3Qu9C10LzQtdC90YIg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8gaWQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXHJcbiAgICAgICAgVVNFUl9JRF9FTEVNRU5UX0NTU19DTEFTUzogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfdXNlci1pZFwiLFxyXG4gICAgICAgIC8vINCt0LvQtdC80LXQvdGC0Ysg0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0YHRgtCw0YLRg9GB0LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXHJcbiAgICAgICAgVVNFUl9JTkRJQ0FUT1JfQ1NTX0NMQVNTX09GRkxJTkU6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX3VzZXItb2ZmbGluZVwiLFxyXG4gICAgICAgIFVTRVJfSU5ESUNBVE9SX0NTU19DTEFTU19PTkxJTkU6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX3VzZXItb25saW5lXCJcclxuICAgIH0sXHJcbiAgICBjaGF0U2V0dGluZ3M6IHtcclxuICAgICAgICB0eXBlT2ZSZXF1ZXN0OiBcImxvbmdQb2xsXCJcclxuICAgIH0sXHJcbiAgICBjdXJyZW50VXNlclNldHRpbmdzOiB7XHJcbiAgICAgICAgdXNlcklkOiBudWxsLFxyXG4gICAgICAgIHVzZXJOYW1lOiBudWxsXHJcbiAgICB9LFxyXG5cclxuICAgIGN1cnJlbnREYXNoYm9hcmRDb25kaXRpb246IHtcclxuICAgICAgICBmaWx0ZXJCeTogbnVsbCxcclxuICAgICAgICBzb3J0Qnk6IG51bGxcclxuICAgIH0sXHJcblxyXG5cclxuICAgIGludGVydmFsOiB7XHJcbiAgICAgICAgVVBEQVRFX1VTRVJTX1RJTUU6IDUwMDAsXHJcbiAgICAgICAgT05MSU5FX0lOVEVSVkFMOiAxMjAwMFxyXG4gICAgfSxcclxuICAgIHJvdXRlcjoge1xyXG4gICAgICAgIC8vIFVSTCDQt9Cw0LPRgNGD0LfQutC4INGB0YLRgNCw0L3QuNGG0YsgYWJvdXRcclxuICAgICAgICBBQk9VVF9IVE1MX1BBVEg6IFwiaHR0cHM6Ly9yYXdnaXQuY29tL1VuYWNjZXB0YWJsZUNvbmRpdGlvbi9vbmxpbmVfY29uc3VsdGFudF93ZWJfYXBwL21hc3Rlci9hcHAvaHRtbC9kYXNoYm9hcmQvYWJvdXQuaHRtbFwiLFxyXG4gICAgICAgIC8vIFVSTCDQt9Cw0LPRgNGD0LfQutC4INGB0YLRgNCw0L3QuNGG0YsgY29uZmlndXJhdGlvblxyXG4gICAgICAgIExBVU5DSEVSX0hUTUxfUEFUSDogXCJodHRwczovL3Jhd2dpdC5jb20vVW5hY2NlcHRhYmxlQ29uZGl0aW9uL29ubGluZV9jb25zdWx0YW50X3dlYl9hcHAvbWFzdGVyL2FwcC9odG1sL2Rhc2hib2FyZC9jaGF0TGF1bmNoZXIuaHRtbFwiLFxyXG4gICAgICAgIC8vIFVSTCDQt9Cw0LPRgNGD0LfQutC4INGB0YLRgNCw0L3QuNGG0YsgZGFzaGJvYXJkXHJcbiAgICAgICAgREFTSEJPQVJEX0hUTUxfUEFUSDogXCJodHRwczovL3Jhd2dpdC5jb20vVW5hY2NlcHRhYmxlQ29uZGl0aW9uL29ubGluZV9jb25zdWx0YW50X3dlYl9hcHAvbWFzdGVyL2FwcC9odG1sL2Rhc2hib2FyZC9kYXNoYm9hcmQuaHRtbFwiLFxyXG4gICAgICAgIC8vIENzcyDQutC70LDRgdGBINGN0LvQtdC80LXQvdGC0LAsINCyINC60L7RgtC+0YDRi9C5INC30LDQs9GA0YPQttCw0LXRgtGB0Y8g0L3QtdC+0LHRhdC+0LTQuNC80LDRjyDRh9Cw0YHRgtGMINGB0YLRgNCw0L3QuNGG0YtcclxuICAgICAgICBDT05URU5UX0NMQVNTOiBcImNvbnRlbnRcIixcclxuICAgICAgICAvLyBDc3Mg0LrQu9Cw0YHRgSwg0L7RgtC80LXRh9Cw0Y7RidC40Lkg0LDQutGC0LjQstC90YPRjiDRgdGC0YDQsNC90LjRhtGDINCyINC/0LDQvdC10LvQuCDQvdCw0LLQuNCz0LDRhtC40LhcclxuICAgICAgICBOQVZJR0FUSU9OX0FDVElWRV9DU1M6IFwibmF2aWdhdGlvbi1hY3RpdmVcIlxyXG4gICAgfSxcclxuICAgIG1lc3NhZ2VzOiB7XHJcbiAgICAgICAgLy8gQ3NzINC60LvQsNGB0YEg0LTQu9GPINGN0LvQtdC80LXQvdCw0YIg0YEg0YHQvtC+0LHRidC10L3QuNC1LCDQtdGB0LvQuCDRjtC30LXRgCDQvdC1INC/0YDQvtGH0LjRgtCw0Lsg0YHQvtC+0LHRidC10L3QuNGPXHJcbiAgICAgICAgQ1NTX1VTRVJfTk9UX1JFQURfTUVTU0FHRVM6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX21lc3NhZ2Utbm90LXJlYWRcIixcclxuICAgICAgICAvLyBDc3Mg0LrQu9Cw0YHRgSBET00g0Y3Qu9C10LzQtdC90YLQsCDQsiDQutC+0YLQvtGA0L7QvCDQsdGD0LTQtdC8INC+0YLQvtCx0YDQsNC20LDRgtGMINGB0L7QvtCx0YnQtdC90LjRj1xyXG4gICAgICAgIENTU19DSEFUX01FU1NBR0VTX0NPTlRBSU5FUjogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfY2hhdC1tZXNzYWdlc1wiLFxyXG5cclxuICAgICAgICAvLyBtZXNzYWdlXHJcbiAgICAgICAgLy8gQ3NzINC60LvQsNGB0YEg0Y3Qu9C10LzQtdC90YLQsCDQsiDQutC+0YLQvtGA0L7QvCDQvdCw0YXQvtC00LjRgtGB0Y8g0YHQvtC+0LHRidC10L3QuNGPLNC00LDRgtCwINC4INC40LzRjyDQvtGC0L/RgNCw0LLQuNGC0LXQu9GPXHJcbiAgICAgICAgQ1NTX01FU1NBR0VfQ09OVEFJTkVSOiBcInJvb3QtdG91Y2hzb2Z0LWRhc2hib2FyZF9jaGF0LW1lc3NhZ2UtZWxlbWVudHNcIixcclxuICAgICAgICAvLyBDc3Mg0LrQu9Cw0YHRgSBET00g0Y3Qu9C10LzQtdC90YLQsCDQsiDQutC+0YLQvtGA0L7QvCDQsdGD0LTQtdC8INC+0YLQvtCx0YDQsNC20LDRgtGMINC40LzRjyDQvtGC0L/RgNCw0LLQuNGC0LXQu9GPXHJcbiAgICAgICAgQ1NTX0NIQVRfTUVTU0FHRV9TRU5ERVJfTkFNRTogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfY2hhdC1tZXNzYWdlLXNlbmRlclwiLFxyXG4gICAgICAgIC8vIENzcyDQutC70LDRgdGBIERPTSDRjdC70LXQvNC10L3RgtCwINCyINC60L7RgtC+0YDQvtC8INCx0YPQtNC10Lwg0L7RgtC+0LHRgNCw0LbQsNGC0Ywg0LTQsNGC0YMg0YHQvtC+0LHRidC10L3QuNGPXHJcbiAgICAgICAgQ1NTX0NIQVRfTUVTU0FHRV9EQVRFOiBcInJvb3QtdG91Y2hzb2Z0LWRhc2hib2FyZF9jaGF0LW1lc3NhZ2UtZGF0ZVwiLFxyXG4gICAgICAgIC8vIENzcyDQutC70LDRgdGBIERPTSDRjdC70LXQvNC10L3RgtCwINCyINC60L7RgtC+0YDQvtC8INCx0YPQtNC10Lwg0L7RgtC+0LHRgNCw0LbQsNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1XHJcbiAgICAgICAgQ1NTX0NIQVRfTUVTU0FHRTogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfY2hhdC1tZXNzYWdlXCJcclxuXHJcbiAgICB9LFxyXG5cclxuICAgIC8vINC60LvQsNGB0YEg0L/QtdGA0LXQutC70Y7Rh9Cw0YLQtdC70Ywg0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDRjdC70LXQvNC10L3RgtCwXHJcbiAgICBJTlZJU0lCTEVfQ0xBU1M6IFwicm9vdC10b3VjaHNvZnQtZGFzaGJvYXJkX2ludmlzaWJsZS1lbGVtZW50XCIsXHJcblxyXG4gICAgREFUQV9CQVNFX1VSTDogXCJodHRwczovL29ubGluZWNvbnN1bHRhbnR3ZWJhcHAuZmlyZWJhc2Vpby5jb21cIixcclxuXHJcblxyXG4gICAgQURNSU5fTkFNRTogXCJBZG1pblwiLFxyXG5cclxuICAgIC8vIElEIERPTSDRjdC70LXQvNC10L3RgtCwINC00Y/QuyDQstCy0L7QtNCwINGB0L7QvtCx0YnQtdC90LjRjyDQv9C10YDQtdC0INC+0YLQv9GA0LDQstC60L7QuSDRjtC30LXRgNGDXHJcbiAgICBDU1NfQ1VSUkVOVF9JTlBVVF9DTEFTUzogXCJyb290LXRvdWNoc29mdC1kYXNoYm9hcmRfdGV4dGFyZWEtZm9yLW1lc3NhZ2VcIixcclxuXHJcbiAgICBMT0NBTF9TVE9SQUdFX05BTUU6IFwiY3VycmVudENvbmRpdGlvblwiLFxyXG5cclxuICAgIC8vINC00LvRjyDQvdC+0LLRi9GFINGB0L7QvtCx0YnQtdC90LjQuSDQvtGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5XHJcbiAgICAvLyDQldGB0LvQuCDRjtC30LXRgCDQv9GA0LjRgdC70LDQuyDRgdC+0L7QvtCx0YnQtdC90LjQtSwg0L3QsCDRjtC30LXRgNCwINCyINGB0L/QuNGB0LrQtSDQstC10YjQsNC10YLRgdGPINGN0YLQvtGCINGB0YLQuNC70YxcclxuICAgIENTU19IQVZFX05FV19NRVNTQUdFX1NUWUxFOiBcInJvb3QtdG91Y2hzb2Z0LWRhc2hib2FyZF91c2VyLWhhdmUtbmV3LW1lc3NhZ2VcIlxyXG5cclxuXHJcblxyXG5cclxufTtcclxuLyogZXhwb3J0ZWQgZGF0YUNvbm5lY3RvckNvbmZpZyAqL1xyXG4vKiBleHBvcnRlZCBkYXRhQmFzZVVybCAqL1xyXG4vKiBleHBvcnRlZCBnZXRFbGVtZW50ICovXHJcbi8qIGdsb2JhbCBtYWluQ29uZmlnICovXHJcbnZhciBkYXRhQmFzZVVybCA9IG1haW5Db25maWcuREFUQV9CQVNFX1VSTDtcclxuXHJcbnZhciBnZXRFbGVtZW50ID0gZnVuY3Rpb24gZ2V0RWxlbWVudEZyb21ET00gKHNlbGVjdG9yLCBpc0FsbCwgaXRJc0lkKSB7XHJcbiAgICB2YXIgc2VsZWN0b3JTdGFydCA9IChpdElzSWQpID8gXCIjXCIgOiBcIi5cIjtcclxuICAgIGlmKGlzQWxsKSB7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JTdGFydCArIHNlbGVjdG9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yU3RhcnQgKyBzZWxlY3Rvcik7XHJcbn07XHJcblxyXG5cclxudmFyIGRhdGFDb25uZWN0b3JDb25maWcgPSB7XHJcbiAgICB0eXBlT2ZSZXF1ZXN0OiBtYWluQ29uZmlnLmNoYXRTZXR0aW5ncy50eXBlT2ZSZXF1ZXN0XHJcbn07XHJcblxyXG4vLyBzZXJ2aWNlXHJcblxyXG4vKiBleHBvcnRlZCBzb3J0ZXIgKi9cclxudmFyIHNvcnRlciA9IChmdW5jdGlvbiBjcmVhdGVOZXdTb3J0ZXIgKCkge1xyXG4gICAgZnVuY3Rpb24gU29ydGVyKCkge31cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVTb3J0ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBTb3J0ZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzd2FwKGl0ZW1zLCBmaXJzdEluZGV4LCBzZWNvbmRJbmRleCkge1xyXG4gICAgICAgIHZhciB0ZW1wID0gaXRlbXNbZmlyc3RJbmRleF07XHJcbiAgICAgICAgaXRlbXNbZmlyc3RJbmRleF0gPSBpdGVtc1tzZWNvbmRJbmRleF07XHJcbiAgICAgICAgaXRlbXNbc2Vjb25kSW5kZXhdID0gdGVtcDtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJ0aXRpb24oaXRlbXMsIGxlZnQsIHJpZ2h0LCBzb3J0RmllbGQpIHtcclxuICAgICAgICB2YXIgcGl2b3QgPSBpdGVtc1tNYXRoLmZsb29yKChyaWdodCArIGxlZnQpIC8gMildW3NvcnRGaWVsZF07XHJcbiAgICAgICAgdmFyIGkgPSBsZWZ0O1xyXG4gICAgICAgIHZhciBqID0gcmlnaHQ7XHJcblxyXG4gICAgICAgIHdoaWxlIChpIDw9IGopIHtcclxuICAgICAgICAgICAgd2hpbGUgKGl0ZW1zW2ldW3NvcnRGaWVsZF0gPiBwaXZvdCkge1xyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChpdGVtc1tqXVtzb3J0RmllbGRdIDwgcGl2b3QpIHtcclxuICAgICAgICAgICAgICAgIGotLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaSA8PSBqKSB7XHJcbiAgICAgICAgICAgICAgICBzd2FwKGl0ZW1zLCBpLCBqKTtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIGotLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaTtcclxuICAgIH1cclxuXHJcbiAgICBTb3J0ZXIucHJvdG90eXBlLnF1aWNrU29ydCA9IGZ1bmN0aW9uIHF1aWNrU29ydChcclxuICAgICAgICBpdGVtcyxcclxuICAgICAgICBsZWZ0LFxyXG4gICAgICAgIHJpZ2h0LFxyXG4gICAgICAgIHNvcnRGaWVsZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIGluZGV4O1xyXG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGluZGV4ID0gcGFydGl0aW9uKGl0ZW1zLCBsZWZ0LCByaWdodCwgc29ydEZpZWxkKTtcclxuICAgICAgICAgICAgaWYgKGxlZnQgPCBpbmRleCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVpY2tTb3J0KGl0ZW1zLCBsZWZ0LCBpbmRleCAtIDEsIHNvcnRGaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgcmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucXVpY2tTb3J0KGl0ZW1zLCBpbmRleCwgcmlnaHQsIHNvcnRGaWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gY3JlYXRlU29ydGVyKCk7XHJcbn0pKCk7XHJcbi8qIGV4cG9ydGVkIGNsZWFyRWxlbWVudENvbnRlbnQgKi9cclxuLyogZ2xvYmFsIGdldEVsZW1lbnQgKi9cclxuLy8g0J7Rh9C40YnQsNC10YIgRE9NINGB0L7QtNC10YDQttCw0YnQuNC5INGN0LvQtdC80LXQvdGC0Ysg0YHQv9C40YHQutCwINGO0LfQtdGA0L7QslxyXG5mdW5jdGlvbiBjbGVhckVsZW1lbnRDb250ZW50KGVsZW1lbnRTZWxlY3Rvcikge1xyXG4gICAgdmFyIGVsZW1lbnQgPSBnZXRFbGVtZW50KGVsZW1lbnRTZWxlY3Rvcik7XHJcbiAgICB3aGlsZSAoZWxlbWVudC5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBkYXRhYmFzZVxyXG5cclxuLyogZXhwb3J0ZWQgZGF0YUNvbm5lY3RvciAqL1xyXG4vKiBnbG9iYWwgZGF0YUNvbm5lY3RvckNvbmZpZyAqL1xyXG4vLyDQnNC+0LTRg9C70Ywg0L/RgNC10LTQvtGB0YLQsNCy0LvRj9C10YIg0YHQv9C+0YHQvtCxINC+0YLQv9GA0LDQstC60Lgg0LfQsNC/0YDQvtGB0LAg0Log0LjRgdGC0L7Rh9C90LjQutGDINC00LDQvdC90YvRhVxyXG4vLyDQlNC70Y8g0YDQtdC60LLQtdGB0YLQsCDQvdC10L7QsdGF0L7QtNC40Lwg0L/Rg9GC0YwsINGC0LXQu9C+INC30LDQv9GA0L7RgdCwLCDRgtC40L8g0LfQsNC/0YDQvtGB0LBcclxuLy8gcmVxdWVzdCDQstC+0LfQstGA0LDRidCw0LXRgiBQcm9taXNlXHJcbnZhciBkYXRhQ29ubmVjdG9yID0gKGZ1bmN0aW9uIGdldERhdGFTb3VyY2VBUEkoZGF0YUNvbm5lY3RvckNvbmZpZ09iaikge1xyXG4gICAgdmFyIGRhdGFCYXNlQ29ubmVjdG9yO1xyXG4gICAgdmFyIGRhdGFCYXNlQVBJO1xyXG5cclxuICAgIGZ1bmN0aW9uIERhdGFCYXNlQ29ubmVjdG9yKCkge31cclxuXHJcbiAgICBEYXRhQmFzZUNvbm5lY3Rvci5wcm90b3R5cGUucmVxdWVzdEZldGNoID0gZnVuY3Rpb24gcmVxdWVzdEZldGNoKFxyXG4gICAgICAgIHJlcXVlc3RQYXRoLFxyXG4gICAgICAgIHJlcXVlc3RCb2R5LFxyXG4gICAgICAgIHJlcXVlc3RUeXBlLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4gZmV0Y2gocmVxdWVzdFBhdGgsIHtcclxuICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgQWNjZXB0OiBjb250ZW50VHlwZSxcclxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGNvbnRlbnRUeXBlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdFR5cGUsXHJcbiAgICAgICAgICAgIGJvZHk6IHJlcXVlc3RCb2R5XHJcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiBnZXRSZXNwb25zZUpTT04ocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgaWYoY29udGVudFR5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIERhdGFCYXNlQ29ubmVjdG9yLnByb3RvdHlwZS5yZXF1ZXN0WE1SID0gZnVuY3Rpb24gcmVxdWVzdFhNUihcclxuICAgICAgICByZXF1ZXN0UGF0aCxcclxuICAgICAgICByZXF1ZXN0Qm9keSxcclxuICAgICAgICByZXF1ZXN0VHlwZSxcclxuICAgICAgICBjb250ZW50VHlwZVxyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIHJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICAgICAgICAgICAgeGhyLm9wZW4ocmVxdWVzdFR5cGUsIHJlcXVlc3RQYXRoLCB0cnVlKTtcclxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgY29udGVudFR5cGUpO1xyXG4gICAgICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gbG9hZENhc2UoKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjb250ZW50VHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeGhyLnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiBlcnJvckNhc2UoKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoeGhyLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAocmVxdWVzdEJvZHkpIHtcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKHJlcXVlc3RCb2R5KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgRGF0YUJhc2VDb25uZWN0b3IucHJvdG90eXBlLmxvbmdQb2xsID0gZnVuY3Rpb24gbG9uZ1BvbGwgKHRhcmdldFVybCkge1xyXG4gICAgICAgIHZhciB4aHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHhodHRwLm9wZW4oJ0dFVCcsIHRhcmdldFVybCwgdHJ1ZSk7XHJcbiAgICAgICAgeGh0dHAuc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ3RleHQvZXZlbnQtc3RyZWFtJyk7XHJcbiAgICAgICAgcmV0dXJuIHhodHRwO1xyXG4gICAgICAgIC8vIHhodHRwLnNlbmQoKTtcclxuICAgIH07XHJcblxyXG4gICAgZGF0YUJhc2VDb25uZWN0b3IgPSBuZXcgRGF0YUJhc2VDb25uZWN0b3IoKTtcclxuICAgIGlmIChkYXRhQ29ubmVjdG9yQ29uZmlnT2JqLnR5cGVPZlJlcXVlc3QgPT09IFwiZmV0Y2hcIikge1xyXG4gICAgICAgIGRhdGFCYXNlQVBJID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0OiBkYXRhQmFzZUNvbm5lY3Rvci5yZXF1ZXN0RmV0Y2hcclxuICAgICAgICB9O1xyXG4gICAgfSBlbHNlIGlmIChkYXRhQ29ubmVjdG9yQ29uZmlnT2JqLnR5cGVPZlJlcXVlc3QgPT09IFwiWEhSXCIpIHtcclxuICAgICAgICBkYXRhQmFzZUFQSSA9IHtcclxuICAgICAgICAgICAgcmVxdWVzdDogZGF0YUJhc2VDb25uZWN0b3IucmVxdWVzdFhNUlxyXG4gICAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRhdGFCYXNlQVBJID0ge1xyXG4gICAgICAgICAgICByZXF1ZXN0OiBkYXRhQmFzZUNvbm5lY3Rvci5yZXF1ZXN0WE1SLFxyXG4gICAgICAgICAgICBjcmVhdGVMb25nUG9sbENvbm5lY3Rpb246IGRhdGFCYXNlQ29ubmVjdG9yLmxvbmdQb2xsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0YUJhc2VBUEk7XHJcbn0pKGRhdGFDb25uZWN0b3JDb25maWcpO1xyXG4vKiBleHBvcnRlZCBkYXRhU291cmNlICovXHJcbi8qIGdsb2JhbCBkYXRhQmFzZVVybCAqL1xyXG4vKiBnbG9iYWwgZGF0YUNvbm5lY3RvciAqL1xyXG4vLyDQnNC+0LTRg9C70Ywg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQtNCw0L3QvdGL0YVcclxuLy8g0JLRgdC1IEFQSSDRhNGD0L3QutGG0LjQuCDQstC+0LfQstGA0LDRidCw0Y7RgiDQv9GA0L7QvNC40YHRi1xyXG52YXIgZGF0YVNvdXJjZSA9IChmdW5jdGlvbiBjcmVhdGVEYXRhU291cmNlIChkYXRhQ29ubmVjdG9yLCBjb25maWcpIHtcclxuICAgIHZhciBkYXRhU291cmNlSW5zdGFuY2U7XHJcbiAgICB2YXIgZGF0YVNvdXJjZUFQSTtcclxuICAgIHZhciBVU0VSX0xJU1QgPSBcInVzZXJMaXN0XCI7XHJcbiAgICB2YXIgVVNFUl9NRVNTQUdFUyA9IFwidXNlcnNNZXNzYWdlc1wiO1xyXG4gICAgdmFyIFVTRVJTX1NFVFRJTkdTID0gXCJ1c2Vyc1NldHRpbmdzXCI7XHJcbiAgICB2YXIgbmV3VXNlckRhdGEgPSB7XHJcbiAgICAgICAgaXNNaW5pbWl6ZTogZmFsc2UsXHJcbiAgICAgICAgcmVhZExhc3RNZXNzYWdlOiB0cnVlXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIGxvbmdQb2xsQ29ubmVjdCAoZGF0YVR5cGUsIHVzZXJJZCkge1xyXG4gICAgICAgIHZhciByZXF1ZXN0UGF0aCA9IHRoaXMuY3JlYXRlUmVxdWVzdFBhdGgoZGF0YUJhc2VVcmwsIHVzZXJJZCwgbnVsbCwgZGF0YVR5cGUpO1xyXG4gICAgICAgIHJldHVybiBkYXRhQ29ubmVjdG9yLmNyZWF0ZUxvbmdQb2xsQ29ubmVjdGlvbihyZXF1ZXN0UGF0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYmFzaWNDb25uZWN0IChkYXRhVHlwZSwgdXNlcklkKSB7XHJcbiAgICAgICAgdmFyIHJlcXVlc3RQYXRoID0gdGhpcy5jcmVhdGVSZXF1ZXN0UGF0aChkYXRhQmFzZVVybCwgdXNlcklkLCBudWxsLCBkYXRhVHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFDb25uZWN0b3IucmVxdWVzdC5iaW5kKG51bGwsIHJlcXVlc3RQYXRoLCBudWxsLCBcIkdFVFwiLCBcImFwcGxpY2F0aW9uL2pzb25cIilcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBEYXRhU291cmNlKCkge1xyXG4gICAgICAgIGlmKGNvbmZpZy5jaGF0U2V0dGluZ3MudHlwZU9mUmVxdWVzdCA9PT0gXCJsb25nUG9sbFwiKSB7XHJcbiAgICAgICAgICAgIERhdGFTb3VyY2UucHJvdG90eXBlLmdldERhdGEgPSBsb25nUG9sbENvbm5lY3RcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBEYXRhU291cmNlLnByb3RvdHlwZS5nZXREYXRhID0gYmFzaWNDb25uZWN0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIERhdGFTb3VyY2UucHJvdG90eXBlLmNyZWF0ZVJlcXVlc3RQYXRoID0gZnVuY3Rpb24gY3JlYXRlUmVxdWVzdFBhdGgoXHJcbiAgICAgICAgZGF0YUJhc2VVUkwsXHJcbiAgICAgICAgdXNlcklkLFxyXG4gICAgICAgIHJlcXVlc3RQb3N0Zml4LFxyXG4gICAgICAgIHJlcXVlc3RQcmVmaXhcclxuICAgICkge1xyXG4gICAgICAgIHZhciBwYXRoID0gZGF0YUJhc2VVUkw7XHJcbiAgICAgICAgaWYocmVxdWVzdFByZWZpeCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwYXRoICs9IFwiL1wiICsgcmVxdWVzdFByZWZpeFxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlcklkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHBhdGggKz0gXCIvXCIgKyB1c2VySWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZXF1ZXN0UG9zdGZpeCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBwYXRoICs9IFwiL1wiICsgcmVxdWVzdFBvc3RmaXg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHBhdGggKz0gXCIuanNvblwiO1xyXG4gICAgICAgIHJldHVybiBwYXRoO1xyXG4gICAgfTtcclxuXHJcbiAgICBEYXRhU291cmNlLnByb3RvdHlwZS5nZXRIVE1MID0gZnVuY3Rpb24gZ2V0SFRNTCAocmVxdWVzdFBhdGgpIHtcclxuICAgICAgICByZXR1cm4gZGF0YUNvbm5lY3Rvci5yZXF1ZXN0KFxyXG4gICAgICAgICAgICByZXF1ZXN0UGF0aCxcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgXCJHRVRcIiwgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCdcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgRGF0YVNvdXJjZS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uIHNldERhdGEgKGRhdGFUeXBlLCByZXF1ZXN0VHlwZSwgZmllbGROYW1lLCB1c2VySWQsIHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIHJlcXVlc3RQYXRoO1xyXG4gICAgICAgIGlmKHJlcXVlc3RUeXBlID09PSBcIlBVVFwiKSB7XHJcbiAgICAgICAgICAgIHJlcXVlc3RQYXRoID0gdGhpcy5jcmVhdGVSZXF1ZXN0UGF0aChkYXRhQmFzZVVybCwgdXNlcklkLCBmaWVsZE5hbWUsIGRhdGFUeXBlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXF1ZXN0UGF0aCA9IHRoaXMuY3JlYXRlUmVxdWVzdFBhdGgoZGF0YUJhc2VVcmwsIHVzZXJJZCwgbnVsbCwgZGF0YVR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGF0YUNvbm5lY3Rvci5yZXF1ZXN0KFxyXG4gICAgICAgICAgICByZXF1ZXN0UGF0aCxcclxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxyXG4gICAgICAgICAgICByZXF1ZXN0VHlwZSxcclxuICAgICAgICAgICAgXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBEYXRhU291cmNlLnByb3RvdHlwZS5hZGROZXdVc2VyVG9EYXRhU291cmNlID0gZnVuY3Rpb24gYWRkTmV3VXNlclRvRGF0YVNvdXJjZSAodXNlcklkLCB1c2VyTmFtZSkge1xyXG4gICAgICAgIHZhciBkYXRlID0gbmV3IERhdGU7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIG5ld1VzZXJEYXRhLnVzZXJOYW1lID0gdXNlck5hbWU7XHJcbiAgICAgICAgT2JqZWN0LmtleXMobmV3VXNlckRhdGEpLm1hcChmdW5jdGlvbiAoc2V0dGluZ05hbWUpIHtcclxuICAgICAgICAgICAgdGhhdC5zZXREYXRhKFVTRVJTX1NFVFRJTkdTLCBcIlBVVFwiLCBzZXR0aW5nTmFtZSwgdXNlcklkLCBuZXdVc2VyRGF0YVtzZXR0aW5nTmFtZV0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2V0RGF0YShVU0VSX0xJU1QsIFwiUFVUXCIsIG51bGwsIHVzZXJJZCwge1wibGFzdE9ubGluZVwiOiBkYXRlLmdldFRpbWUoKSwgXCJzZW5kTmV3TWVzc2FnZVwiOiBmYWxzZX0pO1xyXG4gICAgfTtcclxuICAgIC8vINCh0L7Qt9C00LDQtdC8IGluc3RhbmNlINC+0LHRitC10LrRgtCwLCDQt9Cw0LTQsNC10LwgQVBJXHJcblxyXG4gICAgZGF0YVNvdXJjZUluc3RhbmNlID0gbmV3IERhdGFTb3VyY2UoKTtcclxuICAgIGRhdGFTb3VyY2VBUEkgPSB7XHJcbiAgICAgICAgdXNlcnNBUEk6IHtcclxuICAgICAgICAgICAgZ2V0VXNlckxpc3Q6IGRhdGFTb3VyY2VJbnN0YW5jZS5nZXREYXRhLmJpbmQoXHJcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBVU0VSX0xJU1RcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgZ2V0VXNlclNldHRpbmdzOiBkYXRhU291cmNlSW5zdGFuY2UuZ2V0RGF0YS5iaW5kKFxyXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZUluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgVVNFUlNfU0VUVElOR1NcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgZ2V0VXNlck1lc3NhZ2VzOiBkYXRhU291cmNlSW5zdGFuY2UuZ2V0RGF0YS5iaW5kKFxyXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZUluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgVVNFUl9NRVNTQUdFU1xyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBnZXRTZXR0aW5nRmllbGQ6IGRhdGFTb3VyY2VJbnN0YW5jZS5nZXREYXRhLmJpbmQoXHJcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBVU0VSU19TRVRUSU5HU1xyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBzZW5kTWVzc2FnZTogZGF0YVNvdXJjZUluc3RhbmNlLnNldERhdGEuYmluZChcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VJbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIFVTRVJfTUVTU0FHRVMsXHJcbiAgICAgICAgICAgICAgICBcIlBPU1RcIlxyXG5cclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgc2V0U2V0dGluZ0ZpZWxkOiBkYXRhU291cmNlSW5zdGFuY2Uuc2V0RGF0YS5iaW5kKFxyXG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZUluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgVVNFUlNfU0VUVElOR1MsXHJcbiAgICAgICAgICAgICAgICBcIlBVVFwiXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIGFkZE5ld1VzZXJUb0RhdGFTb3VyY2U6IGRhdGFTb3VyY2VJbnN0YW5jZS5hZGROZXdVc2VyVG9EYXRhU291cmNlLmJpbmQoXHJcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSW5zdGFuY2VcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgdXBkYXRlTGFzdE9ubGluZTogZGF0YVNvdXJjZUluc3RhbmNlLnNldERhdGEuYmluZChcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VJbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIFVTRVJfTElTVCxcclxuICAgICAgICAgICAgICAgIFwiUFVUXCIsXHJcbiAgICAgICAgICAgICAgICBcImxhc3RPbmxpbmVcIlxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICB1cGRhdGVTZW5kTmV3TWVzc2FnZUZsYWc6IGRhdGFTb3VyY2VJbnN0YW5jZS5zZXREYXRhLmJpbmQoXHJcbiAgICAgICAgICAgICAgICBkYXRhU291cmNlSW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBVU0VSX0xJU1QsXHJcbiAgICAgICAgICAgICAgICBcIlBVVFwiLFxyXG4gICAgICAgICAgICAgICAgXCJzZW5kTmV3TWVzc2FnZVwiXHJcbiAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgIHVwZGF0ZU1lc3NhZ2VJc1JlYWRGaWVsZDogZGF0YVNvdXJjZUluc3RhbmNlLnNldERhdGEuYmluZChcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2VJbnN0YW5jZSxcclxuICAgICAgICAgICAgICAgIFVTRVJfTUVTU0FHRVMsXHJcbiAgICAgICAgICAgICAgICBcIlBVVFwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbW1vbkFQSToge1xyXG4gICAgICAgICAgICBnZXRIVE1MOiBkYXRhU291cmNlSW5zdGFuY2UuZ2V0SFRNTC5iaW5kKGRhdGFTb3VyY2VJbnN0YW5jZSlcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBkYXRhU291cmNlQVBJO1xyXG59KShkYXRhQ29ubmVjdG9yLCBtYWluQ29uZmlnKTtcclxuLy9cclxuLy8gdmFyIHVzZXJJZCA9IFwiQXRqZXJzMjE1MzAyNzc3NDQ5NThcIjtcclxuLy8gdmFyIG1lc3NhZ2UgPSB7XHJcbi8vICAgICBkYXRlOiBcInRlc3REYXRlXCIsXHJcbi8vICAgICBpdElzUmVhZDogdHJ1ZSxcclxuLy8gICAgIG1lc3NhZ2U6IFwidGVzdE1lc3NhZ2VcIixcclxuLy8gICAgIHVzZXI6IFwiaXZhblwiXHJcbi8vIH07XHJcbi8vIGRhdGFTb3VyY2UudXNlcnNBUEkuc2VuZE1lc3NhZ2UobnVsbCwgdXNlcklkLCBtZXNzYWdlKTtcclxuLy8gZGF0YVNvdXJjZS51c2Vyc0FQSS5zZW5kTWVzc2FnZShudWxsLCB1c2VySWQsICBtZXNzYWdlKTtcclxuLy8gZGF0YVNvdXJjZS51c2Vyc0FQSS5zZW5kTWVzc2FnZSh7dGVzdDogXCJ0ZXN0XCJ9LCB1c2VySWQsICAgbWVzc2FnZSk7XHJcblxyXG5cclxuLy8gZGF0YVNvdXJjZS51c2Vyc0FQSS5nZXRVc2VyTWVzc2FnZXModXNlcklkKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbi8vICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuLy8gfSk7XHJcblxyXG4vLyBkYXRhU291cmNlLnVzZXJzQVBJLnNldFNldHRpbmdGaWVsZChcInRlc3RGaWVsZFwiLCB1c2VySWQsIGZhbHNlKTtcclxuLy8gdmFyIHVzZXJOYW1lID0gXCJhdGplcnNcIjtcclxuXHJcbi8vIGRhdGFTb3VyY2UudXNlcnNBUEkuYWRkTmV3VXNlclRvRGF0YVNvdXJjZSh1c2VySWQsIHVzZXJOYW1lKTtcclxuXHJcbi8vIGRhdGFTb3VyY2UudXNlcnNBUEkuZ2V0VXNlckxpc3QobnVsbCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4vLyAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbi8vIH0pO1xyXG5cclxuXHJcbi8vIGRhdGFTb3VyY2UudXNlcnNBUEkudXBkYXRlTGFzdE9ubGluZSh1c2VySWQsIDExMTExMTExMSk7XHJcbi8vIGRhdGFTb3VyY2UudXNlcnNBUEkuZ2V0VXNlclNldHRpbmdzKHVzZXJJZCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4vLyAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbi8vIH0pO1xyXG5cclxuLy8gZXZlbnRFbWl0dGVyXHJcblxyXG52YXIgZXZlbnRFbWl0dGVyID0gKGZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlciAoKSB7XHJcbiAgICBmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZFN1YnNjcmliZSA9IGZ1bmN0aW9uIGFkZFN1YnNjcmliZShldmVudE5hbWUsIGNhbGxiYWNrICkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICBpZiggIXRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVN1YnNjcmliZSAoKSB7XHJcbiAgICAgICAgICAgIHRoYXQuZXZlbnRzW2V2ZW50TmFtZV0gPSB0aGF0LmV2ZW50c1tldmVudE5hbWVdLmZpbHRlcihmdW5jdGlvbiAoZWxlbWVudENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudENhbGxiYWNrICE9PSBjYWxsYmFja1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlbW92ZVN1YnNjcmliZVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCAoZXZlbnROYW1lLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5ldmVudHNbZXZlbnROYW1lXTtcclxuICAgICAgICBpZiggZXZlbnQgKSB7XHJcbiAgICAgICAgICAgIGV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKG51bGwsIGRhdGEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbn0pKCk7XHJcbnZhciBsb25nUG9sbFJlc3BvbnNlUGFyc2VyID0gKGZ1bmN0aW9uIGNyZWF0ZUxvbmdQb2xsUmVzcG9uc2VQYXJzZXIoKSB7XHJcbiAgICB2YXIgdHlwZXNPZkNoYW5nZSA9IHtcclxuICAgICAgICBtZXNzYWdlOiAvbWVzc2FnZS8sXHJcbiAgICAgICAgdXNlckxpc3Q6IC9sYXN0T25saW5lLnsxLH1zZW5kTmV3TWVzc2FnZS8sXHJcbiAgICAgICAgbGFzdE9ubGluZTogL1wicGF0aFwiOlwiXFwvXFx3ezEsfVxcL2xhc3RPbmxpbmUvLFxyXG4gICAgICAgIHNlbmROZXdNZXNzYWdlOiAvXCJwYXRoXCI6XCJcXC9cXHd7MSx9XFwvc2VuZE5ld01lc3NhZ2UvLFxyXG4gICAgICAgIHNldHRpbmc6IC9yZWFkTGFzdE1lc3NhZ2UvLFxyXG4gICAgICAgIHJlYWQ6IC9yZWFkL1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZXZlbnRSZWd1bGFyID0gL2V2ZW50OiBwdXQvO1xyXG4gICAgdmFyIGhhc051bGxEYXRhID0gL2RhdGE6IG51bGwvO1xyXG4gICAgdmFyIGdldERhdGFSZWd1bGFyID0gL1wiLFwiZGF0YVwiOi87XHJcbiAgICB2YXIgaXRJc05ld01lc3NhZ2VSZWd1bGFyID0gL1wicGF0aFwiOlwiXFwvLS87XHJcbiAgICB2YXIgaXRJc05ld1VzZXJMaXN0UmVndWxhciA9IC9cImRhdGFcIjp7XCJsYXN0T25saW5lXCI6XFxkKyxcInNlbmROZXdNZXNzYWdlXCI6LztcclxuICAgIHZhciBpdElzRmlyc3RVc2VyTGlzdENvbm5lY3Rpb24gPSB0cnVlO1xyXG4gICAgdmFyIGl0SXNGaXJzdFVzZXJTZXR0aW5nQ29ubmVjdGlvbiA9IHRydWU7XHJcblxyXG4gICAgZnVuY3Rpb24gTG9uZ1BvbGxSZXNwb25zZVBhcnNlcigpIHt9XHJcblxyXG4gICAgTG9uZ1BvbGxSZXNwb25zZVBhcnNlci5wcm90b3R5cGUuZ2V0VHlwZU9mQ2hhbmdlcyA9IGZ1bmN0aW9uIGdldFR5cGVPZkNoYW5nZXMoXHJcbiAgICAgICAgYW5zd2VyRGF0YVxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIHR5cGUgPSBPYmplY3Qua2V5cyh0eXBlc09mQ2hhbmdlKS5maWx0ZXIoXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRUeXBlT2ZDaGFuZ2UodHlwZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlc09mQ2hhbmdlW3R5cGVOYW1lXS50ZXN0KGFuc3dlckRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVOYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gdHlwZVswXTtcclxuICAgIH07XHJcblxyXG4gICAgTG9uZ1BvbGxSZXNwb25zZVBhcnNlci5wcm90b3R5cGUucHJlcGFyZURhdGFCZWZvcmVKc29uUGFyc2UgPSBmdW5jdGlvbiBwcmVwYXJlRGF0YUJlZm9yZUpzb25QYXJzZShcclxuICAgICAgICByZXNwb25zZVxyXG4gICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlW3Jlc3BvbnNlLmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgIC5zcGxpdChnZXREYXRhUmVndWxhcilbMV1cclxuICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAuc2xpY2UoMCwgLTEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBMb25nUG9sbFJlc3BvbnNlUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVzZXJzTWVzc2FnZXMgPSBmdW5jdGlvbiBwYXJzZVVzZXJzTWVzc2FnZXMoXHJcbiAgICAgICAgcmVzcG9uc2UsXHJcbiAgICAgICAgY2hhbmdlVHlwZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSB7fTtcclxuICAgICAgICB2YXIgbWVzc2FnZUlkO1xyXG4gICAgICAgIHZhciByZXN1bHRPYmplY3QgPSB7fTtcclxuICAgICAgICBpZiAoY2hhbmdlVHlwZSA9PT0gXCJyZWFkXCIpIHtcclxuICAgICAgICAgICAgZGF0YS5pZCA9IHJlc3BvbnNlW3Jlc3BvbnNlLmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoJ2RhdGE6IHtcInBhdGhcIjpcIi8nKVxyXG4gICAgICAgICAgICAgICAgLnBvcCgpXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoJy9yZWFkXCIsXCInKVxyXG4gICAgICAgICAgICAgICAgLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIGRhdGEudmFsdWUgPSByZXNwb25zZVtyZXNwb25zZS5sZW5ndGggLSAxXVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KCcvcmVhZFwiLFwiZGF0YVwiOicpXHJcbiAgICAgICAgICAgICAgICAucG9wKClcclxuICAgICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWl0SXNOZXdNZXNzYWdlUmVndWxhci50ZXN0KHJlc3BvbnNlW3Jlc3BvbnNlLmxlbmd0aCAtIDFdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGaXJzdERhdGEocmVzcG9uc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXNzYWdlSWQgPSByZXNwb25zZVtyZXNwb25zZS5sZW5ndGggLSAxXVxyXG4gICAgICAgICAgICAuc3BsaXQoJ2RhdGE6IHtcInBhdGhcIjpcIi8nKVxyXG4gICAgICAgICAgICAucG9wKClcclxuICAgICAgICAgICAgLnNwbGl0KGdldERhdGFSZWd1bGFyKVxyXG4gICAgICAgICAgICAuc2hpZnQoKTtcclxuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZSh0aGlzLnByZXBhcmVEYXRhQmVmb3JlSnNvblBhcnNlKHJlc3BvbnNlKSk7XHJcbiAgICAgICAgcmVzdWx0T2JqZWN0W21lc3NhZ2VJZF0gPSBkYXRhO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRPYmplY3Q7XHJcbiAgICB9O1xyXG5cclxuICAgIExvbmdQb2xsUmVzcG9uc2VQYXJzZXIucHJvdG90eXBlLmhhc05ld0RhdGEgPSBmdW5jdGlvbiBoYXNOZXdEYXRhKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgIWhhc051bGxEYXRhLnRlc3QocmVzcG9uc2VbcmVzcG9uc2UubGVuZ3RoIC0gMV0pICYmIHJlc3BvbnNlLmxlbmd0aCA+IDFcclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBMb25nUG9sbFJlc3BvbnNlUGFyc2VyLnByb3RvdHlwZS5wYXJzZVVzZXJMaXN0ID0gZnVuY3Rpb24gcGFyc2VVc2VyTGlzdChcclxuICAgICAgICByZXNwb25zZSxcclxuICAgICAgICBjaGFuZ2VUeXBlXHJcbiAgICApIHtcclxuICAgICAgICB2YXIgZGF0YSA9IHt9O1xyXG4gICAgICAgIHZhciB1c2VySWQ7XHJcbiAgICAgICAgaWYgKGl0SXNGaXJzdFVzZXJMaXN0Q29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICBpdElzRmlyc3RVc2VyTGlzdENvbm5lY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3REYXRhKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0SXNOZXdVc2VyTGlzdFJlZ3VsYXIudGVzdChyZXNwb25zZVtyZXNwb25zZS5sZW5ndGggLSAxXSkpIHtcclxuICAgICAgICAgICAgdXNlcklkID0gdGhpcy5nZXRVc2VySWQocmVzcG9uc2VbcmVzcG9uc2UubGVuZ3RoIC0gMV0sIG51bGwpO1xyXG4gICAgICAgICAgICBkYXRhW3VzZXJJZF0gPSB0aGlzLmdldEZpcnN0RGF0YShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShcclxuICAgICAgICAgICAgcmVzcG9uc2VbcmVzcG9uc2UubGVuZ3RoIC0gMV1cclxuICAgICAgICAgICAgICAgIC5zcGxpdChnZXREYXRhUmVndWxhcilbMV1cclxuICAgICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAgIC5zbGljZSgwLCAtMSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHVzZXJJZCA9IHRoaXMuZ2V0VXNlcklkKHJlc3BvbnNlW3Jlc3BvbnNlLmxlbmd0aCAtIDFdLCBjaGFuZ2VUeXBlKTtcclxuICAgICAgICByZXR1cm4gW3VzZXJJZCwgZGF0YV07XHJcbiAgICB9O1xyXG5cclxuICAgIExvbmdQb2xsUmVzcG9uc2VQYXJzZXIucHJvdG90eXBlLmdldEZpcnN0RGF0YSA9IGZ1bmN0aW9uIGdldEZpcnN0RGF0YShcclxuICAgICAgICByZXNwb25zZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIGpzb25EYXRhO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGpzb25EYXRhID0gSlNPTi5wYXJzZSh0aGlzLnByZXBhcmVEYXRhQmVmb3JlSnNvblBhcnNlKHJlc3BvbnNlKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBqc29uRGF0YTtcclxuICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBMb25nUG9sbFJlc3BvbnNlUGFyc2VyLnByb3RvdHlwZS5nZXRVc2VySWQgPSBmdW5jdGlvbiBnZXRVc2VySWQoXHJcbiAgICAgICAgcmVzcG9uc2UsXHJcbiAgICAgICAgY2hhbmdlVHlwZVxyXG4gICAgKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZVR5cGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoY2hhbmdlVHlwZSlcclxuICAgICAgICAgICAgICAgIC5zaGlmdCgpXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoJ2RhdGE6IHtcInBhdGhcIjpcIi8nKVxyXG4gICAgICAgICAgICAgICAgLnBvcCgpXHJcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KCdkYXRhOiB7XCJwYXRoXCI6XCIvJylcclxuICAgICAgICAgICAgICAgIC5wb3AoKVxyXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiLFwiKVswXVxyXG4gICAgICAgICAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgICAgICAgICAgLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIExvbmdQb2xsUmVzcG9uc2VQYXJzZXIucHJvdG90eXBlLnBhcnNlVXNlcnNTZXR0aW5ncyA9IGZ1bmN0aW9uIHBhcnNlVXNlcnNTZXR0aW5ncyhcclxuICAgICAgICByZXNwb25zZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIGRhdGE7XHJcbiAgICAgICAgaWYgKGl0SXNGaXJzdFVzZXJTZXR0aW5nQ29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICBpdElzRmlyc3RVc2VyU2V0dGluZ0Nvbm5lY3Rpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3REYXRhKHJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoXHJcbiAgICAgICAgICAgIHJlc3BvbnNlW3Jlc3BvbnNlLmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgICAgICAuc3BsaXQoZ2V0RGF0YVJlZ3VsYXIpWzFdXHJcbiAgICAgICAgICAgICAgICAudHJpbSgpXHJcbiAgICAgICAgICAgICAgICAuc2xpY2UoMCwgLTEpXHJcbiAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gW251bGwsIGRhdGFdO1xyXG4gICAgfTtcclxuXHJcbiAgICBMb25nUG9sbFJlc3BvbnNlUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIHBhcnNlKHRleHQpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGV4dC5zcGxpdChldmVudFJlZ3VsYXIpO1xyXG4gICAgICAgIHZhciBjaGFuZ2VUeXBlID0gdGhpcy5nZXRUeXBlT2ZDaGFuZ2VzKHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0pO1xyXG4gICAgICAgIHZhciByZXN1bHRPZlBhcnNlID0geyB0eXBlOiBjaGFuZ2VUeXBlIH07XHJcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV3RGF0YShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGFuZ2VUeXBlID09PSBcIm1lc3NhZ2VcIiB8fCBjaGFuZ2VUeXBlID09PSBcInJlYWRcIikge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0T2ZQYXJzZS5vYmplY3QgPSB0aGlzLnBhcnNlVXNlcnNNZXNzYWdlcyhyZXN1bHQsIGNoYW5nZVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mUGFyc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VUeXBlID09PSBcInNlbmROZXdNZXNzYWdlXCIgfHxcclxuICAgICAgICAgICAgICAgIGNoYW5nZVR5cGUgPT09IFwibGFzdE9ubGluZVwiIHx8XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VUeXBlID09PSBcInVzZXJMaXN0XCJcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHRPZlBhcnNlLm9iamVjdCA9IHRoaXMucGFyc2VVc2VyTGlzdChyZXN1bHQsIGNoYW5nZVR5cGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdE9mUGFyc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhbmdlVHlwZSA9PT0gXCJzZXR0aW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdE9mUGFyc2Uub2JqZWN0ID0gdGhpcy5wYXJzZVVzZXJzU2V0dGluZ3MocmVzdWx0LCBjaGFuZ2VUeXBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRPZlBhcnNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IExvbmdQb2xsUmVzcG9uc2VQYXJzZXIoKTtcclxufSkoKTtcclxuXHJcbi8vIHZpZXdcclxuXHJcbi8qIGV4cG9ydGVkIHZpZXdGYWN0b3J5ICovXHJcbi8qIGdsb2JhbCBnZXRFbGVtZW50ICovXHJcbi8qIGdsb2JhbCBkYXRhU291cmNlICovXHJcbnZhciB2aWV3RmFjdG9yeSA9IChmdW5jdGlvbiBjcmVhdGVWaWV3RmFjdG9yeSAoZGF0YVNvdXJjZSkge1xyXG5cclxuICAgIGZ1bmN0aW9uIFZpZXdGYWN0b3J5ICgpIHt9XHJcblxyXG4gICAgVmlld0ZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZVZpZXcgPSBmdW5jdGlvbiBjcmVhdGVDaGF0VmlldyAoaHRtbFBhdGgsIGNzc1BhdGgsIGNvbnRhaW5lckNsYXNzKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBjcmVhdGVWaWV3UHJvbWlzZSAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmKGh0bWxQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICBpZihjc3NQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pbmNsdWRlVmlld0Nzc1RvUGFnZSh0aGF0LmNyZWF0ZUNTU0xpbmsoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzc1BhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVzaGVldFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcInRleHQvY3NzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG91Y2gtc29mdC1jaGF0LWNzc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRoYXQuaW5jbHVkZVZpZXdIVE1MVG9QYWdlKGh0bWxQYXRoLCBjb250YWluZXJDbGFzcykpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcImh0bWxQYXRoIGlzIG51bGwuIFBsZWFzZSBhZGQgaHRtbFBhdGhcIikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFZpZXdGYWN0b3J5LnByb3RvdHlwZS5pbmNsdWRlVmlld0hUTUxUb1BhZ2UgPSBmdW5jdGlvbiBpbmNsdWRlQ2hhdEhUTUxUb1BhZ2UgKGh0bWxQYXRoLCBjb250YWluZXJDbGFzcykge1xyXG4gICAgICAgIHZhciBjb250YWluZXJEaXYgPSAoY29udGFpbmVyQ2xhc3MpID8gZ2V0RWxlbWVudChjb250YWluZXJDbGFzcykgOiBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIHJldHVybiBkYXRhU291cmNlLmNvbW1vbkFQSS5nZXRIVE1MKGh0bWxQYXRoKS50aGVuKGZ1bmN0aW9uIHNldEh0bWwgKGh0bWwpIHtcclxuICAgICAgICAgICAgY29udGFpbmVyRGl2LmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgfSlcclxuICAgIH07XHJcblxyXG4gICAgVmlld0ZhY3RvcnkucHJvdG90eXBlLmluY2x1ZGVWaWV3Q3NzVG9QYWdlID0gZnVuY3Rpb24gaW5jbHVkZUNoYXRDc3NUb1BhZ2UgKGxpbmspIHtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgfTtcclxuXHJcbiAgICBWaWV3RmFjdG9yeS5wcm90b3R5cGUuY3JlYXRlQ1NTTGluayA9IGZ1bmN0aW9uIGNyZWF0ZUNTU0xpbmsoXHJcbiAgICAgICAgZmlsZVBhdGgsXHJcbiAgICAgICAgcmVsLFxyXG4gICAgICAgIHR5cGUsXHJcbiAgICAgICAgaWRcclxuICAgICkge1xyXG4gICAgICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwiaWRcIiwgaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVsKSB7XHJcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwicmVsXCIsIHJlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKFwidHlwZVwiLCB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGluay5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGZpbGVQYXRoKTtcclxuICAgICAgICByZXR1cm4gbGluaztcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBWaWV3RmFjdG9yeSgpXHJcblxyXG59KShkYXRhU291cmNlKTtcclxuXHJcbi8vIGNoYXQgbWFuYWdlclxyXG5cclxuLyogZ2xvYmFsIGdldEVsZW1lbnQgKi9cclxuLyogZ2xvYmFsIG1haW5Db25maWcgKi9cclxuLyogZXhwb3J0ZWQgbWVzc2FnZUxpc3RNYW5hZ2VyICovXHJcbi8vINCc0L7QtNGD0LvRjCDQtNC70Y8g0YDQsNCx0L7RgtGLINGB0L4g0YHQv9C40YHQutC+0Lwg0YHQvtC+0LHRidC10L3QuNC5INCe0JTQndCe0JPQniDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cclxudmFyIG1lc3NhZ2VMaXN0TWFuYWdlciA9IChmdW5jdGlvbiBzZXR1cE1lc3NhZ2VMaXN0TWFuYWdlciAoY29uZmlnKSB7XHJcbiAgICAvLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8g0KTQvtGA0LzQsNGCICBtZXNzYWdlTGlzdCA9IFtcclxuICAgIC8vICAgIHtcclxuICAgIC8vICAgICAgIHNlbmRlcjogc2VuZGVyXHJcbiAgICAvLyAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgLy8gICAgICAgcmVhZDogdHJ1ZS9mYWxzZVxyXG4gICAgLy8gICAgICAgZGF0ZTogZGF0ZVxyXG4gICAgLy8gICAgfSxcclxuICAgIC8vIF1cclxuICAgIC8vIHJlYWQgLSDQsdGL0LvQviDQu9C4INC/0YDQvtGH0LjRgtCw0L3QviDRgdC+0L7QsdGJ0LXQvdC40LVcclxuICAgIC8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgZnVuY3Rpb24gTWVzc2FnZUxpc3RNYW5hZ2VyKCkge31cclxuXHJcbiAgICBNZXNzYWdlTGlzdE1hbmFnZXIucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gc2V0dXAgKCkge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUxpc3QgPSBbXTtcclxuICAgICAgICB0aGlzLmNET00gPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VzQmxvY2s6IGdldEVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICBjb25maWcubWVzc2FnZXMuQ1NTX0NIQVRfTUVTU0FHRVNfQ09OVEFJTkVSXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9O1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgLy8gV09SSyBXSVRIIE1FU1NBR0UgRUxFTUVOVCAvL1xyXG5cclxuICAgIC8vINCh0L7Qt9C00LDQtdGCIERPTSDRjdC70LXQvNC10L3RgiDRgdC+0L7QsdGJ0LXQvdC40Y8g0LTQu9GPINC+0YLQvtCx0YDQsNC20LXQvdC40Y8g0L3QsCDRjdC60YDQsNC90LVcclxuICAgIE1lc3NhZ2VMaXN0TWFuYWdlci5wcm90b3R5cGUuY3JlYXRlTWVzc2FnZUVsZW1lbnQgPSBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlRWxlbWVudChcclxuICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgIG1lc3NhZ2VEYXRlLFxyXG4gICAgICAgIHNlbmRlcixcclxuICAgICAgICBpc1JlYWRcclxuICAgICkge1xyXG4gICAgICAgIHZhciBtZXNzYWdlQ29udGFpbmVyRGl2ID0gdGhpcy5jcmVhdGVNZXNzYWdlQ29udGFpbmVyRGl2KGlzUmVhZCwgc2VuZGVyKTtcclxuICAgICAgICB2YXIgbWVzc2FnZURhdGVEaXYgPSB0aGlzLmNyZWF0ZURpdkZvck1lc3NhZ2VCbG9jayhcclxuICAgICAgICAgICAgbWVzc2FnZURhdGUsXHJcbiAgICAgICAgICAgIGNvbmZpZy5ESVNQTEFZX01FU1NBR0VfREFURSxcclxuICAgICAgICAgICAgW2NvbmZpZy5tZXNzYWdlcy5DU1NfQ0hBVF9NRVNTQUdFX0RBVEVdXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmFyIG1lc3NhZ2VTZW5kZXJEaXYgPSB0aGlzLmNyZWF0ZURpdkZvck1lc3NhZ2VCbG9jayhcclxuICAgICAgICAgICAgc2VuZGVyLFxyXG4gICAgICAgICAgICBjb25maWcuRElTUExBWV9TRU5ERVJfTkFNRSxcclxuICAgICAgICAgICAgW2NvbmZpZy5tZXNzYWdlcy5DU1NfQ0hBVF9NRVNTQUdFX1NFTkRFUl9OQU1FXVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIHZhciBtZXNzYWdlRGl2ID0gdGhpcy5jcmVhdGVEaXZGb3JNZXNzYWdlQmxvY2soXHJcbiAgICAgICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgICAgIGNvbmZpZy5ESVNQTEFZX01FU1NBR0UsXHJcbiAgICAgICAgICAgIFtjb25maWcubWVzc2FnZXMuQ1NTX0NIQVRfTUVTU0FHRV1cclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBtZXNzYWdlQ29udGFpbmVyRGl2LmFwcGVuZENoaWxkKG1lc3NhZ2VEYXRlRGl2KTtcclxuICAgICAgICBtZXNzYWdlQ29udGFpbmVyRGl2LmFwcGVuZENoaWxkKG1lc3NhZ2VTZW5kZXJEaXYpO1xyXG4gICAgICAgIG1lc3NhZ2VDb250YWluZXJEaXYuYXBwZW5kQ2hpbGQobWVzc2FnZURpdik7XHJcblxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlQ29udGFpbmVyRGl2O1xyXG4gICAgfTtcclxuXHJcbiAgICBNZXNzYWdlTGlzdE1hbmFnZXIucHJvdG90eXBlLmdldE1lc3NhZ2VPYmplY3RzRm9yTWFya0FzUmVhZCA9IGZ1bmN0aW9uICBnZXRNZXNzYWdlT2JqZWN0c0Zvck1hcmtBc1JlYWQgKCkge1xyXG4gICAgICAgIHZhciBpO1xyXG4gICAgICAgIHZhciBtZXNzYWdlc0lzUmVhZCA9IFtdO1xyXG4gICAgICAgIHZhciB1c2VyTmFtZSA9IGNvbmZpZy5BRE1JTl9OQU1FIHx8IGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnVzZXJOYW1lO1xyXG4gICAgICAgIHZhciB1c2VySWQgPSBjb25maWcuY3VycmVudFVzZXJTZXR0aW5ncy51c2VySWQ7XHJcbiAgICAgICAgZm9yKGkgPSB0aGlzLm1lc3NhZ2VMaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgIGlmKHRoaXMubWVzc2FnZUxpc3RbaV0uc2VuZGVyICE9PSB1c2VyTmFtZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgaWYoIXRoaXMubWVzc2FnZUxpc3RbaV0ucmVhZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VzSXNSZWFkLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGROYW1lOiB0aGlzLm1lc3NhZ2VMaXN0W2ldLmlkICsgXCIvcmVhZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRWYWx1ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VMaXN0W2ldLnJlYWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbWVzc2FnZXNJc1JlYWQ7XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgTWVzc2FnZUxpc3RNYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVNZXNzYWdlQ29udGFpbmVyRGl2ID0gZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUNvbnRhaW5lckRpdiAoaXNSZWFkLCBzZW5kZXIpIHtcclxuICAgICAgICB2YXIgbWVzc2FnZUNvbnRhaW5lckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgbWVzc2FnZUNvbnRhaW5lckRpdi5jbGFzc0xpc3QuYWRkKGNvbmZpZy5tZXNzYWdlcy5DU1NfTUVTU0FHRV9DT05UQUlORVIpO1xyXG4gICAgICAgIGlmICghaXNSZWFkICYmIGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnVzZXJOYW1lICE9PSBzZW5kZXIpIHtcclxuICAgICAgICAgICAgbWVzc2FnZUNvbnRhaW5lckRpdi5jbGFzc0xpc3QuYWRkKGNvbmZpZy5tZXNzYWdlcy5DU1NfVVNFUl9OT1RfUkVBRF9NRVNTQUdFUyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtZXNzYWdlQ29udGFpbmVyRGl2O1xyXG4gICAgfTtcclxuXHJcbiAgICBNZXNzYWdlTGlzdE1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZURpdkZvck1lc3NhZ2VCbG9jayA9IGZ1bmN0aW9uIGNyZWF0ZURpdkZvck1lc3NhZ2VCbG9jayAodGV4dCwgaXNEaXNwbGF5LCBzdHlsZUNsYXNzZXMpIHtcclxuICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBzdHlsZUNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiBjbGFzc0FkZCAoc3R5bGUpIHtcclxuICAgICAgICAgICAgZGl2LmNsYXNzTGlzdC5hZGQoc3R5bGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRpdi5pbm5lckhUTUwgPSB0ZXh0O1xyXG4gICAgICAgIHJldHVybiBkaXY7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFdPUksgV0lUSCBNRVNTQUdFIEVMRU1FTlQgLy9cclxuXHJcbiAgICBNZXNzYWdlTGlzdE1hbmFnZXIucHJvdG90eXBlLmNyZWF0ZU1lc3NhZ2VMaXN0ID0gZnVuY3Rpb24gY3JlYXRlTWVzc2FnZUxpc3QgKG1lc3NhZ2VPYmplY3RzKSAge1xyXG4gICAgICAgIHZhciBuZXdNZXNzYWdlTGlzdCA9IFtdO1xyXG4gICAgICAgIGlmKG1lc3NhZ2VPYmplY3RzKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VPYmplY3RzLmZvckVhY2goZnVuY3Rpb24gYWRkRWxlbWVudFRvTWVzc2FnZUxpc3QgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2VMaXN0LnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3TWVzc2FnZUxpc3Q7XHJcbiAgICB9O1xyXG5cclxuICAgIE1lc3NhZ2VMaXN0TWFuYWdlci5wcm90b3R5cGUudXBkYXRlTWVzc2FnZUxpc3QgPSBmdW5jdGlvbiB1cGRhdGVNZXNzYWdlTGlzdCAobmV3TWVzc2FnZUxpc3QpIHtcclxuICAgICAgICBpZih0aGlzLmdldE1lc3NhZ2VPYmplY3RzRm9yTWFya0FzUmVhZCgpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MucmVhZExhc3RNZXNzYWdlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWVzc2FnZUxpc3QgPSBuZXdNZXNzYWdlTGlzdDtcclxuICAgICAgICB0aGlzLmRpc3BsYXlNZXNzYWdlcygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBNZXNzYWdlTGlzdE1hbmFnZXIucHJvdG90eXBlLmFkZE1lc3NhZ2VUb01lc3NhZ2VMaXN0ID0gZnVuY3Rpb24gYWRkTWVzc2FnZVRvTWVzc2FnZUxpc3QgKFxyXG4gICAgICAgIG1lc3NhZ2VPYmpcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUxpc3QucHVzaChtZXNzYWdlT2JqKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g0J/QtdGA0LXQsdC40YDQsNC10YIg0YHQv9C40YHQvtC6INGB0L7QvtCx0YnQtdC90LjQuSwg0YHQvtC30LTQsNC10YIg0YHQvtC+0YLQstC10YLRgdCy0YPRjtGJ0LjQtSDQuNC8IERPTSDRjdC70LXQvNC10L3RgtGLINC4INCy0YHRgtCw0LLQu9GP0LXRgiDQuNGFINCyINGH0LDRglxyXG4gICAgTWVzc2FnZUxpc3RNYW5hZ2VyLnByb3RvdHlwZS5kaXNwbGF5TWVzc2FnZXMgPSBmdW5jdGlvbiBkaXNwbGF5TWVzc2FnZXMoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHZhciBlbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY2xlYXJDaGF0KCk7XHJcbiAgICAgICAgdGhpcy5tZXNzYWdlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2UgKG1lc3NhZ2VPYmplY3QpIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IHRoYXQuY3JlYXRlTWVzc2FnZUVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0Lm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LmRhdGUsXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlT2JqZWN0LnNlbmRlcixcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VPYmplY3QucmVhZFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGF0LmNET00ubWVzc2FnZXNCbG9jay5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g0J7Rh9C40YHRgtC40YLRjCBET00g0Y3Qu9C10LzQtdC90YIg0LIg0LrQvtGC0L7RgNC+0Lwg0L7RgtC+0LHRgNCw0LbQsNGO0YLRgdGPINGB0L7QvtCx0YnQtdC90LjRjyAo0L3QsNC/0YDQuNC80LXRgCDRh9GC0L7QsdGLINCy0YHRgtCw0LLQuNGC0Ywg0L3QstC+0YvQuSDRgdC/0LjRgdC+0Log0YHQvtC+0LHRidC10L3QuNC5KVxyXG4gICAgTWVzc2FnZUxpc3RNYW5hZ2VyLnByb3RvdHlwZS5jbGVhckNoYXQgPSBmdW5jdGlvbiBjbGVhckNoYXQoKSB7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuY0RPTS5tZXNzYWdlc0Jsb2NrLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgdGhpcy5jRE9NLm1lc3NhZ2VzQmxvY2sucmVtb3ZlQ2hpbGQodGhpcy5jRE9NLm1lc3NhZ2VzQmxvY2suZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2VMaXN0TWFuYWdlcigpO1xyXG5cclxufSkobWFpbkNvbmZpZyk7XHJcbi8qIGV4cG9ydGVkIHVzZXJEYXRhTWFuYWdlciAqL1xyXG4vKiBnbG9iYWwgZGF0YVNvdXJjZSAqL1xyXG4vKiBnbG9iYWwgbWVzc2FnZUxpc3RNYW5hZ2VyICovXHJcbi8qIGdsb2JhbCBjcmVhdGVNZXNzYWdlT2JqZWN0ICovXHJcbi8qIGdsb2JhbCBnZXRDdXJyZW50RGF0ZSAqL1xyXG4vKiBnbG9iYWwgZ2V0RWxlbWVudCAqL1xyXG4vKiBnbG9iYWwgZXZlbnRFbWl0dGVyICovXHJcbi8qIGdsb2JhbCBtYWluQ29uZmlnICovXHJcbnZhciB1c2VyRGF0YU1hbmFnZXIgPSAgKGZ1bmN0aW9uIGNyZWF0ZVVzZXJEYXRhTWFuYWdlciAoY29uZmlnLCBldmVudEVtaXR0ZXIsIGxvbmdQb2xsUmVzcG9uc2VQYXJzZXIpIHtcclxuICAgIGZ1bmN0aW9uIFVzZXJEYXRhTWFuYWdlciAoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGlmKGNvbmZpZy5jaGF0U2V0dGluZ3MudHlwZU9mUmVxdWVzdCA9PT0gXCJsb25nUG9sbFwiKSB7XHJcbiAgICAgICAgICAgIFVzZXJEYXRhTWFuYWdlci5wcm90b3R5cGUuZ2V0VXNlckRhdGEgPSBnZXRVc2VyRGF0YUZyb21Mb25nUG9sbENvbm5lY3Rpb24uYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgVXNlckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5nZXRVc2VyQ29ycmVzcG9uZGVuY2UgPSBnZXRVc2VyQ29ycmVzcG9uZGVuY2VGcm9tTG9uZ1BvbGxDb25uZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIFVzZXJEYXRhTWFuYWdlci5wcm90b3R5cGUudXBkYXRlTWVzc2FnZUxpc3QgPSB1cGRhdGVNZXNzYWdlTGlzdEFmdGVyTG9uZ1BvbGwuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmFkZFN1YnNjcmliZShcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlTWVzc2FnZUxpc3QoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBldmVudEVtaXR0ZXIuYWRkU3Vic2NyaWJlKFwicmVhZFwiLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci5tZXNzYWdlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1lc3NhZ2UuaWQgPSBkYXRhLmlkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVhZCA9IGRhdGEudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGlzdE1hbmFnZXIuZGlzcGxheU1lc3NhZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLmdldFVzZXJEYXRhID0gZ2V0VXNlckRhdGFCYXNpYy5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLmdldFVzZXJDb3JyZXNwb25kZW5jZSA9IGdldFVzZXJDb3JyZXNwb25kZW5jZUJhc2ljLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIFVzZXJEYXRhTWFuYWdlci5wcm90b3R5cGUudXBkYXRlTWVzc2FnZUxpc3QgPSB1cGRhdGVNZXNzYWdlTGlzdEJhc2ljLmJpbmQodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIElOQ0xVREVcclxuXHJcbiAgICAvKiBleHBvcnRlZCBnZXRDdXJyZW50RGF0ZSAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudERhdGUoKSB7XHJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHZhciBtaW51dGVzID0gKGRhdGUuZ2V0TWludXRlcygpLnRvU3RyaW5nKCkubGVuZ3RoID09PSAxKSA/IFwiMFwiICsgZGF0ZS5nZXRNaW51dGVzKCkgOiBkYXRlLmdldE1pbnV0ZXMoKTtcclxuICAgICAgICByZXR1cm4gZGF0ZVxyXG4gICAgICAgICAgICAuZ2V0SG91cnMoKVxyXG4gICAgICAgICAgICAudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAuY29uY2F0KFwiOlwiLCBtaW51dGVzKTtcclxuICAgIH1cclxuICAgIC8qIGV4cG9ydGVkIGNyZWF0ZU1lc3NhZ2VPYmplY3QgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2VPYmplY3QgKFxyXG4gICAgICAgIG1lc3NhZ2UsXHJcbiAgICAgICAgZGF0ZSxcclxuICAgICAgICBzZW5kZXIsXHJcbiAgICAgICAgaXNSZWFkLFxyXG4gICAgICAgIGlkXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZW5kZXI6IHNlbmRlcixcclxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZSxcclxuICAgICAgICAgICAgcmVhZDogaXNSZWFkLFxyXG4gICAgICAgICAgICBkYXRlOiBkYXRlLFxyXG4gICAgICAgICAgICBpZDogaWRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElOQ0xVREVcclxuXHJcbiAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLnNldHVwID0gZnVuY3Rpb24gc2V0dXAgKCkge1xyXG4gICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci5zZXR1cCgpO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gYmFzaWNcclxuICAgIGZ1bmN0aW9uIGdldFVzZXJEYXRhQmFzaWMgKHVzZXJJZCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoYXQuZ2V0VXNlckNvcnJlc3BvbmRlbmNlKHVzZXJJZCkudGhlbiggZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKVxyXG4gICAgICAgICAgICAgLy8gICB9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHVwZGF0ZU1lc3NhZ2VMaXN0QmFzaWMgKGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIG5ld01lc3NhZ2VMaXN0O1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZXNPYmplY3QgPSBbXTtcclxuICAgICAgICAgICAgaWYoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW2tleV0uaWQgPSBrZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNPYmplY3QucHVzaChkYXRhW2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbWVzc2FnZUxpc3RNYW5hZ2VyLmRpc3BsYXlNZXNzYWdlcygpO1xyXG4gICAgICAgICAgICBuZXdNZXNzYWdlTGlzdCA9IG1lc3NhZ2VMaXN0TWFuYWdlci5jcmVhdGVNZXNzYWdlTGlzdChtZXNzYWdlc09iamVjdCk7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci51cGRhdGVNZXNzYWdlTGlzdChuZXdNZXNzYWdlTGlzdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZ2V0VXNlckNvcnJlc3BvbmRlbmNlQmFzaWMgKHVzZXJJZCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICByZXR1cm4gZGF0YVNvdXJjZS51c2Vyc0FQSS5nZXRVc2VyTWVzc2FnZXModXNlcklkKSgpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgdGhhdC51cGRhdGVNZXNzYWdlTGlzdChkYXRhKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBnZXRVc2VyRGF0YUZyb21Mb25nUG9sbENvbm5lY3Rpb24odXNlcklkKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XHJcbiAgICAgICAgICAgIHRoYXQuZ2V0VXNlckNvcnJlc3BvbmRlbmNlKHVzZXJJZCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRVc2VyQ29ycmVzcG9uZGVuY2VGcm9tTG9uZ1BvbGxDb25uZWN0aW9uKHVzZXJJZCkge1xyXG4gICAgICAgIHZhciBkYXRhO1xyXG4gICAgICAgIGlmKGNvbmZpZy5jdXJyZW50TWVzc2FnZUNvbm5lY3Rpb24pIHtcclxuICAgICAgICAgICAgY29uZmlnLmN1cnJlbnRNZXNzYWdlQ29ubmVjdGlvbi5hYm9ydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25maWcuY3VycmVudE1lc3NhZ2VDb25uZWN0aW9uID0gZGF0YVNvdXJjZS51c2Vyc0FQSS5nZXRVc2VyTWVzc2FnZXModXNlcklkKTtcclxuICAgICAgICBjb25maWcuY3VycmVudE1lc3NhZ2VDb25uZWN0aW9uLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PSAzICYmIHRoaXMuc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGxvbmdQb2xsUmVzcG9uc2VQYXJzZXIucGFyc2UodGhpcy5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZW1pdChkYXRhLnR5cGUsIGRhdGEub2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uZmlnLmN1cnJlbnRNZXNzYWdlQ29ubmVjdGlvbi5zZW5kKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlTWVzc2FnZUxpc3RBZnRlckxvbmdQb2xsIChkYXRhKSB7XHJcbiAgICAgICAgaWYoZGF0YSkge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVtrZXldLmlkID0ga2V5O1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZUxpc3RNYW5hZ2VyLmFkZE1lc3NhZ2VUb01lc3NhZ2VMaXN0KGRhdGFba2V5XSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci5kaXNwbGF5TWVzc2FnZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLmNsZWFyTWVzc2FnZUxpc3QgPSBmdW5jdGlvbiBjbGVhck1lc3NhZ2VMaXN0ICgpIHtcclxuICAgICAgICBtZXNzYWdlTGlzdE1hbmFnZXIubWVzc2FnZUxpc3QgPSBbXTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVOZXdVc2VyUHJvZmlsZVRvRGF0YUJhc2UgPSBmdW5jdGlvbiBjcmVhdGVOZXdVc2VyUHJvZmlsZVRvRGF0YUJhc2UgKHVzZXJJZCwgdXNlck5hbWUpIHtcclxuICAgICAgICBkYXRhU291cmNlLnVzZXJzQVBJLmFkZE5ld1VzZXJUb0RhdGFTb3VyY2UodXNlcklkLCB1c2VyTmFtZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFVzZXJEYXRhTWFuYWdlci5wcm90b3R5cGUuc2F2ZVNldHRpbmdGaWVsZCA9IGZ1bmN0aW9uIHNldEZpZWxkIChmaWVsZE5hbWUpIHtcclxuICAgICAgICBkYXRhU291cmNlLnVzZXJzQVBJLnNldFNldHRpbmdGaWVsZChcclxuICAgICAgICAgICAgZmllbGROYW1lLFxyXG4gICAgICAgICAgICBjb25maWcuY3VycmVudFVzZXJTZXR0aW5ncy51c2VySWQsXHJcbiAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzW2ZpZWxkTmFtZV1cclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVVzZXJPbmxpbmUgPSBmdW5jdGlvbiB1cGRhdGVVc2VyT25saW5lICh1c2VySWQpIHtcclxuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlO1xyXG4gICAgICAgIGRhdGFTb3VyY2UudXNlcnNBUEkudXBkYXRlTGFzdE9ubGluZSh1c2VySWQsIGRhdGUuZ2V0VGltZSgpKVxyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyRGF0YU1hbmFnZXIucHJvdG90eXBlLnNlbmRNZXNzYWdlID0gZnVuY3Rpb24gc2VuZE1lc3NhZ2UgKHNlbmRlck5hbWUpIHtcclxuICAgICAgICB2YXIgbWVzc2FnZSA9IHRoaXMuZ2V0TWVzc2FnZUZyb21JbnB1dEVsZW1lbnQoKTtcclxuICAgICAgICB2YXIgZGF0ZSA9IGdldEN1cnJlbnREYXRlKCk7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VPYmplY3QgPSBjcmVhdGVNZXNzYWdlT2JqZWN0KG1lc3NhZ2UsIGRhdGUsIHNlbmRlck5hbWUsIGZhbHNlKTtcclxuICAgICAgICBpZihjb25maWcuY2hhdFNldHRpbmdzLnR5cGVPZlJlcXVlc3QgIT09IFwibG9uZ1BvbGxcIikge1xyXG4gICAgICAgICAgICBtZXNzYWdlTGlzdE1hbmFnZXIuYWRkTWVzc2FnZVRvTWVzc2FnZUxpc3QobWVzc2FnZU9iamVjdCk7XHJcbiAgICAgICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci5kaXNwbGF5TWVzc2FnZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zYXZlTWVzc2FnZVRvRGF0YVNvdXJjZShtZXNzYWdlT2JqZWN0KTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5nZXRNZXNzYWdlRnJvbUlucHV0RWxlbWVudCA9IGZ1bmN0aW9uIGdldE1lc3NhZ2VGcm9tSW5wdXRFbGVtZW50ICgpIHtcclxuICAgICAgICB2YXIgZWxlbWVudCA9IGdldEVsZW1lbnQoY29uZmlnLkNTU19DVVJSRU5UX0lOUFVUX0NMQVNTKTtcclxuICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbHVlO1xyXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5zZXRNZXNzYWdlQXNSZWFkID0gZnVuY3Rpb24gc2V0TWVzc2FnZUFzUmVhZCAoKSB7XHJcbiAgICAgICAgdmFyIG1lc3NhZ2VPYmplY3RzID0gbWVzc2FnZUxpc3RNYW5hZ2VyLmdldE1lc3NhZ2VPYmplY3RzRm9yTWFya0FzUmVhZCgpO1xyXG4gICAgICAgIGlmKG1lc3NhZ2VPYmplY3RzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZU9iamVjdHMpO1xyXG4gICAgICAgICAgICBtZXNzYWdlT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIHNldFJlYWQgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGFTb3VyY2UudXNlcnNBUEkudXBkYXRlTWVzc2FnZUlzUmVhZEZpZWxkKFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmllbGROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudXNlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmllbGRWYWx1ZVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnJlYWRMYXN0TWVzc2FnZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG1lc3NhZ2VMaXN0TWFuYWdlci5kaXNwbGF5TWVzc2FnZXMoKTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlckRhdGFNYW5hZ2VyLnByb3RvdHlwZS5zYXZlTWVzc2FnZVRvRGF0YVNvdXJjZSA9IGZ1bmN0aW9uIHNhdmVNZXNzYWdlVG9EYXRhU291cmNlIChtZXNzYWdlT2JqZWN0KSB7XHJcbiAgICAgICAgaWYobWVzc2FnZU9iamVjdC5zZW5kZXIgPT09IGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnVzZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2UudXNlcnNBUEkudXBkYXRlU2VuZE5ld01lc3NhZ2VGbGFnKGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnVzZXJJZCx0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGF0YVNvdXJjZS51c2Vyc0FQSS5zZW5kTWVzc2FnZShcclxuICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MudXNlcklkLFxyXG4gICAgICAgICAgICBtZXNzYWdlT2JqZWN0XHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gU2V0dGluZ3MgPSBbe3VzZXJJZCwgZmllbGROYW1lLCBmaWVsZFZhbHVlfSx7fS4uLl1cclxuICAgIFVzZXJEYXRhTWFuYWdlci5wcm90b3R5cGUuc2F2ZVVzZXJTZXR0aW5nc1RvRGF0YVNvdXJjZSA9IGZ1bmN0aW9uIHNhdmVVc2VyU2V0dGluZ3NUb0RhdGFTb3VyY2UgKHNldHRpbmdzKSB7XHJcbiAgICAgICAgc2V0dGluZ3MuZm9yRWFjaChmdW5jdGlvbiBzYXZlU2V0dGluZyAobmV3RmllbGRTZXR0aW5nKSB7XHJcbiAgICAgICAgICAgIGRhdGFTb3VyY2UudXNlcnNBUEkuc2V0U2V0dGluZ0ZpZWxkKFxyXG4gICAgICAgICAgICAgICAgbmV3RmllbGRTZXR0aW5nLmZpZWxkTmFtZSxcclxuICAgICAgICAgICAgICAgIG5ld0ZpZWxkU2V0dGluZy51c2VySWQsXHJcbiAgICAgICAgICAgICAgICBuZXdGaWVsZFNldHRpbmcuZmllbGRWYWx1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgcmV0dXJuIG5ldyBVc2VyRGF0YU1hbmFnZXIoKTtcclxuXHJcbn0pKG1haW5Db25maWcsIGV2ZW50RW1pdHRlciwgbG9uZ1BvbGxSZXNwb25zZVBhcnNlcik7XHJcblxyXG4vLyBkYXNoYm9hcmRcclxuXHJcbi8qIGV4cG9ydGVkIHVzZXJMaXN0TWFuYWdlciAqL1xyXG4vKiBnbG9iYWwgY2xlYXJFbGVtZW50Q29udGVudCAqL1xyXG4vKiBnbG9iYWwgZ2V0RWxlbWVudCAqL1xyXG4vKiBnbG9iYWwgbWFpbkNvbmZpZyAqL1xyXG4vKiBnbG9iYWwgc29ydGVyICovXHJcbnZhciB1c2VyTGlzdE1hbmFnZXIgPSAoZnVuY3Rpb24gY3JlYXRlVXNlckxpc3QgKGNvbmZpZywgc29ydGVyKSB7XHJcbiAgICAvLyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvKiDQpNC+0YDQvNCw0YIg0L7QsdGK0LXQutGC0LAg0LIg0YHQv9C40YHQutC1INGO0LfQtdGA0LBcclxuICAgICAgKiB1c2VySWQ6IFwiSXZhbjMwMDAwMFwiLFxyXG4gICAgICAqIHVzZXJFbGVtZW50OiBVc2VyTGlzdE1hbmFnZXIuY3JlYXRlVXNlckVsZW1lbnQodXNlcklkLCB1c2VySXNPbmxpbmUpLFxyXG4gICAgICAqIG9ubGluZTogdXNlcklzT25saW5lLFxyXG4gICAgICAqIHZpc2libGU6IHRydWUsXHJcbiAgICAgICogc2VuZE5ld01lc3NhZ2U6IHVzZXJTZXR0aW5ncy5zZW5kTmV3TWVzc2FnZSxcclxuICAgICAgKiByZWFkTGFzdE1lc3NhZ2U6IHVzZXJTZXR0aW5ncy5yZWFkTGFzdE1lc3NhZ2UsXHJcbiAgICAgICogbGFzdE9ubGluZTogdXNlclNldHRpbmdzLmxhc3RPbmxpbmUsXHJcbiAgICAgICogaXNNaW5pbWl6ZTogdXNlclNldHRpbmdzLmlzTWluaW1pemUsXHJcbiAgICAgICogdXNlck5hbWU6IHVzZXJTZXR0aW5ncy51c2VyTmFtZVxyXG4gICAgICAqXHJcbiAgICAgICogdmlzaWJsZSAtINC+0YLQvtCx0YDQsNC20LDRgtGMINC70Lgg0Y7Qt9C10YDQsCDQvdCwINGB0YLRgNCw0L3QuNGG0LVcclxuICAgICAgKi9cclxuICAgIC8vICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIGZ1bmN0aW9uIFVzZXJMaXN0TWFuYWdlcigpIHtcclxuICAgICAgICB0aGlzLnVMaXN0ID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgVXNlckxpc3RNYW5hZ2VyLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uIHNldHVwICgpIHt9O1xyXG5cclxuICAgIC8vINCh0L7Qt9C00LDQtdGCIERPTSDQtdC70LXQvNC10L3RgiDQtNC70Y8g0L7RgtC+0LHRgNCw0LbQtdC90LjRjyDRjtC30LXRgNCwINCyINGB0L/QuNGB0LrQtVxyXG4gICAgVXNlckxpc3RNYW5hZ2VyLnByb3RvdHlwZS5jcmVhdGVVc2VyRWxlbWVudCA9IGZ1bmN0aW9uIGNyZWF0ZVVzZXJFbGVtZW50KFxyXG4gICAgICAgIHVzZXJJZCxcclxuICAgICAgICBpc09ubGluZVxyXG4gICAgKSB7XHJcbiAgICAgICAgdmFyIHVzZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHZhciB1c2VySWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHZhciB1c2VySW5kaWNhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHJcbiAgICAgICAgdXNlckRpdi5jbGFzc0xpc3QuYWRkKGNvbmZpZy51c2VyTGlzdC5VU0VSX0VMRU1FTlRfQ1NTX0NMQVNTKTtcclxuXHJcbiAgICAgICAgdXNlcklkRGl2LmNsYXNzTGlzdC5hZGQoY29uZmlnLnVzZXJMaXN0LlVTRVJfSURfRUxFTUVOVF9DU1NfQ0xBU1MpO1xyXG4gICAgICAgIHVzZXJJZERpdi5pbm5lckhUTUwgPSB1c2VySWQ7XHJcblxyXG4gICAgICAgIGlmIChpc09ubGluZSkge1xyXG4gICAgICAgICAgICB1c2VySW5kaWNhdG9yLmNsYXNzTGlzdC5hZGQoY29uZmlnLnVzZXJMaXN0LlVTRVJfSU5ESUNBVE9SX0NTU19DTEFTU19PTkxJTkUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHVzZXJJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZChjb25maWcudXNlckxpc3QuVVNFUl9JTkRJQ0FUT1JfQ1NTX0NMQVNTX09GRkxJTkUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXNlckRpdi5hcHBlbmRDaGlsZCh1c2VySWREaXYpO1xyXG4gICAgICAgIHVzZXJEaXYuYXBwZW5kQ2hpbGQodXNlckluZGljYXRvcik7XHJcblxyXG4gICAgICAgIHJldHVybiB1c2VyRGl2O1xyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyTGlzdE1hbmFnZXIucHJvdG90eXBlLnNldFVzZXJMaXN0ID0gZnVuY3Rpb24gc2V0VXNlckxpc3QgKHVzZXJMdXN0T2JqZWN0KSB7XHJcbiAgICAgICAgdGhpcy51TGlzdCA9IHVzZXJMdXN0T2JqZWN0O1xyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyTGlzdE1hbmFnZXIucHJvdG90eXBlLmFkZFVzZXJUb1VzZXJzQXJyYXkgPSBmdW5jdGlvbiBhZGRVc2VyVG9Vc2Vyc0xpc3QoXHJcbiAgICAgICAgdXNlcixcclxuICAgICAgICB1c2VySWQsXHJcbiAgICAgICAgdXNlcnNMaXN0XHJcbiAgICApIHtcclxuICAgICAgICB2YXIgdXNlcklzT25saW5lID0gdGhpcy51c2VySXNPbmxpbmUodXNlci5sYXN0T25saW5lKTtcclxuICAgICAgICB1c2Vyc0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxyXG4gICAgICAgICAgICB1c2VyRWxlbWVudDogdGhpcy5jcmVhdGVVc2VyRWxlbWVudCh1c2VySWQsIHVzZXJJc09ubGluZSksXHJcbiAgICAgICAgICAgIG9ubGluZTogdXNlcklzT25saW5lLFxyXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBzZW5kTmV3TWVzc2FnZTogdXNlci5zZW5kTmV3TWVzc2FnZSxcclxuICAgICAgICAgICAgcmVhZExhc3RNZXNzYWdlOiB1c2VyLnJlYWRMYXN0TWVzc2FnZSxcclxuICAgICAgICAgICAgbGFzdE9ubGluZTogdXNlci5sYXN0T25saW5lLFxyXG4gICAgICAgICAgICB1c2VyTmFtZTogdXNlci51c2VyTmFtZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBVc2VyTGlzdE1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZVVzZXJPbmxpbmVTdGF0dXMgPSBmdW5jdGlvbiB1cGRhdGVVc2VyVmlldyAodXNlcklkLCBsYXN0T25saW5lKSB7XHJcbiAgICAgICAgdmFyIHVzZXJJbmRleCA9IHRoaXMuZ2V0VXNlckZyb21Vc2VyTGlzdEJ5SWQodXNlcklkKTtcclxuICAgICAgICB0aGlzLnVMaXN0W3VzZXJJbmRleF0ubGFzdE9ubGluZSA9IGxhc3RPbmxpbmU7XHJcbiAgICAgICAgdGhpcy51TGlzdFt1c2VySW5kZXhdLm9ubGluZSA9IHRoaXMudXNlcklzT25saW5lKGxhc3RPbmxpbmUpO1xyXG4gICAgICAgIHRoaXMudUxpc3RbdXNlckluZGV4XS51c2VyRWxlbWVudCA9IHRoaXMuY3JlYXRlVXNlckVsZW1lbnQoXHJcbiAgICAgICAgICAgIHVzZXJJZCxcclxuICAgICAgICAgICAgdGhpcy51c2VySXNPbmxpbmUobGFzdE9ubGluZSlcclxuICAgICAgICApO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgLy8g0JLQvtC30LLRgNCw0YnQsNC10YIgaW5kZXgg0Y7Qt9C10YDQsCDQsiDRgdC/0LjRgdC60LUg0Y7Qt9C10YDQsCDQtdGB0LvQuCDQvtC9INGC0LDQvCDQvdCw0YXQvtC00LjRgtGB0Y8uINCSINC/0YDQvtGC0LjQstC90L4g0YHQu9GD0YfQsNC1INCy0L7Qt9Cy0YDQsNGJ0LDQtdGCIG51bGxcclxuICAgIFVzZXJMaXN0TWFuYWdlci5wcm90b3R5cGUuZ2V0VXNlckZyb21Vc2VyTGlzdEJ5SWQgPSBmdW5jdGlvbiBnZXRVc2VyRnJvbVVzZXJMaXN0QnlJZCh1c2VySWQpIHtcclxuICAgICAgICB2YXIgdXNlck1hbmFnZXIgPSB0aGlzO1xyXG4gICAgICAgIHZhciB1c2VySW5kZXggPSBudWxsO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHVzZXJNYW5hZ2VyLnVMaXN0KS5tYXAoZnVuY3Rpb24gZ2V0S2V5IChrZXkpIHtcclxuICAgICAgICAgICAgaWYgKHVzZXJNYW5hZ2VyLnVMaXN0W2tleV0udXNlcklkID09PSB1c2VySWQpIHtcclxuICAgICAgICAgICAgICAgIHVzZXJJbmRleCA9IGtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdXNlckluZGV4O1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8g0J7Qv9GA0LXQtNC10LvRj9C10YIg0L7QvdC70LDQudC9INGO0LfQtdGA0LAg0L3QsNGF0L7QtNGPINGA0LDQt9C90LjRhtGDINC80LXQttC00YMg0LTQsNGC0L7QuSDQv9C+0YHQu9C10LTQvdC10LPQviDQutC+0L3QtdC60YLQsCDRjtC30LXRgNCwINGBINCx0LQg0Lgg0YLQtdC60YPRidC40Lwg0LLRgNC10LzQtdC90LXQvFxyXG4gICAgLy8g0LLQvtC30LLRgNCw0YnQsNC10YIgdHJ1ZSDQtdGB0LvQuCDRjtC30LXRgCDQvtC90LvQsNC50L0sIGZhbHNlIC0g0L7RhNGE0LvQsNC50L1cclxuICAgIFVzZXJMaXN0TWFuYWdlci5wcm90b3R5cGUudXNlcklzT25saW5lID0gZnVuY3Rpb24gdXNlcklzT25saW5lIChsYXN0VXNlck9ubGluZVRpbWUpIHtcclxuICAgICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIC0gbGFzdFVzZXJPbmxpbmVUaW1lIDw9IGNvbmZpZy5pbnRlcnZhbC5PTkxJTkVfSU5URVJWQUw7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vINCU0LXQu9Cw0LXRgiDQvdC10LLQuNC00LjQvNGL0LzQuCDRgtC10YUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10Lkg0LIg0YHQv9C40YHQutC1LCDQsiDQuNC80LXQvdCw0YUg0LrQvtGC0L7RgNGL0YUg0L3QtdGCINC/0LXRgNC10LTQsNC90L3QvtC5INC/0L7QtNGB0YLRgNC+0LrQuFxyXG4gICAgVXNlckxpc3RNYW5hZ2VyLnByb3RvdHlwZS5maWx0ZXJCeU5hbWUgPSBmdW5jdGlvbiBmaWx0ZXJCeU5hbWUoKSB7XHJcbiAgICAgICAgdGhpcy51TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIGZpbHRlck5hbWUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC52aXNpYmxlID0gZWxlbWVudC51c2VySWQuaW5kZXhPZihjb25maWcuY3VycmVudERhc2hib2FyZENvbmRpdGlvbi5maWx0ZXJCeSkgIT09IC0xO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyDQodC+0YDRgtC40YDRg9C10YIg0YHQv9C40YHQvtC6INGO0LfQtdGA0L7QsiDQv9C+INC/0L7Qu9GOXHJcbiAgICBVc2VyTGlzdE1hbmFnZXIucHJvdG90eXBlLnNvcnRVc2Vyc0J5RmllbGQgPSBmdW5jdGlvbiBzb3J0VXNlcnNCeU9ubGluZSgpIHtcclxuICAgICAgICBzb3J0ZXIucXVpY2tTb3J0KHRoaXMudUxpc3QsIDAsIHRoaXMudUxpc3QubGVuZ3RoIC0gMSwgY29uZmlnLmN1cnJlbnREYXNoYm9hcmRDb25kaXRpb24uc29ydEJ5KTtcclxuICAgIH07XHJcblxyXG4gICAgVXNlckxpc3RNYW5hZ2VyLnByb3RvdHlwZS5jbGVhclVzZXJMaXN0ID0gZnVuY3Rpb24gY2xlYXJVc2VyTGlzdCAoKSB7XHJcbiAgICAgICAgdGhpcy51TGlzdCA9IFtdO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyDQntGC0L7QsdGA0LDQt9C40YLRjC8g0J7QsdC90L7QstC40YLRjCDQv9GA0LXQtNGB0YLQsNCy0LvQtdC90LjQtSDRjtC30LXRgNC+0LIg0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgICBVc2VyTGlzdE1hbmFnZXIucHJvdG90eXBlLmRpc3BsYXlVc2VycyA9IGZ1bmN0aW9uIGRpc3BsYXlVc2VycygpIHtcclxuICAgICAgICBjbGVhckVsZW1lbnRDb250ZW50KGNvbmZpZy5ET00uVVNFUl9MSVNUX0NTU19DTEFTUyk7XHJcbiAgICAgICAgdGhpcy51TGlzdC5mb3JFYWNoKGZ1bmN0aW9uIGdldEVsZW0gKGVsZW0pIHtcclxuICAgICAgICAgICAgaWYgKGVsZW0udmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudChjb25maWcuRE9NLlVTRVJfTElTVF9DU1NfQ0xBU1MpLmFwcGVuZENoaWxkKGVsZW0udXNlckVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgLy8gaW5jbHVkZVxyXG5cclxuICAgIC8qIGV4cG9ydGVkIGNsZWFyRWxlbWVudENvbnRlbnQgKi9cclxuICAgIC8qIGdsb2JhbCBnZXRFbGVtZW50ICovXHJcbiAgICAvLyDQntGH0LjRidCw0LXRgiBET00g0YHQvtC00LXRgNC20LDRidC40Lkg0Y3Qu9C10LzQtdC90YLRiyDRgdC/0LjRgdC60LAg0Y7Qt9C10YDQvtCyXHJcbiAgICBmdW5jdGlvbiBjbGVhckVsZW1lbnRDb250ZW50KGVsZW1lbnRTZWxlY3Rvcikge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZ2V0RWxlbWVudChlbGVtZW50U2VsZWN0b3IpO1xyXG4gICAgICAgIHdoaWxlIChlbGVtZW50LmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFVzZXJMaXN0TWFuYWdlcigpXHJcblxyXG59KShtYWluQ29uZmlnLCBzb3J0ZXIpO1xyXG4vKiBleHBvcnRlZCBkYXNoYm9hcmQgKi9cclxuLyogZ2xvYmFsIGdldEVsZW1lbnQgKi9cclxuLyogZ2xvYmFsIHVzZXJEYXRhTWFuYWdlciAqL1xyXG4vKiBnbG9iYWwgbWFpbkNvbmZpZyAqL1xyXG4vKiBnbG9iYWwgdXNlckxpc3RNYW5hZ2VyICovXHJcbi8qIGdsb2JhbCBkYXRhU291cmNlICovXHJcbi8qIGdsb2JhbCBzb3J0ZXIgKi9cclxudmFyIGRhc2hib2FyZCA9IChmdW5jdGlvbiBjcmVhdGVEYXNoYm9hcmRDb250cm9sbGVyKGNvbmZpZywgZGF0YVNvdXJjZSwgdURhdGFNYW5hZ2VyLCB1TGlzdE1hbmFnZXIsIHNvcnRlciwgZXZlbnRFbWl0dGVyKXtcclxuXHJcbiAgICB2YXIgaW50ZXJ2YWxJZCA9IFtdO1xyXG5cclxuICAgIGZ1bmN0aW9uIERhc2hib2FyZENvbnRyb2xsZXIoKSB7XHJcbiAgICAgICAgdGhpcy5zZXR1cEV2ZW50RW1pdHRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLnN0YXJ0QXBwID0gZnVuY3Rpb24gc3RhcnRBcHAgKCkge1xyXG4gICAgICAgIHVEYXRhTWFuYWdlci5zZXR1cChjb25maWcpO1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlckxpc3QoKTtcclxuICAgICAgICB0aGlzLnNldHVwQ29tbW9uTGlzdGVuZXJGdW5jdGlvbnMoKTtcclxuICAgICAgICB0aGlzLnNldHVwSW50ZXJ2YWxGdW5jdGlvbnMoKTtcclxuICAgIH07XHJcblxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuc2V0dXBFdmVudEVtaXR0ZXIgPSBmdW5jdGlvbiBzZXR1cEV2ZW50RW1pdHRlciAoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGV2ZW50RW1pdHRlci5hZGRTdWJzY3JpYmUoXCJ1c2VyTGlzdFwiLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgdXNlcnNMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGFbMV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkubWFwKGZ1bmN0aW9uIHNldFVzZXJTZXR0aW5nKHVzZXJJZCkge1xyXG4gICAgICAgICAgICAgICAgdUxpc3RNYW5hZ2VyLmFkZFVzZXJUb1VzZXJzQXJyYXkoXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVt1c2VySWRdLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJJZCxcclxuICAgICAgICAgICAgICAgICAgICB1c2Vyc0xpc3RcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB1TGlzdE1hbmFnZXIudUxpc3QgPSB1TGlzdE1hbmFnZXIudUxpc3QuY29uY2F0KHVzZXJzTGlzdCk7XHJcbiAgICAgICAgICAgIHZhciBjb25kaXRpb24gPSB0aGF0LmdldEN1cnJlbnRVc2VySWRGcm9tTG9jYWxTdG9yYWdlKCk7XHJcbiAgICAgICAgICAgIHRoYXQubG9jYWxTZXR0aW5nc1NldHVwKGNvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIHRoYXQuc2V0dXBVc2VyTGlzdERPTSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGV2ZW50RW1pdHRlci5hZGRTdWJzY3JpYmUoXCJsYXN0T25saW5lXCIsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciB1c2VySWQgPSBkYXRhWzBdO1xyXG4gICAgICAgICAgICB2YXIgbGFzdE9ubGluZSA9IGRhdGFbMV07XHJcbiAgICAgICAgICAgIHVMaXN0TWFuYWdlci51cGRhdGVVc2VyT25saW5lU3RhdHVzKHVzZXJJZCwgbGFzdE9ubGluZSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBldmVudEVtaXR0ZXIuYWRkU3Vic2NyaWJlKFwic2VuZE5ld01lc3NhZ2VcIiwgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIHVzZXJJbmRleCA9IHVMaXN0TWFuYWdlci5nZXRVc2VyRnJvbVVzZXJMaXN0QnlJZChkYXRhWzBdKTtcclxuICAgICAgICAgICAgdUxpc3RNYW5hZ2VyLnVMaXN0W3VzZXJJbmRleF0uc2VuZE5ld01lc3NhZ2UgPSBkYXRhWzFdO1xyXG4gICAgICAgICAgICB0aGF0LnRvZ2dsZU5ld01lc3NhZ2VJbmRpY2F0b3JUb1VzZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIERBU0hCT0FSRF9DT05ESVRJT05cclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLnNhdmVDdXJyZW50Q29uZGl0aW9uVG9Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiBzYXZlQ3VycmVudENvbmRpdGlvblRvTG9jYWxTdG9yYWdlKCkge1xyXG4gICAgICAgIHZhciBzZXJpYWxDb25kaXRpb24gPSBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgIGZpbHRlcjogY29uZmlnLmN1cnJlbnREYXNoYm9hcmRDb25kaXRpb24uZmlsdGVyQnksXHJcbiAgICAgICAgICAgIHNvcnQ6IGNvbmZpZy5jdXJyZW50RGFzaGJvYXJkQ29uZGl0aW9uLnNvcnRCeSxcclxuICAgICAgICAgICAgY3VycmVudFVzZXJJZDogY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MudXNlcklkXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oY29uZmlnLkxPQ0FMX1NUT1JBR0VfTkFNRSwgc2VyaWFsQ29uZGl0aW9uKTtcclxuICAgIH07XHJcblxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0Q3VycmVudFVzZXJJZEZyb21Mb2NhbFN0b3JhZ2UgPSBmdW5jdGlvbiBnZXRDdXJyZW50VXNlcklkRnJvbUxvY2FsU3RvcmFnZSgpIHtcclxuICAgICAgICB2YXIgc2VyaWFsQ29uZGl0aW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oY29uZmlnLkxPQ0FMX1NUT1JBR0VfTkFNRSk7XHJcbiAgICAgICAgdmFyIGNvbmRpdGlvbiA9IG51bGw7XHJcbiAgICAgICAgaWYgKHNlcmlhbENvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBjb25kaXRpb24gPSBKU09OLnBhcnNlKHNlcmlhbENvbmRpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50RGFzaGJvYXJkQ29uZGl0aW9uLmZpbHRlckJ5ID0gY29uZGl0aW9uLmZpbHRlcjtcclxuICAgICAgICAgICAgY29uZmlnLmN1cnJlbnREYXNoYm9hcmRDb25kaXRpb24uc29ydEJ5ID0gY29uZGl0aW9uLnNvcnQ7XHJcbiAgICAgICAgICAgIGNvbmZpZy5jdXJyZW50VXNlclNldHRpbmdzLnVzZXJJZCA9IGNvbmRpdGlvbi5jdXJyZW50VXNlcklkO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY29uZGl0aW9uO1xyXG4gICAgfTtcclxuXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS5sb2NhbFNldHRpbmdzU2V0dXAgPSBmdW5jdGlvbiBsb2NhbFNldHRpbmdzU2V0dXAoY29uZGl0aW9uKSB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoY29uZGl0aW9uLmZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudChjb25maWcuRE9NLkNTU19GSUxURVJfSU5QVVRfSUQpLnZhbHVlID0gY29uZGl0aW9uLmZpbHRlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5zb3J0KSB7XHJcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX1NPUlRfU0VMRUNUX0lEKS52YWx1ZSA9IGNvbmRpdGlvbi5zb3J0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5jdXJyZW50VXNlcklkKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maWcuY3VycmVudFVzZXJTZXR0aW5ncy51c2VySWQgPSBjb25kaXRpb24uY3VycmVudFVzZXJJZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRDb252ZXJzYXRpb25XaXRoVXNlcihjb25maWcuY3VycmVudFVzZXJTZXR0aW5ncy51c2VySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIERBU0hCT0FSRF9DT05ESVRJT05cclxuXHJcbiAgICAvLyDRhNC40LvRjNGC0YDQsNGG0LjRjyDRgdC/0LjRgdC60LAg0Y7Qt9C10YDQvtCyXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiBmaWx0ZXIoKSB7XHJcbiAgICAgICAgY29uZmlnLmN1cnJlbnREYXNoYm9hcmRDb25kaXRpb24uZmlsdGVyQnkgPSBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX0ZJTFRFUl9JTlBVVF9JRCkudmFsdWU7XHJcbiAgICAgICAgdGhpcy5zYXZlQ3VycmVudENvbmRpdGlvblRvTG9jYWxTdG9yYWdlKCk7XHJcbiAgICAgICAgdUxpc3RNYW5hZ2VyLmZpbHRlckJ5TmFtZShjb25maWcuY3VycmVudERhc2hib2FyZENvbmRpdGlvbi5maWx0ZXJCeSk7XHJcbiAgICAgICAgdUxpc3RNYW5hZ2VyLmRpc3BsYXlVc2VycygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyAvLyDRgdC+0YDRgtC40YDQvtCy0LrQsCDRgdC/0LjRgdC60LAg0Y7Qt9C10YDQvtCyXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gc29ydCgpIHtcclxuICAgICAgICBjb25maWcuY3VycmVudERhc2hib2FyZENvbmRpdGlvbi5zb3J0QnkgPSBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX1NPUlRfU0VMRUNUX0lEKS52YWx1ZTtcclxuICAgICAgICB0aGlzLnNhdmVDdXJyZW50Q29uZGl0aW9uVG9Mb2NhbFN0b3JhZ2UoKTtcclxuICAgICAgICB1TGlzdE1hbmFnZXIuc29ydFVzZXJzQnlGaWVsZCgpO1xyXG4gICAgICAgIHVMaXN0TWFuYWdlci5kaXNwbGF5VXNlcnMoKTtcclxuICAgIH07XHJcblxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuc2V0dXBVc2Vyc0xpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwVXNlcnNMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIEFycmF5LmZyb20oY29uZmlnLnVzZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIGFkZExpc3RlbmVycyAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVzZXJMaXN0ZW5lci5iaW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZpcnN0Q2hpbGQuaW5uZXJUZXh0XHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLnNldHVwVXNlckxpc3RET00gPSBmdW5jdGlvbiBzZXR1cFVzZXJMaXN0RE9NICgpIHtcclxuICAgICAgICB1TGlzdE1hbmFnZXIuZGlzcGxheVVzZXJzKCk7XHJcbiAgICAgICAgdGhpcy5nZXRBY2Vzc1RvVXNlcnNMaXN0KCk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVOZXdNZXNzYWdlSW5kaWNhdG9yVG9Vc2VyKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cFVzZXJzTGlzdGVuZXJzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmdldEFjZXNzVG9Vc2Vyc0xpc3QgPSBmdW5jdGlvbiBhY2Nlc3NUb1VzZXJzRE9NKCkge1xyXG4gICAgICAgIGNvbmZpZy51c2VycyA9IGdldEVsZW1lbnQoXHJcbiAgICAgICAgICAgIGNvbmZpZy51c2VyTGlzdC5VU0VSX0VMRU1FTlRfQ1NTX0NMQVNTLCB0cnVlXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuZ2V0VXNlckxpc3QgPSBmdW5jdGlvbiBnZXRVc2VyTGlzdCAoKSB7XHJcbiAgICAgICAgdmFyIGRhdGE7XHJcbiAgICAgICAgdmFyIGxvbmdQb2xsVXNlckxpc3RDb25uZWN0b3IgPSBkYXRhU291cmNlLnVzZXJzQVBJLmdldFVzZXJMaXN0KG51bGwpO1xyXG4gICAgICAgIGxvbmdQb2xsVXNlckxpc3RDb25uZWN0b3Iub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBsb25nUG9sbFJlc3BvbnNlUGFyc2VyLnBhcnNlKHRoaXMucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgIGlmKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZW1pdChkYXRhLnR5cGUsIGRhdGEub2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9uZ1BvbGxVc2VyTGlzdENvbm5lY3Rvci5zZW5kKCk7XHJcbiAgICAgICAgY29uZmlnLmN1cnJlbnRVc2VyTGlzdENvbm5lY3Rpb24gPSBsb25nUG9sbFVzZXJMaXN0Q29ubmVjdG9yO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUudXNlckxpc3RlbmVyID0gZnVuY3Rpb24gdXNlckxpc3RlbmVyKHVzZXJJZCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRDb252ZXJzYXRpb25XaXRoVXNlcih1c2VySWQpO1xyXG4gICAgICAgIHRoaXMubWFya01lc3NhZ2VGcm9tVXNlckFzUmVhZCh1c2VySWQpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgLy8g0J7RgtC60YDRi9Cy0LDQtdGCINGH0LDRgiDRgSDRjtC30LXRgNC+0LwsINC30LDQs9GA0YPQttCw0LXRgiDQvNC10YHRgdCw0LTQttC4INGO0LfQtdGA0LAg0Lgg0L7RgtC+0LHRgNCw0LbQsNC10YIg0LjRhVxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUuc3RhcnRDb252ZXJzYXRpb25XaXRoVXNlciA9IGZ1bmN0aW9uIHN0YXJ0Q29udmVyc2F0aW9uV2l0aFVzZXIoXHJcbiAgICAgICAgdXNlcklkXHJcbiAgICApIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MudXNlcklkID0gdXNlcklkO1xyXG4gICAgICAgIHVEYXRhTWFuYWdlci5jbGVhck1lc3NhZ2VMaXN0KCk7XHJcbiAgICAgICAgdURhdGFNYW5hZ2VyLmdldFVzZXJEYXRhKHVzZXJJZClcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gc2F2ZUxvY2FsRGF0YSAoKSB7XHJcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX0NIQVRfQ09OVEFJTlNfQkxPQ0tfU1RZTEUpLmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLklOVklTSUJMRV9DTEFTUyk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNhdmVDdXJyZW50Q29uZGl0aW9uVG9Mb2NhbFN0b3JhZ2UoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgZGF0YVNvdXJjZS51c2Vyc0FQSS51cGRhdGVTZW5kTmV3TWVzc2FnZUZsYWcodXNlcklkLCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyDQntCx0L3QvtCy0LvQtdGCINC80LDRgdGB0LjQsiDRgdC+0L7QsdGJ0LXQvdC40Lkg0LIg0LzQvtC00YPQu9C1INGH0LDRgtCwINC4INCy0YvQstC+0LTQuNGCINC40YUg0L3QsCDRjdC60YDQsNC9XHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGVVc2VyTWVzc2FnZXNBbmREaXNwbGF5SXQgPSBmdW5jdGlvbiB1cGRhdGVVc2VyTWVzc2FnZXNBbmREaXNwbGF5SXQoXHJcbiAgICApIHtcclxuICAgICAgICB1RGF0YU1hbmFnZXIuZ2V0VXNlckRhdGEoY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MudXNlcklkKTtcclxuICAgICAgICB0aGlzLm1hcmtNZXNzYWdlRnJvbVVzZXJBc1JlYWQoY29uZmlnLmN1cnJlbnRVc2VyU2V0dGluZ3MudXNlcklkKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLnNldHVwQ29tbW9uTGlzdGVuZXJGdW5jdGlvbnMgPSBmdW5jdGlvbiBzZXR1cENvbW1vbkxpc3RlbmVyRnVuY3Rpb25zKCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX1NFTkRfTUVTU0FHRV9CVVRUT05fQ0xBU1MpLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgdXNlckRhdGFNYW5hZ2VyLnNlbmRNZXNzYWdlLmJpbmQodXNlckRhdGFNYW5hZ2VyLCBjb25maWcuQURNSU5fTkFNRSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGdldEVsZW1lbnQoY29uZmlnLkRPTS5DU1NfQ0xPU0VfQ0hBVF9CVVRUT05fQ0xBU1MpLmFkZEV2ZW50TGlzdGVuZXIoXHJcbiAgICAgICAgICAgIFwiY2xpY2tcIixcclxuICAgICAgICAgICAgdGhhdC5jbG9zZUNvbnZlcnNhdGlvbi5iaW5kKHRoYXQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX0ZJTFRFUl9JTlBVVF9JRCkuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAgICAgXCJpbnB1dFwiLFxyXG4gICAgICAgICAgICB0aGF0LmZpbHRlci5iaW5kKHRoYXQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBnZXRFbGVtZW50KGNvbmZpZy5ET00uQ1NTX1NPUlRfU0VMRUNUX0lEKS5hZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgICAgICBcImlucHV0XCIsXHJcbiAgICAgICAgICAgIHRoYXQuc29ydC5iaW5kKHRoYXQpXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHVzZXJEYXRhTWFuYWdlci5zZXRNZXNzYWdlQXNSZWFkLmJpbmQodXNlckRhdGFNYW5hZ2VyKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vINCf0L7QvNC10YfQsNC10YIg0LrQsNC90LDQuyDRjtC30LXRgNCwINC60LDQuiDQv9GA0L7Rh9C40YLQsNC90L3Ri9C5ICjQtdGB0LvQuCDRgtCw0Lwg0LXRgdGC0Ywg0L3QtdC/0YDQvtGH0LjRgtCw0L3QvdGL0LUg0YHQvtC+0LHRidC10L3QuNGPKVxyXG4gICAgRGFzaGJvYXJkQ29udHJvbGxlci5wcm90b3R5cGUubWFya01lc3NhZ2VGcm9tVXNlckFzUmVhZCA9IGZ1bmN0aW9uIG1hcmtNZXNzYWdlRnJvbVVzZXJBc1JlYWQgKHVzZXJJZCkge1xyXG4gICAgICAgIHZhciB1c2VySW5kZXggPSB1TGlzdE1hbmFnZXIuZ2V0VXNlckZyb21Vc2VyTGlzdEJ5SWQodXNlcklkKTtcclxuICAgICAgICB1TGlzdE1hbmFnZXIudUxpc3RbdXNlckluZGV4XS5zZW5kTmV3TWVzc2FnZSA9IGZhbHNlO1xyXG4gICAgICAgIHVEYXRhTWFuYWdlci5zYXZlVXNlclNldHRpbmdzVG9EYXRhU291cmNlKFt7XHJcbiAgICAgICAgICAgIHVzZXJJZDogdXNlcklkLFxyXG4gICAgICAgICAgICBmaWVsZE5hbWU6IFwic2VuZE5ld01lc3NhZ2VcIixcclxuICAgICAgICAgICAgZmllbGRWYWx1ZTogZmFsc2VcclxuICAgICAgICB9XSk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVOZXdNZXNzYWdlSW5kaWNhdG9yVG9Vc2VyKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vINCX0LDQutGA0YvQstCw0LXRgiDQutCw0L3QsNC7INC+0LHRidC10L3QuNGPINGBINGO0LfQtdGA0L7QvCDQuCDRh9Cw0YJcclxuICAgIERhc2hib2FyZENvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlQ29udmVyc2F0aW9uID0gZnVuY3Rpb24gY2xvc2VDb252ZXJzYXRpb24gKCkge1xyXG4gICAgICAgIGdldEVsZW1lbnQoY29uZmlnLkRPTS5DU1NfQ0hBVF9DT05UQUlOU19CTE9DS19TVFlMRSkuY2xhc3NMaXN0LmFkZChjb25maWcuSU5WSVNJQkxFX0NMQVNTKTtcclxuICAgICAgICBjb25maWcuY3VycmVudFVzZXJTZXR0aW5ncy51c2VySWQgPSBudWxsO1xyXG4gICAgICAgIGNvbmZpZy5jdXJyZW50TWVzc2FnZUNvbm5lY3Rpb24uYWJvcnQoKTtcclxuICAgICAgICB0aGlzLnNhdmVDdXJyZW50Q29uZGl0aW9uVG9Mb2NhbFN0b3JhZ2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g0LTQvtCx0LDQstC70Y/QtdGCINC90L7QstGL0Lkg0LXQu9C10LzQtdC90YIt0LjQvdC00LjQutCw0YLQvtGAINCyXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS50b2dnbGVOZXdNZXNzYWdlSW5kaWNhdG9yVG9Vc2VyID0gZnVuY3Rpb24gdG9nZ2xlTmV3TWVzc2FnZUluZGljYXRvclRvVXNlcigpIHtcclxuICAgICAgICB2YXIgbmV3TWVzc2FnZURpdjtcclxuICAgICAgICBPYmplY3Qua2V5cyh1TGlzdE1hbmFnZXIudUxpc3QpLm1hcChmdW5jdGlvbiBibGluayhrZXkpIHtcclxuICAgICAgICAgICAgbmV3TWVzc2FnZURpdiA9IHVMaXN0TWFuYWdlci51TGlzdFtrZXldLnVzZXJFbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXHJcbiAgICAgICAgICAgICAgICBjb25maWcuQ1NTX0hBVkVfTkVXX01FU1NBR0VfU1RZTEVcclxuICAgICAgICAgICAgKVswXTtcclxuICAgICAgICAgICAgaWYgKHVMaXN0TWFuYWdlci51TGlzdFtrZXldLnNlbmROZXdNZXNzYWdlICYmICFuZXdNZXNzYWdlRGl2KSB7XHJcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2VEaXYuY2xhc3NMaXN0LmFkZChjb25maWcuQ1NTX0hBVkVfTkVXX01FU1NBR0VfU1RZTEUpO1xyXG4gICAgICAgICAgICAgICAgdUxpc3RNYW5hZ2VyLnVMaXN0W2tleV0udXNlckVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3TWVzc2FnZURpdik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYoIXVMaXN0TWFuYWdlci51TGlzdFtrZXldLnNlbmROZXdNZXNzYWdlICYmIG5ld01lc3NhZ2VEaXYpIHtcclxuICAgICAgICAgICAgICAgIHVMaXN0TWFuYWdlci51TGlzdFtrZXldLnVzZXJFbGVtZW50LnJlbW92ZUNoaWxkKG5ld01lc3NhZ2VEaXYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS5zZXR1cEludGVydmFsRnVuY3Rpb25zID0gZnVuY3Rpb24gc2V0dXBJbnRlcnZhbEZ1bmN0aW9ucyAoKSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIGludGVydmFsSWQucHVzaCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXModUxpc3RNYW5hZ2VyLnVMaXN0KS5tYXAoZnVuY3Rpb24gKHZpZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgdUxpc3RNYW5hZ2VyLnVwZGF0ZVVzZXJPbmxpbmVTdGF0dXMoXHJcbiAgICAgICAgICAgICAgICAgICAgdUxpc3RNYW5hZ2VyLnVMaXN0W3ZpZXdJZF0udXNlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgIHVMaXN0TWFuYWdlci51TGlzdFt2aWV3SWRdLmxhc3RPbmxpbmVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoYXQuc2V0dXBVc2VyTGlzdERPTSgpO1xyXG4gICAgICAgIH0sY29uZmlnLmludGVydmFsLlVQREFURV9VU0VSU19USU1FKVxyXG4gICAgfTtcclxuXHJcbiAgICBEYXNoYm9hcmRDb250cm9sbGVyLnByb3RvdHlwZS5jbG9zZUFwcCA9IGZ1bmN0aW9uIGNsb3NlQXBwICgpIHtcclxuICAgICAgICBpbnRlcnZhbElkLmZvckVhY2goZnVuY3Rpb24gY2xlYXIgKGlkKSB7XHJcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaWQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdXNlckRhdGFNYW5hZ2VyLmNsZWFyTWVzc2FnZUxpc3QoKTtcclxuICAgICAgICB1TGlzdE1hbmFnZXIuY2xlYXJVc2VyTGlzdCgpO1xyXG4gICAgICAgIGNvbmZpZy5jdXJyZW50TWVzc2FnZUNvbm5lY3Rpb24uYWJvcnQoKTtcclxuICAgICAgICBjb25maWcuY3VycmVudFVzZXJMaXN0Q29ubmVjdGlvbi5hYm9ydCgpXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgRGFzaGJvYXJkQ29udHJvbGxlcigpO1xyXG5cclxufSkobWFpbkNvbmZpZywgZGF0YVNvdXJjZSwgdXNlckRhdGFNYW5hZ2VyLCB1c2VyTGlzdE1hbmFnZXIsIHNvcnRlciwgZXZlbnRFbWl0dGVyKTtcclxuLyogZXhwb3J0ZWQgbGF1bmNoZXIgKi9cclxuLyogZ2xvYmFsIGdldEVsZW1lbnQgKi9cclxuLyogZ2xvYmFsIG1haW5Db25maWcgKi9cclxudmFyIGxhdW5jaGVyID0gKGZ1bmN0aW9uIGNyZWF0ZUxhdW5jaGVyIChjb25maWcpIHtcclxuXHJcbiAgICB2YXIgRE9NVmFyaWFibGVzID0ge307XHJcbiAgICB2YXIga2V5T2ZWYWx1ZSA9IHtcclxuICAgICAgICBjaGF0VGl0bGU6IHtcclxuICAgICAgICAgICAgdHlwZU9mVmFsdWU6IFwidmFsdWVcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2hhdFVybDoge1xyXG4gICAgICAgICAgICB0eXBlT2ZWYWx1ZTogXCJ2YWx1ZVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjaGF0Q2xhc3M6IHtcclxuICAgICAgICAgICAgdHlwZU9mVmFsdWU6IFwidmFsdWVcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2hhdFBvc2l0aW9uU2VsZWN0OiB7XHJcbiAgICAgICAgICAgIHR5cGVPZlZhbHVlOiBcInZhbHVlXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhbGxvd01pbmltaXplOiB7XHJcbiAgICAgICAgICAgIHR5cGVPZlZhbHVlOiBcImNoZWNrZWRcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWxsb3dEcmFnOiB7XHJcbiAgICAgICAgICAgIHR5cGVPZlZhbHVlOiBcImNoZWNrZWRcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvd1RpbWU6IHtcclxuICAgICAgICAgICAgdHlwZU9mVmFsdWU6IFwiY2hlY2tlZFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXF1aXJlTmFtZToge1xyXG4gICAgICAgICAgICB0eXBlT2ZWYWx1ZTogXCJjaGVja2VkXCJcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyByYWRpbyBidXR0b24gKGxhc3QgZWxlbWVudCwgaXQncyBpbXBvdGVudClcclxuICAgICAgICBuZXR3b3JrUmFkaW9YTVI6IHtcclxuICAgICAgICAgICAgdHlwZU9mVmFsdWU6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgdHJ1ZTogXCJYSFJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV0d29ya1JhZGlvTG9uZ1BvbGw6IHtcclxuICAgICAgICAgICAgdHlwZU9mVmFsdWU6IFwidmFsdWVcIixcclxuICAgICAgICAgICAgdHJ1ZTogXCJsb25nUG9sbFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBuZXR3b3JrUmFkaW9GZXRjaDoge1xyXG4gICAgICAgICAgICB0eXBlT2ZWYWx1ZTogXCJ2YWx1ZVwiLFxyXG4gICAgICAgICAgICB0cnVlOiBcImZldGNoXCJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIExhdW5jaGVyKCkge31cclxuXHJcbiAgICBMYXVuY2hlci5wcm90b3R5cGUuZ2V0RGF0YUZyb21FbGVtZW50ID0gZnVuY3Rpb24gZ2V0RGF0YUZyb21FbGVtZW50IChrZXkpIHtcclxuICAgICAgICB2YXIgc3JjID0gXCJcIjtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHR5cGVPZlZhbHVlO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKERPTVZhcmlhYmxlcykubWFwKGZ1bmN0aW9uIHNldHVwRGF0YSAoZWxlbWVudE5hbWUsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGlmKGtleVtlbGVtZW50TmFtZV0pIHtcclxuICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVPZlZhbHVlID0gRE9NVmFyaWFibGVzW2VsZW1lbnROYW1lXS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVPZlZhbHVlID09PSBcInJhZGlvXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoRE9NVmFyaWFibGVzW2VsZW1lbnROYW1lXS5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgKz0gXCInJlwiICsgXCJ0eXBlT2ZSZXF1ZXN0XCIgKyBcIj0nXCIgKyB0aGF0LmdldEVsZW1lbnRWYWx1ZShlbGVtZW50TmFtZSwgdHlwZU9mVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjICs9IFwiJyZcIiArIGVsZW1lbnROYW1lICsgXCI9J1wiICsgdGhhdC5nZXRFbGVtZW50VmFsdWUoZWxlbWVudE5hbWUsIHR5cGVPZlZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyYyArPSBlbGVtZW50TmFtZSArIFwiPSdcIiArIHRoYXQuZ2V0RWxlbWVudFZhbHVlKGVsZW1lbnROYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZihzcmMubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICBzcmMgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3JjO1xyXG4gICAgfTtcclxuXHJcbiAgICBMYXVuY2hlci5wcm90b3R5cGUuZ2V0RWxlbWVudFZhbHVlID0gZnVuY3Rpb24gZ2V0RWxlbWVudFZhbHVlIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIERPTVZhcmlhYmxlc1tuYW1lXVtrZXlPZlZhbHVlW25hbWVdLnR5cGVPZlZhbHVlXTtcclxuICAgIH07XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlU2NyaXB0ICgpIHtcclxuICAgICAgICB2YXIgc3JjID0gY29uZmlnLmxhdW5jaGVyLnNyY1N0YXJ0ICsgdGhpcy5nZXREYXRhRnJvbUVsZW1lbnQoa2V5T2ZWYWx1ZSk7XHJcbiAgICAgICAgc3JjICs9IGNvbmZpZy5sYXVuY2hlci5zcmNFbmQ7XHJcbiAgICAgICAgRE9NVmFyaWFibGVzLnNjcmlwdENvZGUuaW5uZXJIVE1MID0gc3JjO1xyXG4gICAgfVxyXG5cclxuICAgIExhdW5jaGVyLnByb3RvdHlwZS5zdGFydEFwcCA9IGZ1bmN0aW9uIHN0YXJ0QXBwICgpIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgY29uZmlnLmxhdW5jaGVyLmFmdGVyLm1hcCgoZnVuY3Rpb24gY3JlYXRlU2NyaXB0UGFydCAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBET01WYXJpYWJsZXNbZWxlbWVudF0gPSAgZ2V0RWxlbWVudChjb25maWcubGF1bmNoZXIucGF0dGVybiArIGVsZW1lbnQsIGZhbHNlLCB0cnVlKTtcclxuICAgICAgICAgICAgRE9NVmFyaWFibGVzW2VsZW1lbnRdLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBjcmVhdGVTY3JpcHQuYmluZCh0aGF0KSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcblxyXG4gICAgTGF1bmNoZXIucHJvdG90eXBlLmNsb3NlQXBwID0gZnVuY3Rpb24gY2xvc2VBcHAgKCkge1xyXG4gICAgICAgIERPTVZhcmlhYmxlcyA9IHt9O1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IExhdW5jaGVyKCk7XHJcblxyXG59KShtYWluQ29uZmlnKTtcclxuLyogZXhwb3J0ZWQgYWJvdXQgKi9cclxuLy8gU1RVQiAvL1xyXG52YXIgYWJvdXQgPSAoZnVuY3Rpb24gY3JlYXRlQWJvdXRQYWdlQXBwICgpIHtcclxuICAgIGZ1bmN0aW9uIEFib3V0KCkge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBBYm91dC5wcm90b3R5cGUuc3RhcnRBcHAgPSBmdW5jdGlvbiBzdGFydEFwcCAoKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICBBYm91dC5wcm90b3R5cGUuY2xvc2VBcHAgPSBmdW5jdGlvbiBjbG9zZUFwcCAoKSB7XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IEFib3V0KCk7XHJcblxyXG59KSgpO1xyXG4vKiBnbG9iYWwgZGFzaGJvYXJkICovXHJcbi8qIGdsb2JhbCBsYXVuY2hlciAqL1xyXG4vKiBnbG9iYWwgYWJvdXQgKi9cclxuLyogZ2xvYmFsIGNsZWFyRWxlbWVudENvbnRlbnQgKi9cclxuLyogZ2xvYmFsIHZpZXdGYWN0b3J5ICovXHJcbi8qIGdsb2JhbCBtYWluQ29uZmlnICovXHJcbnZhciBtYWluQ29udHJvbGxlciA9IChmdW5jdGlvbiBjcmVhdGVNYWluQ29udHJvbGxlciAoY29uZmlnKSB7XHJcblxyXG4gICAgdmFyIG1hdGNoZXNIdG1sUGF0aCA9IHtcclxuICAgICAgICBkYXNoYm9hcmQ6IGNvbmZpZy5yb3V0ZXIuREFTSEJPQVJEX0hUTUxfUEFUSCxcclxuICAgICAgICBjb25maWd1cmF0aW9uOiBjb25maWcucm91dGVyLkxBVU5DSEVSX0hUTUxfUEFUSCxcclxuICAgICAgICBhYm91dDogY29uZmlnLnJvdXRlci5BQk9VVF9IVE1MX1BBVEhcclxuICAgIH07XHJcblxyXG5cclxuICAgIHZhciBjbG9zZUZ1bmN0aW9ucyA9IHtcclxuICAgICAgICBkYXNoYm9hcmQ6IGRhc2hib2FyZC5jbG9zZUFwcC5iaW5kKGRhc2hib2FyZCksXHJcbiAgICAgICAgY29uZmlndXJhdGlvbjogbGF1bmNoZXIuY2xvc2VBcHAuYmluZChsYXVuY2hlciksXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0LmNsb3NlQXBwLmJpbmQoYWJvdXQpXHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzdGFydEZ1bmN0aW9ucyA9IHtcclxuICAgICAgICBkYXNoYm9hcmQ6IGRhc2hib2FyZC5zdGFydEFwcC5iaW5kKGRhc2hib2FyZCksXHJcbiAgICAgICAgY29uZmlndXJhdGlvbjogbGF1bmNoZXIuc3RhcnRBcHAuYmluZChsYXVuY2hlciksXHJcbiAgICAgICAgYWJvdXQ6IGFib3V0LnN0YXJ0QXBwLmJpbmQoYWJvdXQpXHJcbiAgICB9O1xyXG5cclxuICAgIGZ1bmN0aW9uIE1haW5Db250cm9sbGVyICgpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgTWFpbkNvbnRyb2xsZXIucHJvdG90eXBlLnN0YXJ0QXBwID0gZnVuY3Rpb24gc3RhcnRBcHAgKCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIGZ1bmN0aW9uIGhhc0NoYW5nZUV2ZW50QWRkIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHRoYXQuaGFuZGxlVXJsKGVsZW1lbnQubmV3VVJMKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g0J/RgNC4INC30LDQs9GA0YPQt9C60LUg0YHRgtGA0LDQvdC40YbRiyAtINGB0YfQuNGC0LDRgtGMINGB0L7RgdGC0L7Rj9C90LjQtSDQuCDQt9Cw0L/Rg9GB0YLQuNGC0Ywg0L7QsdGA0LDQsdC+0YLRh9C40LpcclxuICAgICAgICB0aGF0LmhhbmRsZVVybCh3aW5kb3cubG9jYXRpb24uaHJlZiArIFwiI2Rhc2hib2FyZFwiKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8g0KHQvtC30LTQsNGC0Ywg0L7QsdGA0LDQsdC+0YLRh9C40LogVVJMXHJcbiAgICBNYWluQ29udHJvbGxlci5wcm90b3R5cGUuaGFuZGxlVXJsID0gZnVuY3Rpb24gaGFuZGxlVXJsKHVybCkge1xyXG4gICAgICAgIHZhciBoYXNoID0gbnVsbDtcclxuICAgICAgICBpZih1cmwuaW5kZXhPZihcIiNcIikgPT09IC0xKXtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhhc2ggPSB1cmwuc3BsaXQoJyMnKS5wb3AoKTtcclxuICAgICAgICB0aGlzLmNsb3NlUHJldmlvdXNQYWdlKGhhc2gpO1xyXG5cclxuXHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYS4nICsgY29uZmlnLnJvdXRlci5OQVZJR0FUSU9OX0FDVElWRV9DU1MpLmZvckVhY2goZnVuY3Rpb24gcmVtb3ZlQ2xhc3NBY3RpdmUgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNvbmZpZy5yb3V0ZXIuTkFWSUdBVElPTl9BQ1RJVkVfQ1NTKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2FbaHJlZj1cIiMnICsgaGFzaCArICdcIl0nKS5mb3JFYWNoKGZ1bmN0aW9uIGFkZENsYXNzQWN0aXZlIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcucm91dGVyLk5BVklHQVRJT05fQUNUSVZFX0NTUyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNsZWFyRWxlbWVudENvbnRlbnQoY29uZmlnLnJvdXRlci5DT05URU5UX0NMQVNTKTtcclxuICAgICAgICB2aWV3RmFjdG9yeS5jcmVhdGVWaWV3KG1hdGNoZXNIdG1sUGF0aFtoYXNoXSwgbnVsbCwgY29uZmlnLnJvdXRlci5DT05URU5UX0NMQVNTKS50aGVuKGZ1bmN0aW9uIGludm9rZVN0YXJ0RnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBzdGFydEZ1bmN0aW9uc1toYXNoXSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgTWFpbkNvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlUHJldmlvdXNQYWdlID0gZnVuY3Rpb24gY2xvc2VQcmV2aW91c1BhZ2UoaGFzaCkge1xyXG4gICAgICAgIE9iamVjdC5rZXlzKGNsb3NlRnVuY3Rpb25zKS5tYXAoZnVuY3Rpb24gaW52b2tlQ2xvc2VGdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGlmKGtleSAhPT0gaGFzaCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VGdW5jdGlvbnNba2V5XSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgTWFpbkNvbnRyb2xsZXIoKTtcclxuXHJcbn0pKG1haW5Db25maWcpO1xyXG5cclxubWFpbkNvbnRyb2xsZXIuc3RhcnRBcHAoKTsiXX0=
