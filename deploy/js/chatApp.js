var mainConfig={DOM:{MAIN_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft",AUTHORIZATION_MENU_CLASS:"root_chat_for_touchsoft_input-name-block",USER_NAME_INPUT_CLASS:"root_chat_for_touchsoft_input-name",SEND_USER_NAME_BUTTON:"root_chat_for_touchsoft_input-name-button",SEND_MESSAGE_MIN_SIZE_BUTTON:"root_chat_for_touchsoft_minimize-style__send-button",SEND_MESSAGE_FULL_SIZE_BUTTON:"root_chat_for_touchsoft__bottom_send-button",CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft__textarea",CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style__message-input",TITLE_BLOCK_CLASS:"root_chat_for_touchsoft-title",CHANGE_STYLE_BUTTON_MAX_SIZE:"root_chat_for_touchsoft__top_minimize-button",MINIMIZE_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style",SET_MIN_STYLE_BUTTON:"root_chat_for_touchsoft_minimize-style__max-button",SET_MAX_STYLE_BUTTON:"root_chat_for_touchsoft__top_minimize-button"},DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",CSS_CURRENT_INPUT_CLASS:"root_chat_for_touchsoft__textarea",currentUserSettings:{userId:null,userName:null,isMinimize:!1,readLastMessage:!1,sendNewMessage:!1,lastOnline:(new Date).getTime()},chatSettings:{allowDrag:!1,position:"right",title:"TouchSoft Chat",allowMinimize:!0,outerCssClass:"touchsoft-chat_main-block",typeOfRequest:"fetch",requireName:!0},INVISIBLE_CLASS:"invisible",CHAT_POSITION_RIGHT:"root_chat_for_touchsoft_right-position",CHAT_POSITION_LEFT:"root_chat_for_touchsoft_left-position",LOCAL_STORAGE_NAME:"userID_touchsoft_chat",DEFAULT_USER_NAME:"guest",DEFAULT_CSS_CLASS_FOR_CHAT:"touchsoft-chat_main-block",DEFAULT_CHAT_TITLE:"TouchSoft Chat",HTML_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/dev/html/chatApplication/chat.html",CSS_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/dev/css/chat.css",CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root_chat_for_touchsoft__top_messages",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message",DISPLAY_MESSAGE_DATE:!0,DISPLAY_SENDER_NAME:!0,DISPLAY_MESSAGE:!0,UPDATE_USER_DATA_TIME:5e3};function parseSrcForParameters(t){var s={};return t.substr(t.indexOf("?")+1).split("&").forEach(function(t){var e=t.split("=");e[1]=e[1].replace(/'/g,""),s[e[0]]=e[1]}),s}function setOuterChatSettingToConfig(e,s){Object.keys(e).map(function(t){s.chatSettings[t]=e[t]})}setOuterChatSettingToConfig(parseSrcForParameters(document.currentScript.getAttribute("src")),mainConfig);var dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(t,e,s){var n=s?"#":".";return e?document.querySelectorAll(n+t):document.querySelector(n+t)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},dataConnector=function(t){var e;function s(){}return s.prototype.requestFetch=function(t,e,s,n){return fetch(t,{headers:{Accept:n,"Content-Type":n},method:s,body:e}).then(function(t){return"application/json"===n?t.json():t.text()})},s.prototype.requestXMR=function(n,i,o,r){return new Promise(function(t,e){var s=new XMLHttpRequest;s.open(o,n,!0),s.setRequestHeader("Content-Type",r),s.onload=function(){t("application/json"===r?JSON.parse(s.response):s.response)},s.onerror=function(){e(s.statusText)},i?s.send(i):s.send()})},e=new s,"fetch"===t.typeOfRequest?{request:e.requestFetch}:{request:e.requestXMR}}(dataConnectorConfig),dataSource=function(i){var t;function e(){i=i}return e.prototype.createRequestPath=function(t,e,s){var n=t+"/users";return null!==e&&(n+="/"+e),null!==s&&(n+="/"+s),n+=".json"},e.prototype.getHTML=function(t){return i.request(t,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},e.prototype.getUserData=function(t){var s={},e=this.createRequestPath(dataBaseUrl,t,null);return i.request(e,null,"GET","application/json").then(function(e){e&&Object.keys(e).map(function(t){return s[t]=e[t],!0})}).then(function(){return s})},e.prototype.getSettingField=function(t,e){var s=this.createRequestPath(dataBaseUrl,t,e);return i.request(s,null,"GET","application/json")},e.prototype.setSettingField=function(t,e,s){var n=this.createRequestPath(dataBaseUrl,t,e);return i.request(n,JSON.stringify(s),"PUT","application/json")},e.prototype.sendMessage=function(t,e){var s=this.createRequestPath(dataBaseUrl,t,"messages"),n=JSON.stringify({date:e.date,message:e.message,title:"message",user:e.sender,itIsRead:e.read});return i.request(s,n,"POST","application/json")},e.prototype.getAllUsers=function(){var s={},t=this.createRequestPath(dataBaseUrl,null,null);return i.request(t,null,"GET","application/json").then(function(e){e&&Object.keys(e).map(function(t){return s[t]=e[t],!0})}).then(function(){return s})},{usersAPI:{getUserData:(t=new e).getUserData.bind(t),sendMessage:t.sendMessage.bind(t),setField:t.setSettingField.bind(t),getField:t.getSettingField.bind(t),getAllUsers:t.getAllUsers.bind(t)},commonAPI:{getHTML:t.getHTML.bind(t)}}}(dataConnector),messageListManager=function(){function t(){}return t.prototype.setup=function(t){this.config=t,this.messageList=[],this.cDOM={messagesBlock:getElement(this.config.CSS_CHAT_MESSAGES_CONTAINER)}},t.prototype.createMessageElement=function(t,e,s,n){var i=this.createMessageContainerDiv(n,s),o=this.createDivForMessageBlock(e,this.config.DISPLAY_MESSAGE_DATE,[this.config.CSS_CHAT_MESSAGE_DATE]),r=this.createDivForMessageBlock(s,this.config.DISPLAY_SENDER_NAME,[this.config.CSS_CHAT_MESSAGE_SENDER_NAME]),a=this.createDivForMessageBlock(t,this.config.DISPLAY_MESSAGE,[this.config.CSS_CHAT_MESSAGE]);return i.appendChild(o),i.appendChild(r),i.appendChild(a),i},t.prototype.getMessageObjectsForMarkAsRead=function(t,e){var s,n=[],i=t||this.config.currentUserSettings.userName,o=e||this.config.currentUserSettings.userId;for(s=this.messageList.length-1;0<=s;s--)if(this.messageList[s].sender!==i){if(this.messageList[s].read)break;n.push({userId:o,fieldName:"messages/"+this.messageList[s].id+"/itIsRead",fieldValue:!0})}return n},t.prototype.createMessageContainerDiv=function(t,e){var s=document.createElement("div");return t||this.config.currentUserSettings.userName===e||s.classList.add(this.config.CSS_USER_NOT_READ_MESSAGES),s},t.prototype.createDivForMessageBlock=function(t,e,s){var n=document.createElement("div");return s.forEach(function(t){n.classList.add(t)}),n.innerHTML=t,n},t.prototype.createMessageList=function(t){var e=[];return t&&t.forEach(function(t){e.push(t)}),e},t.prototype.updateMessageList=function(t){this.messageList=t,this.displayMessages()},t.prototype.addMessageToMessageList=function(t){this.messageList.push(t),this.displayMessages()},t.prototype.displayMessages=function(){var e,s=this;this.clearChat(),this.messageList.forEach(function(t){e=s.createMessageElement(t.message,t.date,t.sender,t.read),s.cDOM.messagesBlock.appendChild(e)})},t.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new t}(),userDataManager=function(){function t(){}function i(t,e,s,n,i){return{sender:s,message:t,read:n,date:e,id:i}}return t.prototype.setup=function(t){this.config=t,messageListManager.setup(t)},t.prototype.getUserData=function(t){var n=this;return dataSource.usersAPI.getUserData(t).then(function(e){if(n.config.currentUserSettings.userName=e.userName,n.config.currentUserSettings.isMinimize=e.isMinimize,e.messages){var t,s=[];Object.keys(e.messages).map(function(t){s.push(i(e.messages[t].message,e.messages[t].date,e.messages[t].user,e.messages[t].itIsRead,t))}),t=messageListManager.createMessageList(s),messageListManager.updateMessageList(t)}})},t.prototype.createNewUserProfileToDataBase=function(){var e=this;Object.keys(this.config.currentUserSettings).map(function(t){e.saveSettingField(t)})},t.prototype.saveSettingField=function(t){this.saveUserSettingsToDataSource([{userId:this.config.currentUserSettings.userId,fieldName:t,fieldValue:this.config.currentUserSettings[t]}])},t.prototype.sendMessage=function(t){var e,s,n=i(this.getMessageFromInputElement(),(e=new Date,s=1===e.getMinutes().toString().length?"0"+e.getMinutes():e.getMinutes(),e.getHours().toString().concat(":",s)),t,!1);messageListManager.addMessageToMessageList(n),this.saveMessageToDataSource(n)},t.prototype.getMessageFromInputElement=function(){var t=getElement(this.config.CSS_CURRENT_INPUT_CLASS),e=t.value;return t.value="",e},t.prototype.setMessageAsRead=function(){var t=messageListManager.getMessageObjectsForMarkAsRead();0<t.length&&this.saveUserSettingsToDataSource(t)},t.prototype.saveMessageToDataSource=function(t){if(t.sender===this.config.currentUserSettings.userName){console.log(t.sender);var e=[{userId:this.config.currentUserSettings.userId,fieldName:"sendNewMessage",fieldValue:!0}];this.saveUserSettingsToDataSource(e)}dataSource.usersAPI.sendMessage(this.config.currentUserSettings.userId,t)},t.prototype.saveUserSettingsToDataSource=function(t){t.forEach(function(t){dataSource.usersAPI.setField(t.userId,t.fieldName,t.fieldValue)})},new t}(),viewFactory=function(n){function t(){}return t.prototype.createView=function(s,n,i){var o=this;return new Promise(function(t,e){s?(n&&o.includeViewCssToPage(o.createCSSLink(n,"stylesheet","text/css","touch-soft-chat-css")),t(o.includeViewHTMLToPage(s,i))):e(new Error("htmlPath is null. Please add htmlPath"))})},t.prototype.includeViewHTMLToPage=function(t,e){var s=e?getElement(e):document.body;return n.commonAPI.getHTML(t).then(function(t){s.innerHTML=t})},t.prototype.includeViewCssToPage=function(t){document.head.appendChild(t)},t.prototype.createCSSLink=function(t,e,s,n){var i=document.createElement("link");return n&&i.setAttribute("id",n),e&&i.setAttribute("rel",e),s&&i.setAttribute("type",s),i.setAttribute("href",t),i},new t}(dataSource),chatCustomizer=function(){function t(){}return t.prototype.setup=function(t){this.config=t},t.prototype.setupOuterChatSettings=function(){this.allowMinimize(),this.setPositionOfMainBlock(),this.setTitle(),this.allowDragNDrop()},t.prototype.allowDragNDrop=function(){var t=getElement(this.config.DOM.TITLE_BLOCK_CLASS),u=getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS);"false"!==this.config.chatSettings.allowDrag&&t.addEventListener("mousedown",function(t){var e,s,n,i,o,r,a;function c(t){u.style.left=t.pageX-s+"px",u.style.top=t.pageY-n+"px"}e={top:(a=u.getBoundingClientRect()).top+window.pageYOffset,left:a.left+window.pageXOffset},s=t.pageX-e.left,n=t.pageY-e.top,i=function(t){c(t)},o=function(){document.removeEventListener("mousemove",i),document.removeEventListener("mouseup",o)},r=function(){return!1},c(t),u.style.zIndex=1e3,document.addEventListener("mousemove",i),document.addEventListener("mouseup",o),u.addEventListener("dragstart",r)})},t.prototype.setPositionOfMainBlock=function(){"right"===this.config.chatSettings.position?getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(this.config.CHAT_POSITION_RIGHT):getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(this.config.CHAT_POSITION_LEFT)},t.prototype.setTitle=function(){this.config.chatSettings.title.length<1&&(this.config.chatSettings.title=this.config.DEFAULT_CHAT_TITLE),getElement(this.config.DOM.TITLE_BLOCK_CLASS).innerHTML=this.config.chatSettings.title},t.prototype.allowMinimize=function(){"false"===this.config.chatSettings.allowMinimize&&getElement(this.config.DOM.CHANGE_STYLE_BUTTON_MAX_SIZE).classList.add(this.config.INVISIBLE_CLASS)},t.prototype.setMainCssClass=function(){console.log(this.config.chatSettings.outerCssClass),this.config.chatSettings.outerCssClass.length<1&&(this.config.chatSettings.outerCssClass=this.config.DEFAULT_CSS_CLASS_FOR_CHAT),getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS.parentNode).classList.add(this.config.chatSettings.outerCssClass)},new t}(),chatController=function(){function t(){}return t.prototype.setup=function(t){this.config=t},t.prototype.startApp=function(){var t=this;return this.setupChatView().then(function(){t.authorization(t.config.chatSettings.requireName),t.setupChatBasicListeners()}).then(function(){t.config.currentUserSettings.userId?userDataManager.getUserData(t.config.currentUserSettings.userId).then(function(){t.setupChatStyle(),t.setupIntervalFunctions(),t.setupChatSendListeners()}):t.setupChatStyle()}).then(function(){chatCustomizer.setup(t.config),chatCustomizer.setupOuterChatSettings()})},t.prototype.authorization=function(t){userDataManager.setup(this.config),this.config.currentUserSettings.userId=this.getUserIdFromLocalStorage(),this.config.currentUserSettings.userId||("false"===t?(this.config.currentUserSettings.userId=this.getHash(this.config.DEFAULT_USER_NAME),this.config.currentUserSettings.userName=this.config.DEFAULT_USER_NAME,this.saveUserIdToLocalStorage(this.config.currentUserSettings.userId),userDataManager.createNewUserProfileToDataBase()):this.toggleAuthorizationMenuVisible())},t.prototype.toggleAuthorizationMenuVisible=function(){getElement(this.config.DOM.AUTHORIZATION_MENU_CLASS).classList.toggle(this.config.INVISIBLE_CLASS)},t.prototype.getHash=function(t){return t+(new Date).getTime()},t.prototype.getUserNameFromInput=function(){this.config.currentUserSettings.userName=getElement(this.config.DOM.USER_NAME_INPUT_CLASS).value,this.config.currentUserSettings.userId=this.getHash(this.config.currentUserSettings.userName),userDataManager.setup(this.config),userDataManager.createNewUserProfileToDataBase(),this.saveUserIdToLocalStorage(this.config.currentUserSettings.userId),this.toggleAuthorizationMenuVisible(),this.setupIntervalFunctions(),this.setupChatSendListeners()},t.prototype.setupChatSendListeners=function(){getElement(this.config.DOM.SEND_MESSAGE_FULL_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,this.config.currentUserSettings.userName)),getElement(this.config.DOM.SEND_MESSAGE_MIN_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,this.config.currentUserSettings.userName)),document.addEventListener("mousemove",userDataManager.setMessageAsRead.bind(userDataManager))},t.prototype.setupChatBasicListeners=function(){var t=this;getElement(t.config.DOM.SEND_USER_NAME_BUTTON).addEventListener("click",t.getUserNameFromInput.bind(t)),getElement(t.config.DOM.SET_MAX_STYLE_BUTTON).addEventListener("click",t.minMaxStyleToggle.bind(t)),getElement(t.config.DOM.SET_MIN_STYLE_BUTTON).addEventListener("click",t.minMaxStyleToggle.bind(t))},t.prototype.setupChatView=function(){return viewFactory.createView(this.config.HTML_FILE_PATH,this.config.CSS_FILE_PATH,null)},t.prototype.setupChatStyle=function(){this.config.currentUserSettings.isMinimize?getElement(this.config.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(this.config.INVISIBLE_CLASS):getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(this.config.INVISIBLE_CLASS)},t.prototype.minMaxStyleToggle=function(){getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(this.config.INVISIBLE_CLASS),getElement(this.config.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(this.config.INVISIBLE_CLASS),this.config.currentUserSettings.isMinimize=!1===this.config.currentUserSettings.isMinimize,this.changeInputAndSendButtonClass(),userDataManager.saveSettingField("isMinimize")},t.prototype.activityNotify=function(){var t=new Date;this.config.currentUserSettings.lastOnline=t.getTime(),userDataManager.saveSettingField("lastOnline")},t.prototype.changeInputAndSendButtonClass=function(){this.config.currentUserSettings.isMinimize?this.config.CSS_CURRENT_INPUT_CLASS=this.config.DOM.CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:this.config.CSS_CURRENT_INPUT_CLASS=this.config.DOM.CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS},t.prototype.saveUserIdToLocalStorage=function(t){localStorage.setItem(this.config.LOCAL_STORAGE_NAME,t)},t.prototype.getUserIdFromLocalStorage=function(){return localStorage.getItem(this.config.LOCAL_STORAGE_NAME)},t.prototype.setupIntervalFunctions=function(){var t=this;setInterval(function(){userDataManager.getUserData(t.config.currentUserSettings.userId),t.activityNotify()},t.config.UPDATE_USER_DATA_TIME)},new t}();chatController.setup(mainConfig),chatController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
