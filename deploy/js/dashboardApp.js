var mainConfig={DOM:{USER_LIST_CSS_CLASS:"root-touchsoft-dashboard_users-list",CSS_CHAT_CONTAINS_BLOCK_STYLE:"root-touchsoft-dashboard_chat",CSS_SEND_MESSAGE_BUTTON_CLASS:"root-touchsoft-dashboard_send-button",CSS_CLOSE_CHAT_BUTTON_CLASS:"root-touchsoft-dashboard_close-chat",CSS_FILTER_INPUT_ID:"root-touchsoft-dashboard_filter-input",CSS_SORT_SELECT_ID:"root-touchsoft-dashboard_sort"},launcher:{pattern:"touchsoft_chat-launcher_",after:["chatTitle","chatUrl","chatClass","chatPositionSelect","allowMinimize","allowDrag","requireName","showTime","networkRadioXMR","networkRadioFetch","networkRadioLongPoll","scriptCode"],srcStart:"&ltscript src='https://rawgit.com/UnacceptableCondition/Homework_2/master/js/chat.js?",srcEnd:"'&gt&lt/script&gt"},userList:{USER_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user",USER_ID_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user-id",USER_INDICATOR_CSS_CLASS_OFFLINE:"root-touchsoft-dashboard_user-offline",USER_INDICATOR_CSS_CLASS_ONLINE:"root-touchsoft-dashboard_user-online"},chatSettings:{typeOfRequest:"longPoll"},currentUserSettings:{userId:null,userName:null},currentDashboardCondition:{filterBy:null,sortBy:null},interval:{UPDATE_USERS_TIME:5e3,ONLINE_INTERVAL:12e3},router:{ABOUT_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/about.html",LAUNCHER_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/chatLauncher.html",DASHBOARD_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/dashboard/dashboard.html",CONTENT_CLASS:"content",NAVIGATION_ACTIVE_CSS:"navigation-active"},messages:{CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root-touchsoft-dashboard_chat-messages",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message"},INVISIBLE_CLASS:"root-touchsoft-dashboard_invisible-element",DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",ADMIN_NAME:"Admin",CSS_CURRENT_INPUT_CLASS:"root-touchsoft-dashboard_textarea-for-message",LOCAL_STORAGE_NAME:"currentCondition",CSS_HAVE_NEW_MESSAGE_STYLE:"root-touchsoft-dashboard_user-have-new-message"},dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var n=s?"#":".";return t?document.querySelectorAll(n+e):document.querySelector(n+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},sorter=function(){function e(){}return e.prototype.quickSort=function(e,t,s,n){var r;return 1<e.length&&(t<(r=function(e,t,s,n){for(var r,a,o,i,u=e[Math.floor((s+t)/2)][n],c=t,l=s;c<=l;){for(;e[c][n]>u;)c++;for(;e[l][n]<u;)l--;c<=l&&(o=l,i=(r=e)[a=c],r[a]=r[o],r[o]=i,c++,l--)}return c}(e,t,s,n))-1&&this.quickSort(e,t,r-1,n),r<s&&this.quickSort(e,r,s,n)),e},new e}();function clearElementContent(e){for(var t=getElement(e);t.firstChild;)t.removeChild(t.firstChild)}var dataConnector=function(e){var t;function s(){}return s.prototype.setupDataBaseAPI=function(e){return"fetch"===e?{request:t.requestFetch,getNewConnectorAPI:t.setupDataBaseAPI}:"XHR"===e?{request:t.requestXMR,getNewConnectorAPI:t.setupDataBaseAPI}:{request:t.requestXMR,createLongPollConnection:t.longPoll,getNewConnectorAPI:t.setupDataBaseAPI}},s.prototype.requestFetch=function(e,t,s,n){return fetch(e,{headers:{Accept:n,"Content-Type":n},method:s,body:t}).then(function(e){return"application/json"===n?e.json():e.text()})},s.prototype.requestXMR=function(n,r,a,o){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(a,n,!0),s.setRequestHeader("Content-Type",o),s.onload=function(){e("application/json"===o?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},r?s.send(r):s.send()})},s.prototype.longPoll=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!0),t.setRequestHeader("Accept","text/event-stream"),t},(t=new s).setupDataBaseAPI(e.typeOfRequest)}(dataConnectorConfig),dataSource=function(o,t){var s,r="userList",n="usersMessages",a="usersSettings",i={isMinimize:!1,readLastMessage:!0};function u(){}function c(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.createLongPollConnection(s)}function l(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.request.bind(null,s,null,"GET","application/json")}return u.prototype.createRequestPath=function(e,t,s,n){var r=e;return null!==n&&(r+="/"+n),null!==t&&(r+="/"+t),null!==s&&(r+="/"+s),r+=".json"},u.prototype.getHTML=function(e){return o.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},u.prototype.setData=function(e,t,s,n,r){var a;return a="PUT"===t?this.createRequestPath(dataBaseUrl,n,s,e):this.createRequestPath(dataBaseUrl,n,null,e),o.request(a,JSON.stringify(r),t,"application/json")},u.prototype.addNewUserToDataSource=function(t,e){var s=new Date,n=this;i.userName=e,Object.keys(i).map(function(e){n.setData(a,"PUT",e,t,i[e])}),this.setData(r,"PUT",null,t,{lastOnline:s.getTime(),sendNewMessage:!1})},u.prototype.getDataSourceAPI=function(e){return e&&(t.chatSettings.typeOfRequest=e),u.prototype.getData="longPoll"===t.chatSettings.typeOfRequest?c:l,{usersAPI:{getUserList:s.getData.bind(s,r),getUserSettings:s.getData.bind(s,a),getUserMessages:s.getData.bind(s,n),getSettingField:s.getData.bind(s,a),sendMessage:s.setData.bind(s,n,"POST"),setSettingField:s.setData.bind(s,a,"PUT"),addNewUserToDataSource:s.addNewUserToDataSource.bind(s),updateLastOnline:s.setData.bind(s,r,"PUT","lastOnline"),updateSendNewMessageFlag:s.setData.bind(s,r,"PUT","sendNewMessage"),updateMessageIsReadField:s.setData.bind(s,n,"PUT")},commonAPI:{getHTML:s.getHTML.bind(s),getDataSourceAPI:s.getDataSourceAPI.bind(s)}}},(s=new u).getDataSourceAPI()}(dataConnector,mainConfig),eventEmitter=function(){function e(){this.events={}}return e.prototype.addSubscribe=function(e,t){var s=this;return this.events[e]||(this.events[e]=[]),this.events[e].push(t),function(){s.events[e]=s.events[e].filter(function(e){return e!==t})}},e.prototype.emit=function(e,t){var s=this.events[e];s&&s.forEach(function(e){e.call(null,t)})},new e}(),longPollResponseParser=function(){var s={message:/message/,userList:/lastOnline.{1,}sendNewMessage/,lastOnline:/"path":"\/\w{1,}\/lastOnline/,sendNewMessage:/"path":"\/\w{1,}\/sendNewMessage/,setting:/readLastMessage/,read:/read/},r=/event: put/,t=/data: null/,a=/","data":/,o=/"path":"\/-/,n=/"data":{"lastOnline":\d+,"sendNewMessage":/,i=!0,u=!0;function e(){}return e.prototype.getTypeOfChanges=function(t){return Object.keys(s).filter(function(e){if(s[e].test(t))return e})[0]},e.prototype.prepareDataBeforeJsonParse=function(e){return e[e.length-1].split(a)[1].trim().slice(0,-1)},e.prototype.parseUsersMessages=function(e,t){var s,n={},r={};return"read"===t?(n.id=e[e.length-1].split('data: {"path":"/').pop().split('/read","').shift(),n.value=e[e.length-1].split('/read","data":').pop().trim().slice(0,-1),n):o.test(e[e.length-1])?(s=e[e.length-1].split('data: {"path":"/').pop().split(a).shift(),n=JSON.parse(this.prepareDataBeforeJsonParse(e)),r[s]=n,r):this.getFirstData(e)},e.prototype.hasNewData=function(e){return!t.test(e[e.length-1])&&1<e.length},e.prototype.parseUserList=function(e,t){var s={};return i?(i=!1,this.getFirstData(e)):n.test(e[e.length-1])?(s[this.getUserId(e[e.length-1],null)]=this.getFirstData(e),s):(s=JSON.parse(e[e.length-1].split(a)[1].trim().slice(0,-1)),[this.getUserId(e[e.length-1],t),s])},e.prototype.getFirstData=function(e){try{return JSON.parse(this.prepareDataBeforeJsonParse(e))}catch(e){return null}},e.prototype.getUserId=function(e,t){return t?e.split(t).shift().split('data: {"path":"/').pop().slice(0,-1):e.split('data: {"path":"/').pop().split(",")[0].trim().slice(0,-1)},e.prototype.parseUsersSettings=function(e){return u?(u=!1,this.getFirstData(e)):[null,JSON.parse(e[e.length-1].split(a)[1].trim().slice(0,-1))]},e.prototype.parse=function(e){console.log(e);var t=e.split(r),s=this.getTypeOfChanges(t[t.length-1]),n={type:s};if(this.hasNewData(t)){if("message"===s||"read"===s)return n.object=this.parseUsersMessages(t,s),n;if("sendNewMessage"===s||"lastOnline"===s||"userList"===s)return n.object=this.parseUserList(t,s),n;if("setting"===s)return n.object=this.parseUsersSettings(t,s),n}},new e}(),viewFactory=function(n){function e(){}return e.prototype.createView=function(s,n,r){var a=this;return new Promise(function(e,t){s?(n&&a.includeViewCssToPage(a.createCSSLink(n,"stylesheet","text/css","touch-soft-chat-css")),e(a.includeViewHTMLToPage(s,r))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return n.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,n){var r=document.createElement("link");return n&&r.setAttribute("id",n),t&&r.setAttribute("rel",t),s&&r.setAttribute("type",s),r.setAttribute("href",e),r},new e}(dataSource),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.messages.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,n){var r=this.createMessageContainerDiv(n,s),a=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.messages.CSS_CHAT_MESSAGE_DATE]),o=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.messages.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.messages.CSS_CHAT_MESSAGE]);return r.appendChild(a),r.appendChild(o),r.appendChild(i),r},e.prototype.getMessageObjectsForMarkAsRead=function(){var e,t=[],s=u.ADMIN_NAME||u.currentUserSettings.userName,n=u.currentUserSettings.userId;for(e=this.messageList.length-1;0<=e;e--)if(this.messageList[e].sender!==s){if(this.messageList[e].read)break;t.push({userId:n,fieldName:this.messageList[e].id+"/read",fieldValue:!0}),this.messageList[e].read=!0}return t},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.messages.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.messages.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var n=document.createElement("div");return s.forEach(function(e){n.classList.add(e)}),n.innerHTML=e,n},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){0<this.getMessageObjectsForMarkAsRead().length&&(u.currentUserSettings.readLastMessage=!1),this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e)},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(i,s,n){function e(){var t=this;"longPoll"===i.chatSettings.typeOfRequest?(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){s.getUserCorrespondence(t),e()})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t;i.currentMessageConnection&&i.currentMessageConnection.abort();i.currentMessageConnection=dataSource.usersAPI.getUserMessages(e),i.currentMessageConnection.onreadystatechange=function(){3==this.readyState&&200==this.status&&(t=n.parse(this.responseText))&&s.emit(t.type,t.object)},i.currentMessageConnection.send()}.bind(this),e.prototype.updateMessageList=function(t){t&&Object.keys(t).map(function(e){t[e].id=e,messageListManager.addMessageToMessageList(t[e])});messageListManager.displayMessages()}.bind(this),s.addSubscribe("message",function(e){t.updateMessageList(e)}),s.addSubscribe("read",function(t){t&&messageListManager.messageList.forEach(function(e){(e.id=t.id)&&(e.read=t.value,messageListManager.displayMessages())})})):(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){return s.getUserCorrespondence(t).then(function(){e()})})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t=this;return dataSource.usersAPI.getUserMessages(e)().then(function(e){t.updateMessageList(e)})}.bind(this),e.prototype.updateMessageList=function(t){var e,s=[];t&&Object.keys(t).map(function(e){t[e].id=e,s.push(t[e])});messageListManager.displayMessages(),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}.bind(this))}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.clearMessageList=function(){messageListManager.messageList=[]},e.prototype.createNewUserProfileToDataBase=function(e,t){dataSource.usersAPI.addNewUserToDataSource(e,t)},e.prototype.saveSettingField=function(e){dataSource.usersAPI.setSettingField(e,i.currentUserSettings.userId,i.currentUserSettings[e])},e.prototype.updateUserOnline=function(e){var t=new Date;dataSource.usersAPI.updateLastOnline(e,t.getTime())},e.prototype.sendMessage=function(e){var t,s,n,r=this.getMessageFromInputElement(),a=(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),o={sender:e,message:r,read:!1,date:a,id:n};"longPoll"!==i.chatSettings.typeOfRequest&&(messageListManager.addMessageToMessageList(o),messageListManager.displayMessages()),this.saveMessageToDataSource(o)},e.prototype.getMessageFromInputElement=function(){var e=getElement(i.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&(console.log(e),e.forEach(function(e){dataSource.usersAPI.updateMessageIsReadField(e.fieldName,e.userId,e.fieldValue)}),i.currentUserSettings.readLastMessage=!0),messageListManager.displayMessages()},e.prototype.saveMessageToDataSource=function(e){e.sender===i.currentUserSettings.userName&&dataSource.usersAPI.updateSendNewMessageFlag(i.currentUserSettings.userId,!0),dataSource.usersAPI.sendMessage(null,i.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setSettingField(e.fieldName,e.userId,e.fieldValue)})},new e}(mainConfig,eventEmitter,longPollResponseParser),userListManager=function(a,e){function t(){this.uList=[]}return t.prototype.setup=function(){},t.prototype.createUserElement=function(e,t){var s=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div");return s.classList.add(a.userList.USER_ELEMENT_CSS_CLASS),n.classList.add(a.userList.USER_ID_ELEMENT_CSS_CLASS),n.innerHTML=e,t?r.classList.add(a.userList.USER_INDICATOR_CSS_CLASS_ONLINE):r.classList.add(a.userList.USER_INDICATOR_CSS_CLASS_OFFLINE),s.appendChild(n),s.appendChild(r),s},t.prototype.setUserList=function(e){this.uList=e},t.prototype.addUserToUsersArray=function(e,t,s){var n=this.userIsOnline(e.lastOnline);s.push({userId:t,userElement:this.createUserElement(t,n),online:n,visible:!0,sendNewMessage:e.sendNewMessage,readLastMessage:e.readLastMessage,lastOnline:e.lastOnline,userName:e.userName})},t.prototype.updateUserOnlineStatus=function(e,t){var s=this.getUserFromUserListById(e);this.uList[s].lastOnline=t,this.uList[s].online=this.userIsOnline(t),this.uList[s].userElement=this.createUserElement(e,this.userIsOnline(t))},t.prototype.getUserFromUserListById=function(t){var s=this,n=null;return Object.keys(s.uList).map(function(e){return s.uList[e].userId===t&&(n=e),!0}),n},t.prototype.userIsOnline=function(e){return(new Date).getTime()-e<=a.interval.ONLINE_INTERVAL},t.prototype.filterByName=function(){this.uList.forEach(function(e){e.visible=-1!==e.userId.indexOf(a.currentDashboardCondition.filterBy)})},t.prototype.sortUsersByField=function(){e.quickSort(this.uList,0,this.uList.length-1,a.currentDashboardCondition.sortBy)},t.prototype.clearUserList=function(){this.uList=[]},t.prototype.displayUsers=function(){!function(e){var t=getElement(e);for(;t.firstChild;)t.removeChild(t.firstChild)}(a.DOM.USER_LIST_CSS_CLASS),this.uList.forEach(function(e){e.visible&&getElement(a.DOM.USER_LIST_CSS_CLASS).appendChild(e.userElement)})},new t}(mainConfig,sorter),dashboard=function(s,n,r,a,e,o){var t=[];function i(){this.setupEventEmitter()}return i.prototype.startApp=function(){r.setup(s),this.getUserList(),this.setupCommonListenerFunctions(),this.setupIntervalFunctions()},i.prototype.setupEventEmitter=function(){var n=this;o.addSubscribe("userList",function(t){var s=[];t instanceof Array&&(t=t[1]),Object.keys(t).map(function(e){a.addUserToUsersArray(t[e],e,s)}),a.uList=a.uList.concat(s);var e=n.getCurrentUserIdFromLocalStorage();n.localSettingsSetup(e),n.setupUserListDOM()}),o.addSubscribe("lastOnline",function(e){var t=e[0],s=e[1];a.updateUserOnlineStatus(t,s)}),o.addSubscribe("sendNewMessage",function(e){var t=a.getUserFromUserListById(e[0]);a.uList[t].sendNewMessage=e[1],n.toggleNewMessageIndicatorToUser()})},i.prototype.saveCurrentConditionToLocalStorage=function(){var e=JSON.stringify({filter:s.currentDashboardCondition.filterBy,sort:s.currentDashboardCondition.sortBy,currentUserId:s.currentUserSettings.userId});localStorage.setItem(s.LOCAL_STORAGE_NAME,e)},i.prototype.getCurrentUserIdFromLocalStorage=function(){var e=localStorage.getItem(s.LOCAL_STORAGE_NAME),t=null;return e&&(t=JSON.parse(e),s.currentDashboardCondition.filterBy=t.filter,s.currentDashboardCondition.sortBy=t.sort,s.currentUserSettings.userId=t.currentUserId),t},i.prototype.localSettingsSetup=function(e){e&&(e.filter&&(getElement(s.DOM.CSS_FILTER_INPUT_ID).value=e.filter,this.filter()),e.sort&&(getElement(s.DOM.CSS_SORT_SELECT_ID).value=e.sort,this.sort()),e.currentUserId&&(s.currentUserSettings.userId=e.currentUserId,this.startConversationWithUser(s.currentUserSettings.userId)))},i.prototype.filter=function(){s.currentDashboardCondition.filterBy=getElement(s.DOM.CSS_FILTER_INPUT_ID).value,this.saveCurrentConditionToLocalStorage(),a.filterByName(s.currentDashboardCondition.filterBy),a.displayUsers()},i.prototype.sort=function(){s.currentDashboardCondition.sortBy=getElement(s.DOM.CSS_SORT_SELECT_ID).value,this.saveCurrentConditionToLocalStorage(),a.sortUsersByField(),a.displayUsers()},i.prototype.setupUsersListeners=function(){var t=this;Array.from(s.users).forEach(function(e){e.addEventListener("click",t.userListener.bind(t,e.firstChild.innerText))})},i.prototype.setupUserListDOM=function(){a.displayUsers(),this.getAcessToUsersList(),this.toggleNewMessageIndicatorToUser(),this.setupUsersListeners()},i.prototype.getAcessToUsersList=function(){s.users=getElement(s.userList.USER_ELEMENT_CSS_CLASS,!0)},i.prototype.getUserList=function(){var e,t=n.usersAPI.getUserList(null);t.onreadystatechange=function(){this.status&&(e=longPollResponseParser.parse(this.responseText))&&o.emit(e.type,e.object)},t.send(),s.currentUserListConnection=t},i.prototype.userListener=function(e){this.startConversationWithUser(e),this.markMessageFromUserAsRead(e)},i.prototype.startConversationWithUser=function(e){var t=this;s.currentUserSettings.userId=e,r.clearMessageList(),r.getUserData(e).then(function(){getElement(s.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.remove(s.INVISIBLE_CLASS),t.saveCurrentConditionToLocalStorage()}),n.usersAPI.updateSendNewMessageFlag(e,!1)},i.prototype.updateUserMessagesAndDisplayIt=function(){r.getUserData(s.currentUserSettings.userId),this.markMessageFromUserAsRead(s.currentUserSettings.userId)},i.prototype.setupCommonListenerFunctions=function(){var e=this;getElement(s.DOM.CSS_SEND_MESSAGE_BUTTON_CLASS).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,s.ADMIN_NAME)),getElement(s.DOM.CSS_CLOSE_CHAT_BUTTON_CLASS).addEventListener("click",e.closeConversation.bind(e)),getElement(s.DOM.CSS_FILTER_INPUT_ID).addEventListener("input",e.filter.bind(e)),getElement(s.DOM.CSS_SORT_SELECT_ID).addEventListener("input",e.sort.bind(e)),document.addEventListener("mousemove",userDataManager.setMessageAsRead.bind(userDataManager))},i.prototype.markMessageFromUserAsRead=function(e){var t=a.getUserFromUserListById(e);a.uList[t].sendNewMessage=!1,r.saveUserSettingsToDataSource([{userId:e,fieldName:"sendNewMessage",fieldValue:!1}]),this.toggleNewMessageIndicatorToUser()},i.prototype.closeConversation=function(){getElement(s.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.add(s.INVISIBLE_CLASS),s.currentUserSettings.userId=null,s.currentMessageConnection.abort(),this.saveCurrentConditionToLocalStorage()},i.prototype.toggleNewMessageIndicatorToUser=function(){var t;Object.keys(a.uList).map(function(e){return t=a.uList[e].userElement.getElementsByClassName(s.CSS_HAVE_NEW_MESSAGE_STYLE)[0],a.uList[e].sendNewMessage&&!t&&((t=document.createElement("div")).classList.add(s.CSS_HAVE_NEW_MESSAGE_STYLE),a.uList[e].userElement.appendChild(t)),!a.uList[e].sendNewMessage&&t&&a.uList[e].userElement.removeChild(t),!0})},i.prototype.setupIntervalFunctions=function(){var e=this;t.push=setInterval(function(){Object.keys(a.uList).map(function(e){a.updateUserOnlineStatus(a.uList[e].userId,a.uList[e].lastOnline)}),e.setupUserListDOM()},s.interval.UPDATE_USERS_TIME)},i.prototype.closeApp=function(){t.forEach(function(e){clearInterval(e)}),userDataManager.clearMessageList(),a.clearUserList(),s.currentMessageConnection&&s.currentMessageConnection.abort(),s.currentUserListConnection.abort()},new i}(mainConfig,dataSource,userDataManager,userListManager,0,eventEmitter),launcher=function(s){var o={},n={chatTitle:{typeOfValue:"value"},chatUrl:{typeOfValue:"value"},chatClass:{typeOfValue:"value"},chatPositionSelect:{typeOfValue:"value"},allowMinimize:{typeOfValue:"checked"},allowDrag:{typeOfValue:"checked"},showTime:{typeOfValue:"checked"},requireName:{typeOfValue:"checked"},networkRadioXMR:{typeOfValue:"value",true:"XHR"},networkRadioLongPoll:{typeOfValue:"value",true:"longPoll"},networkRadioFetch:{typeOfValue:"value",true:"fetch"}};function e(){}return e.prototype.getDataFromElement=function(s){var n,r="",a=this;return Object.keys(o).map(function(e,t){return s[e]&&(0<t?"radio"===(n=o[e].getAttribute("type"))?o[e].checked&&(r+="'&typeOfRequest='"+a.getElementValue(e,n)):r+="'&"+e+"='"+a.getElementValue(e,n):r+=e+"='"+a.getElementValue(e)),!0}),r.length<1&&(r=null),r},e.prototype.getElementValue=function(e){return o[e][n[e].typeOfValue]},e.prototype.startApp=function(){var t=this;s.launcher.after.map(function(e){return o[e]=getElement(s.launcher.pattern+e,!1,!0),o[e].addEventListener("input",function(){var e=s.launcher.srcStart+this.getDataFromElement(n);e+=s.launcher.srcEnd,o.scriptCode.innerHTML=e}.bind(t)),!0})},e.prototype.closeApp=function(){o={}},new e}(mainConfig),about=function(){function e(){}return e.prototype.startApp=function(){},e.prototype.closeApp=function(){},new e}(),mainController=function(s){var n={dashboard:s.router.DASHBOARD_HTML_PATH,configuration:s.router.LAUNCHER_HTML_PATH,about:s.router.ABOUT_HTML_PATH},r={dashboard:dashboard.closeApp.bind(dashboard),configuration:launcher.closeApp.bind(launcher),about:about.closeApp.bind(about)},a={dashboard:dashboard.startApp.bind(dashboard),configuration:launcher.startApp.bind(launcher),about:about.startApp.bind(about)};function e(){}return e.prototype.startApp=function(){var t=this;window.addEventListener("hashchange",function(e){t.handleUrl(e.newURL)}),t.handleUrl(window.location.href+"#dashboard")},e.prototype.handleUrl=function(e){var t;-1!==e.indexOf("#")&&(t=e.split("#").pop(),this.closePreviousPage(t),document.querySelectorAll("a."+s.router.NAVIGATION_ACTIVE_CSS).forEach(function(e){e.classList.remove(s.router.NAVIGATION_ACTIVE_CSS)}),document.querySelectorAll('a[href="#'+t+'"]').forEach(function(e){e.classList.add(s.router.NAVIGATION_ACTIVE_CSS)}),clearElementContent(s.router.CONTENT_CLASS),viewFactory.createView(n[t],null,s.router.CONTENT_CLASS).then(function(){a[t]()}))},e.prototype.closePreviousPage=function(t){Object.keys(r).map(function(e){return e!==t&&r[e](),!0})},new e}(mainConfig);mainController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
