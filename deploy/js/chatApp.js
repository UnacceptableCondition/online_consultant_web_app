var mainConfig={DOM:{MAIN_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft",AUTHORIZATION_MENU_CLASS:"root_chat_for_touchsoft_input-name-block",USER_NAME_INPUT_CLASS:"root_chat_for_touchsoft_input-name",SEND_USER_NAME_BUTTON:"root_chat_for_touchsoft_input-name-button",SEND_MESSAGE_MIN_SIZE_BUTTON:"root_chat_for_touchsoft_minimize-style__send-button",SEND_MESSAGE_FULL_SIZE_BUTTON:"root_chat_for_touchsoft__bottom_send-button",CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft__textarea",CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style__message-input",TITLE_BLOCK_CLASS:"root_chat_for_touchsoft-title",CHANGE_STYLE_BUTTON_MAX_SIZE:"root_chat_for_touchsoft__top_minimize-button",MINIMIZE_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style",SET_MIN_STYLE_BUTTON:"root_chat_for_touchsoft_minimize-style__max-button",SET_MAX_STYLE_BUTTON:"root_chat_for_touchsoft__top_minimize-button"},DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",CSS_CURRENT_INPUT_CLASS:"root_chat_for_touchsoft__textarea",currentUserSettings:{userId:null,userName:null,isMinimize:!1,readLastMessage:!1,sendNewMessage:!1,lastOnline:(new Date).getTime()},chatSettings:{allowDrag:!1,position:"right",chatTitle:"TouchSoft Chat",allowMinimize:!0,outerCssClass:"touchsoft-chat_main-block",typeOfRequest:"fetch",requireName:!0},INVISIBLE_CLASS:"invisible",CHAT_POSITION_RIGHT:"root_chat_for_touchsoft_right-position",CHAT_POSITION_LEFT:"root_chat_for_touchsoft_left-position",LOCAL_STORAGE_NAME:"userID_touchsoft_chat",DEFAULT_USER_NAME:"guest",DEFAULT_CSS_CLASS_FOR_CHAT:"touchsoft-chat_main-block",DEFAULT_CHAT_TITLE:"TouchSoft Chat",HTML_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/chatApplication/chat.html",CSS_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/css/chat.css",messages:{CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root_chat_for_touchsoft__top_messages",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message"},DISPLAY_MESSAGE_DATE:!0,DISPLAY_SENDER_NAME:!0,DISPLAY_MESSAGE:!0,UPDATE_USER_DATA_TIME:5e3};function parseSrcForParameters(e){var s={};return e.substr(e.indexOf("?")+1).split("&").forEach(function(e){var t=e.split("=");t[1]=t[1].replace(/'/g,""),s[t[0]]=t[1]}),s}function setOuterChatSettingToConfig(t,s){Object.keys(t).map(function(e){return s.chatSettings[e]=t[e],!0})}setOuterChatSettingToConfig(parseSrcForParameters(document.currentScript.getAttribute("src")),mainConfig);var dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var n=s?"#":".";return t?document.querySelectorAll(n+e):document.querySelector(n+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},dataConnector=function(e){var t;function s(){}return s.prototype.setupDataBaseAPI=function(e){return"fetch"===e?{request:t.requestFetch,getNewConnectorAPI:t.setupDataBaseAPI}:"XHR"===e?{request:t.requestXMR,getNewConnectorAPI:t.setupDataBaseAPI}:{request:t.requestXMR,createLongPollConnection:t.longPoll,getNewConnectorAPI:t.setupDataBaseAPI}},s.prototype.requestFetch=function(e,t,s,n){return fetch(e,{headers:{Accept:n,"Content-Type":n},method:s,body:t}).then(function(e){return"application/json"===n?e.json():e.text()})},s.prototype.requestXMR=function(n,a,r,o){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(r,n,!0),s.setRequestHeader("Content-Type",o),s.onload=function(){e("application/json"===o?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},a?s.send(a):s.send()})},s.prototype.longPoll=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!0),t.setRequestHeader("Accept","text/event-stream"),t},(t=new s).setupDataBaseAPI(e.typeOfRequest)}(dataConnectorConfig),dataSource=function(o,t){var s,a="userList",n="usersMessages",r="usersSettings",i={isMinimize:!1,readLastMessage:!0};function u(){}function c(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.createLongPollConnection(s)}function g(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.request.bind(null,s,null,"GET","application/json")}return u.prototype.createRequestPath=function(e,t,s,n){var a=e;return null!==n&&(a+="/"+n),null!==t&&(a+="/"+t),null!==s&&(a+="/"+s),a+=".json"},u.prototype.getHTML=function(e){return o.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},u.prototype.setData=function(e,t,s,n,a){var r;return r="PUT"===t?this.createRequestPath(dataBaseUrl,n,s,e):this.createRequestPath(dataBaseUrl,n,null,e),o.request(r,JSON.stringify(a),t,"application/json")},u.prototype.addNewUserToDataSource=function(t,e){var s=new Date,n=this;i.userName=e,Object.keys(i).map(function(e){return n.setData(r,"PUT",e,t,i[e]),!0}),this.setData(a,"PUT",null,t,{lastOnline:s.getTime(),sendNewMessage:!1})},u.prototype.getDataSourceAPI=function(e){return e&&(t.chatSettings.typeOfRequest=e),u.prototype.getData="longPoll"===t.chatSettings.typeOfRequest?c:g,{usersAPI:{getUserList:s.getData.bind(s,a),getUserSettings:s.getData.bind(s,r),getUserMessages:s.getData.bind(s,n),getSettingField:s.getData.bind(s,r),sendMessage:s.setData.bind(s,n,"POST"),setSettingField:s.setData.bind(s,r,"PUT"),addNewUserToDataSource:s.addNewUserToDataSource.bind(s),updateLastOnline:s.setData.bind(s,a,"PUT","lastOnline"),updateSendNewMessageFlag:s.setData.bind(s,a,"PUT","sendNewMessage"),updateMessageIsReadField:s.setData.bind(s,n,"PUT")},commonAPI:{getHTML:s.getHTML.bind(s),getDataSourceAPI:s.getDataSourceAPI.bind(s)}}},(s=new u).getDataSourceAPI()}(dataConnector,mainConfig),eventEmitter=function(){function e(){this.events={}}return e.prototype.addSubscribe=function(e,t){var s=this;return this.events[e]||(this.events[e]=[]),this.events[e].push(t),function(){s.events[e]=s.events[e].filter(function(e){return e!==t})}},e.prototype.emit=function(e,t){var s=this.events[e];s&&s.forEach(function(e){e.call(null,t)})},new e}(),longPollResponseParser=function(){var s={message:/message/,userList:/lastOnline.{1,}sendNewMessage/,lastOnline:/"path":"\/\w{1,}\/lastOnline/,sendNewMessage:/"path":"\/\w{1,}\/sendNewMessage/,setting:/readLastMessage/,read:/read/},a=/event: put/,t=/data: null/,r=/","data":/,o=/"path":"\/-/,n=/"data":{"lastOnline":\d+,"sendNewMessage":/,i=!0,u=!0;function e(){}return e.prototype.getTypeOfChanges=function(t){return Object.keys(s).filter(function(e){if(s[e].test(t))return e})[0]},e.prototype.prepareDataBeforeJsonParse=function(e){return e[e.length-1].split(r)[1].trim().slice(0,-1)},e.prototype.parseUsersMessages=function(e,t){var s,n={},a={};return"read"===t?(n.id=e[e.length-1].split('data: {"path":"/').pop().split('/read","').shift(),n.value=e[e.length-1].split('/read","data":').pop().trim().slice(0,-1),n):o.test(e[e.length-1])?(s=e[e.length-1].split('data: {"path":"/').pop().split(r).shift(),n=JSON.parse(this.prepareDataBeforeJsonParse(e)),a[s]=n,a):this.getFirstData(e)},e.prototype.hasNewData=function(e){return!t.test(e[e.length-1])&&1<e.length},e.prototype.parseUserList=function(e,t){var s={};return i?(i=!1,this.getFirstData(e)):n.test(e[e.length-1])?(s[this.getUserId(e[e.length-1],null)]=this.getFirstData(e),s):(s=JSON.parse(e[e.length-1].split(r)[1].trim().slice(0,-1)),[this.getUserId(e[e.length-1],t),s])},e.prototype.getFirstData=function(e){try{return JSON.parse(this.prepareDataBeforeJsonParse(e))}catch(e){return null}},e.prototype.getUserId=function(e,t){return t?e.split(t).shift().split('data: {"path":"/').pop().slice(0,-1):e.split('data: {"path":"/').pop().split(",")[0].trim().slice(0,-1)},e.prototype.parseUsersSettings=function(e){return u?(u=!1,this.getFirstData(e)):[null,JSON.parse(e[e.length-1].split(r)[1].trim().slice(0,-1))]},e.prototype.parse=function(e){console.log(e);var t=e.split(a),s=this.getTypeOfChanges(t[t.length-1]),n={type:s};if(this.hasNewData(t)){if("message"===s||"read"===s)return n.object=this.parseUsersMessages(t,s),n;if("sendNewMessage"===s||"lastOnline"===s||"userList"===s)return n.object=this.parseUserList(t,s),n;if("setting"===s)return n.object=this.parseUsersSettings(t,s),n}},new e}(),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.messages.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,n){var a=this.createMessageContainerDiv(n,s),r=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.messages.CSS_CHAT_MESSAGE_DATE]),o=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.messages.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.messages.CSS_CHAT_MESSAGE]);return a.appendChild(r),a.appendChild(o),a.appendChild(i),a},e.prototype.getMessageObjectsForMarkAsRead=function(){var e,t=[],s=u.ADMIN_NAME||u.currentUserSettings.userName,n=u.currentUserSettings.userId;for(e=this.messageList.length-1;0<=e;e--)if(this.messageList[e].sender!==s){if(this.messageList[e].read)break;t.push({userId:n,fieldName:this.messageList[e].id+"/read",fieldValue:!0}),this.messageList[e].read=!0}return t},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.messages.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.messages.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var n=document.createElement("div");return s.forEach(function(e){n.classList.add(e)}),n.innerHTML=e,n},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){0<this.getMessageObjectsForMarkAsRead().length&&(u.currentUserSettings.readLastMessage=!1),this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e)},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(i,s,n){function e(){var t=this;"longPoll"===i.chatSettings.typeOfRequest?(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){s.getUserCorrespondence(t),e()})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t;i.currentMessageConnection&&i.currentMessageConnection.abort(),i.currentMessageConnection=dataSource.usersAPI.getUserMessages(e),i.currentMessageConnection.onreadystatechange=function(){3===this.readyState&&200===this.status&&(t=n.parse(this.responseText))&&s.emit(t.type,t.object)},i.currentMessageConnection.send()}.bind(this),e.prototype.updateMessageList=function(t){t&&Object.keys(t).map(function(e){return t[e].id=e,messageListManager.addMessageToMessageList(t[e]),!0}),messageListManager.displayMessages()}.bind(this),s.addSubscribe("message",function(e){t.updateMessageList(e)}),s.addSubscribe("read",function(t){t&&messageListManager.messageList.forEach(function(e){(e.id=t.id)&&(e.read=t.value,messageListManager.displayMessages())})})):(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){return s.getUserCorrespondence(t).then(function(){e()})})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t=this;return dataSource.usersAPI.getUserMessages(e)().then(function(e){t.updateMessageList(e)})}.bind(this),e.prototype.updateMessageList=function(t){var e,s=[];t&&Object.keys(t).map(function(e){return t[e].id=e,s.push(t[e]),!0}),messageListManager.displayMessages(),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}.bind(this))}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.clearMessageList=function(){messageListManager.messageList=[]},e.prototype.createNewUserProfileToDataBase=function(e,t){dataSource.usersAPI.addNewUserToDataSource(e,t)},e.prototype.saveSettingField=function(e){dataSource.usersAPI.setSettingField(e,i.currentUserSettings.userId,i.currentUserSettings[e])},e.prototype.updateUserOnline=function(e){var t=new Date;dataSource.usersAPI.updateLastOnline(e,t.getTime())},e.prototype.sendMessage=function(e){var t,s,n,a=this.getMessageFromInputElement(),r=(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),o={sender:e,message:a,read:!1,date:r,id:n};"longPoll"!==i.chatSettings.typeOfRequest&&(messageListManager.addMessageToMessageList(o),messageListManager.displayMessages()),this.saveMessageToDataSource(o)},e.prototype.getMessageFromInputElement=function(){var e=getElement(i.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&(console.log(e),e.forEach(function(e){dataSource.usersAPI.updateMessageIsReadField(e.fieldName,e.userId,e.fieldValue)}),i.currentUserSettings.readLastMessage=!0),messageListManager.displayMessages()},e.prototype.saveMessageToDataSource=function(e){e.sender===i.currentUserSettings.userName&&dataSource.usersAPI.updateSendNewMessageFlag(i.currentUserSettings.userId,!0),dataSource.usersAPI.sendMessage(null,i.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setSettingField(e.fieldName,e.userId,e.fieldValue)})},new e}(mainConfig,eventEmitter,longPollResponseParser),viewFactory=function(n){function e(){}return e.prototype.createView=function(s,n,a){var r=this;return new Promise(function(e,t){s?(n&&r.includeViewCssToPage(r.createCSSLink(n,"stylesheet","text/css","touch-soft-chat-css")),e(r.includeViewHTMLToPage(s,a))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return n.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,n){var a=document.createElement("link");return n&&a.setAttribute("id",n),t&&a.setAttribute("rel",t),s&&a.setAttribute("type",s),a.setAttribute("href",e),a},new e}(dataSource),chatCustomizer=function(t){function e(){}return e.prototype.setupOuterChatSettings=function(){this.allowMinimize(),this.setPositionOfMainBlock(),this.setTitle(),this.setMainCssClass(),this.allowDragNDrop()},e.prototype.allowDragNDrop=function(){var e=getElement(t.DOM.TITLE_BLOCK_CLASS),c=getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS);"false"!==t.chatSettings.allowDrag&&e.addEventListener("mousedown",function(e){var t,s,n,a,r,o,i;function u(e){c.style.left=e.pageX-s+"px",c.style.top=e.pageY-n+"px"}t={top:(i=c.getBoundingClientRect()).top+window.pageYOffset,left:i.left+window.pageXOffset},s=e.pageX-t.left,n=e.pageY-t.top,a=function(e){u(e)},r=function(){document.removeEventListener("mousemove",a),document.removeEventListener("mouseup",r)},o=function(){return!1},u(e),c.style.zIndex=1e3,document.addEventListener("mousemove",a),document.addEventListener("mouseup",r),c.addEventListener("dragstart",o)})},e.prototype.setPositionOfMainBlock=function(){"right"===t.chatSettings.position?getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(t.CHAT_POSITION_RIGHT):getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(t.CHAT_POSITION_LEFT)},e.prototype.setTitle=function(){t.chatSettings.chatTitle.length<1&&(t.chatSettings.chatTitle=t.DEFAULT_CHAT_TITLE),getElement(t.DOM.TITLE_BLOCK_CLASS).innerHTML=t.chatSettings.chatTitle},e.prototype.allowMinimize=function(){"false"===t.chatSettings.allowMinimize&&getElement(t.DOM.CHANGE_STYLE_BUTTON_MAX_SIZE).classList.add(t.INVISIBLE_CLASS)},e.prototype.setMainCssClass=function(){t.chatSettings.outerCssClass.length<1&&(t.chatSettings.outerCssClass=t.DEFAULT_CSS_CLASS_FOR_CHAT),getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).parentNode.classList.add(t.chatSettings.outerCssClass)},new e}(mainConfig),chatController=function(t){function s(e){return e+(new Date).getTime()}function e(){}return e.prototype.startApp=function(){var e=this;return this.setupChatView().then(function(){e.authorization(t.chatSettings.requireName),e.setupChatBasicListeners()}).then(function(){t.currentUserSettings.userId?userDataManager.getUserData(t.currentUserSettings.userId).then(function(){e.setupChatStyle(),e.setupIntervalFunctions(),e.setupChatSendListeners()}):e.setupChatStyle()}).then(function(){chatCustomizer.setupOuterChatSettings()})},e.prototype.authorization=function(e){userDataManager.setup(),this.getConditionFromLocalStorage()?this.setupChatCondition():"false"===e?(t.currentUserSettings.userId=s(t.DEFAULT_USER_NAME),t.currentUserSettings.userName=t.DEFAULT_USER_NAME,this.saveConditionToLocalStorage(),userDataManager.createNewUserProfileToDataBase(t.currentUserSettings.userId,t.currentUserSettings.userName)):this.toggleAuthorizationMenuVisible()},e.prototype.toggleAuthorizationMenuVisible=function(){getElement(t.DOM.AUTHORIZATION_MENU_CLASS).classList.toggle(t.INVISIBLE_CLASS)},e.prototype.getUserNameFromInput=function(){t.currentUserSettings.userName=getElement(t.DOM.USER_NAME_INPUT_CLASS).value,t.currentUserSettings.userId=s(t.currentUserSettings.userName),t.chatSettings.isMinimize=!1,userDataManager.createNewUserProfileToDataBase(t.currentUserSettings.userId,t.currentUserSettings.userName),this.saveConditionToLocalStorage(),this.toggleAuthorizationMenuVisible(),this.setupIntervalFunctions(),this.setupChatSendListeners(),userDataManager.getUserData(t.currentUserSettings.userId)},e.prototype.setupChatSendListeners=function(){getElement(t.DOM.SEND_MESSAGE_FULL_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,t.currentUserSettings.userName)),getElement(t.DOM.SEND_MESSAGE_MIN_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,t.currentUserSettings.userName)),document.addEventListener("mousemove",userDataManager.setMessageAsRead.bind(userDataManager))},e.prototype.setupChatBasicListeners=function(){var e=this;getElement(t.DOM.SEND_USER_NAME_BUTTON).addEventListener("click",e.getUserNameFromInput.bind(e)),getElement(t.DOM.SET_MAX_STYLE_BUTTON).addEventListener("click",e.minMaxStyleToggle.bind(e)),getElement(t.DOM.SET_MIN_STYLE_BUTTON).addEventListener("click",e.minMaxStyleToggle.bind(e))},e.prototype.setupChatView=function(){return viewFactory.createView(t.HTML_FILE_PATH,t.CSS_FILE_PATH,null)},e.prototype.setupChatStyle=function(){t.currentUserSettings.isMinimize?getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS):getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),this.changeInputAndSendButtonClass()},e.prototype.minMaxStyleToggle=function(){getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),t.currentUserSettings.isMinimize=!1===t.currentUserSettings.isMinimize,this.changeInputAndSendButtonClass(),this.saveConditionToLocalStorage()},e.prototype.activityNotify=function(){userDataManager.updateUserOnline(t.currentUserSettings.userId)},e.prototype.changeInputAndSendButtonClass=function(){t.currentUserSettings.isMinimize?t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS},e.prototype.setupChatCondition=function(){var e=this.getConditionFromLocalStorage();t.currentUserSettings.userId=this.getConditionFromLocalStorage().userId,t.currentUserSettings.userName=this.getConditionFromLocalStorage().userName,t.currentUserSettings.isMinimize=e.isMinimize},e.prototype.saveConditionToLocalStorage=function(){var e=JSON.stringify({userId:t.currentUserSettings.userId,isMinimize:t.currentUserSettings.isMinimize,userName:t.currentUserSettings.userName});localStorage.setItem(t.LOCAL_STORAGE_NAME,e)},e.prototype.getConditionFromLocalStorage=function(){var e=localStorage.getItem(t.LOCAL_STORAGE_NAME);return!!e&&JSON.parse(e)},e.prototype.setupIntervalFunctions=function(){var e=this;setInterval(function(){"longPoll"!==t.chatSettings.typeOfRequest&&userDataManager.getUserData(t.currentUserSettings.userId),e.activityNotify()},t.UPDATE_USER_DATA_TIME)},new e}(mainConfig);chatController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
