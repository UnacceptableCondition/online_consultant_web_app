var mainConfig={DOM:{USER_LIST_CSS_CLASS:"root-touchsoft-dashboard_users-list",CSS_CHAT_CONTAINS_BLOCK_STYLE:"root-touchsoft-dashboard_chat",CSS_SEND_MESSAGE_BUTTON_CLASS:"root-touchsoft-dashboard_send-button",CSS_CLOSE_CHAT_BUTTON_CLASS:"root-touchsoft-dashboard_close-chat",CSS_FILTER_INPUT_ID:"root-touchsoft-dashboard_filter-input",CSS_SORT_SELECT_ID:"root-touchsoft-dashboard_sort"},launcher:{pattern:"touchsoft_chat-launcher_",after:["chatTitle","chatUrl","chatClass","chatPositionSelect","allowMinimize","allowDrag","requireName","showTime","networkRadioXMR","networkRadioFetch","scriptCode"],srcStart:"&ltscript src='https://rawgit.com/UnacceptableCondition/Homework_2/master/js/chat.js?title='",srcEnd:"'&gt&lt/script&gt"},ADMIN_NAME:"Admin",CSS_CHAT_MESSAGES_CONTAINER:"root-touchsoft-dashboard_chat-messages",USER_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user",USER_ID_ELEMENT_CSS_CLASS:"root-touchsoft-dashboard_user-id",USER_INDICATOR_CSS_CLASS_OFFLINE:"root-touchsoft-dashboard_user-offline",USER_INDICATOR_CSS_CLASS_ONLINE:"root-touchsoft-dashboard_user-online",CSS_CURRENT_INPUT_CLASS:"root-touchsoft-dashboard_textarea-for-message",LOCAL_STORAGE_NAME:"currentCondition",CSS_HAVE_NEW_MESSAGE_STYLE:"root-touchsoft-dashboard_user-have-new-message",chatSettings:{typeOfRequest:"fetch"},currentUserSettings:{userId:null,userName:null},currentDashboardCondition:{filterBy:null,sortBy:null},INVISIBLE_CLASS:"root-touchsoft-dashboard_invisible-element",CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",UPDATE_USERS_TIME:5e3,ONLINE_INTERVAL:12e4,ABOUT_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/dev/html/dashboard/about.html",LAUNCHER_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/dev/html/dashboard/chatLauncher.html",DASHBOARD_HTML_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/dev/html/dashboard/dashboard.html",CONTENT_CLASS:"content",NAVIGATION_ACTIVE_CSS:"navigation-active"},dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var n=s?"#":".";return t?document.querySelectorAll(n+e):document.querySelector(n+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},sorter=function(){function e(){}return e.prototype.quickSort=function(e,t,s,n){var r;return 1<e.length&&(t<(r=function(e,t,s,n){for(var r,o,i,a,u=e[Math.floor((s+t)/2)][n],c=t,d=s;c<=d;){for(;e[c][n]>u;)c++;for(;e[d][n]<u;)d--;c<=d&&(i=d,a=(r=e)[o=c],r[o]=r[i],r[i]=a,c++,d--)}return c}(e,t,s,n))-1&&this.quickSort(e,t,r-1,n),r<s&&this.quickSort(e,r,s,n)),e},new e}();function clearElementContent(e){for(var t=getElement(e);t.firstChild;)t.removeChild(t.firstChild)}var dataConnector=function(e){var t;function s(){}return s.prototype.requestFetch=function(e,t,s,n){return fetch(e,{headers:{Accept:n,"Content-Type":n},method:s,body:t}).then(function(e){return"application/json"===n?e.json():e.text()})},s.prototype.requestXMR=function(n,r,o,i){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(o,n,!0),s.setRequestHeader("Content-Type",i),s.onload=function(){e("application/json"===i?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},r?s.send(r):s.send()})},t=new s,"fetch"===e.typeOfRequest?{request:t.requestFetch}:{request:t.requestXMR}}(dataConnectorConfig),dataSource=function(r){var e;function t(){r=r}return t.prototype.createRequestPath=function(e,t,s){var n=e+"/users";return null!==t&&(n+="/"+t),null!==s&&(n+="/"+s),n+=".json"},t.prototype.getHTML=function(e){return r.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},t.prototype.getUserData=function(e){var s={},t=this.createRequestPath(dataBaseUrl,e,null);return r.request(t,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},t.prototype.getSettingField=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,t);return r.request(s,null,"GET","application/json")},t.prototype.setSettingField=function(e,t,s){var n=this.createRequestPath(dataBaseUrl,e,t);return r.request(n,JSON.stringify(s),"PUT","application/json")},t.prototype.sendMessage=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,"messages"),n=JSON.stringify({date:t.date,message:t.message,title:"message",user:t.sender,itIsRead:t.read});return r.request(s,n,"POST","application/json")},t.prototype.getAllUsers=function(){var s={},e=this.createRequestPath(dataBaseUrl,null,null);return r.request(e,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},{usersAPI:{getUserData:(e=new t).getUserData.bind(e),sendMessage:e.sendMessage.bind(e),setField:e.setSettingField.bind(e),getField:e.getSettingField.bind(e),getAllUsers:e.getAllUsers.bind(e)},commonAPI:{getHTML:e.getHTML.bind(e)}}}(dataConnector),viewFactory=function(n){function e(){}return e.prototype.createView=function(s,n,r){var o=this;return new Promise(function(e,t){s?(n&&o.includeViewCssToPage(o.createCSSLink(n,"stylesheet","text/css","touch-soft-chat-css")),e(o.includeViewHTMLToPage(s,r))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return n.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,n){var r=document.createElement("link");return n&&r.setAttribute("id",n),t&&r.setAttribute("rel",t),s&&r.setAttribute("type",s),r.setAttribute("href",e),r},new e}(dataSource),messageListManager=function(){function e(){}return e.prototype.setup=function(e){this.config=e,this.messageList=[],this.cDOM={messagesBlock:getElement(this.config.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,n){var r=this.createMessageContainerDiv(n,s),o=this.createDivForMessageBlock(t,this.config.DISPLAY_MESSAGE_DATE,[this.config.CSS_CHAT_MESSAGE_DATE]),i=this.createDivForMessageBlock(s,this.config.DISPLAY_SENDER_NAME,[this.config.CSS_CHAT_MESSAGE_SENDER_NAME]),a=this.createDivForMessageBlock(e,this.config.DISPLAY_MESSAGE,[this.config.CSS_CHAT_MESSAGE]);return r.appendChild(o),r.appendChild(i),r.appendChild(a),r},e.prototype.getMessageObjectsForMarkAsRead=function(e,t){var s,n=[],r=e||this.config.currentUserSettings.userName,o=t||this.config.currentUserSettings.userId;for(s=this.messageList.length-1;0<=s;s--)if(this.messageList[s].sender!==r){if(this.messageList[s].read)break;n.push({userId:o,fieldName:"messages/"+this.messageList[s].id+"/itIsRead",fieldValue:!0})}return n},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return e||this.config.currentUserSettings.userName===t||s.classList.add(this.config.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var n=document.createElement("div");return s.forEach(function(e){n.classList.add(e)}),n.innerHTML=e,n},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e),this.displayMessages()},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(),userDataManager=function(){function e(){}function r(e,t,s,n,r){return{sender:s,message:e,read:n,date:t,id:r}}return e.prototype.setup=function(e){this.config=e,messageListManager.setup(e)},e.prototype.getUserData=function(e){var n=this;return dataSource.usersAPI.getUserData(e).then(function(t){if(n.config.currentUserSettings.userName=t.userName,n.config.currentUserSettings.isMinimize=t.isMinimize,t.messages){var e,s=[];Object.keys(t.messages).map(function(e){s.push(r(t.messages[e].message,t.messages[e].date,t.messages[e].user,t.messages[e].itIsRead,e))}),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}})},e.prototype.createNewUserProfileToDataBase=function(){var t=this;Object.keys(this.config.currentUserSettings).map(function(e){t.saveSettingField(e)})},e.prototype.saveSettingField=function(e){this.saveUserSettingsToDataSource([{userId:this.config.currentUserSettings.userId,fieldName:e,fieldValue:this.config.currentUserSettings[e]}])},e.prototype.sendMessage=function(e){var t,s,n=r(this.getMessageFromInputElement(),(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),e,!1);messageListManager.addMessageToMessageList(n),this.saveMessageToDataSource(n)},e.prototype.getMessageFromInputElement=function(){var e=getElement(this.config.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&this.saveUserSettingsToDataSource(e)},e.prototype.saveMessageToDataSource=function(e){if(e.sender===this.config.currentUserSettings.userName){console.log(e.sender);var t=[{userId:this.config.currentUserSettings.userId,fieldName:"sendNewMessage",fieldValue:!0}];this.saveUserSettingsToDataSource(t)}dataSource.usersAPI.sendMessage(this.config.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setField(e.userId,e.fieldName,e.fieldValue)})},new e}(),userListManager=function(o,e){function t(){this.uList={}}return t.prototype.setup=function(){},t.prototype.createUserElement=function(e,t){var s=document.createElement("div"),n=document.createElement("div"),r=document.createElement("div");return s.classList.add(o.USER_ELEMENT_CSS_CLASS),n.classList.add(o.USER_ID_ELEMENT_CSS_CLASS),n.innerHTML=e,t?r.classList.add(o.USER_INDICATOR_CSS_CLASS_ONLINE):r.classList.add(o.USER_INDICATOR_CSS_CLASS_OFFLINE),s.appendChild(n),s.appendChild(r),s},t.prototype.setUserList=function(e){this.uList=e},t.prototype.addUserToUsersArray=function(e,t,s){var n=this.userIsOnline(e.lastOnline);s.push({userId:t,userElement:this.createUserElement(t,n),online:n,visible:!0,sendNewMessage:e.sendNewMessage,readLastMessage:e.readLastMessage,lastOnline:e.lastOnline,userName:e.userName})},t.prototype.getUserFromUserListById=function(t){var s=this,n=null;return Object.keys(s.uList).map(function(e){return s.uList[e].userId===t&&(n=e),!0}),n},t.prototype.userIsOnline=function(e){return(new Date).getTime()-e<=o.ONLINE_INTERVAL},t.prototype.filterByName=function(){this.uList.forEach(function(e){e.visible=-1!==e.userId.indexOf(o.currentDashboardCondition.filterBy)})},t.prototype.sortUsersByField=function(){e.quickSort(this.uList,0,this.uList.length-1,o.currentDashboardCondition.sortBy)},t.prototype.displayUsers=function(){!function(e){var t=getElement(e);for(;t.firstChild;)t.removeChild(t.firstChild)}(o.DOM.USER_LIST_CSS_CLASS),this.uList.forEach(function(e){e.visible&&getElement(o.DOM.USER_LIST_CSS_CLASS).appendChild(e.userElement)})},new t}(mainConfig,sorter),dashboard=function(r,e,s,o,t){var n=[];function i(){}return i.prototype.startApp=function(){o.setup(r,t),s.setup(r),this.setupUsersListBlock(),this.setupCommonListenerFunctions(),this.setupIntervalFunctions()},i.prototype.saveCurrentConditionToLocalStorage=function(){var e=JSON.stringify({filter:r.currentDashboardCondition.filterBy,sort:r.currentDashboardCondition.sortBy,currentUserId:r.currentUserSettings.userId});localStorage.setItem(r.LOCAL_STORAGE_NAME,e)},i.prototype.getCurrentUserIdFromLocalStorage=function(){var e=localStorage.getItem(r.LOCAL_STORAGE_NAME),t=null;return e&&(t=JSON.parse(e),r.currentDashboardCondition.filterBy=t.filter,r.currentDashboardCondition.sortBy=t.sort,r.currentUserSettings.userId=t.currentUserId),t},i.prototype.localSettingsSetup=function(e){e&&(e.filter&&(getElement(r.DOM.CSS_FILTER_INPUT_ID).value=e.filter,this.filter()),e.sort&&(getElement(r.DOM.CSS_SORT_SELECT_ID).value=e.sort,this.sort()),e.currentUserId&&(r.currentUserSettings.userId=e.currentUserId,this.startConversationWithUser(r.currentUserSettings.userId)))},i.prototype.filter=function(){r.currentDashboardCondition.filterBy=getElement(r.DOM.CSS_FILTER_INPUT_ID).value,this.saveCurrentConditionToLocalStorage(),o.filterByName(r.currentDashboardCondition.filterBy),o.displayUsers()},i.prototype.sort=function(){r.currentDashboardCondition.sortBy=getElement(r.DOM.CSS_SORT_SELECT_ID).value,this.saveCurrentConditionToLocalStorage(),o.sortUsersByField(),o.displayUsers()},i.prototype.setupUsersListBlock=function(e){this.setupUsersListeners(e)},i.prototype.setupUsersListeners=function(e){var t=this;return this.getAcessToUsersList(e).then(function(){Array.from(r.users).forEach(function(e){e.addEventListener("click",t.userListener.bind(t,e.firstChild.innerText))})})},i.prototype.getAcessToUsersList=function(e){return this.displayUsersList(e).then(function(){r.users=getElement(r.USER_ELEMENT_CSS_CLASS,!0)})},i.prototype.displayUsersList=function(e){var t=this;return this.setUsersListToUsersModule(e).then(function(){o.displayUsers()}).then(function(){t.toggleNewMessageIndicatorToUser()})},i.prototype.setUsersListToUsersModule=function(t){var s=this;return t?new Promise(function(e){e(o.setUserList(t))}):this.getUserList().then(function(e){o.setUserList(e)}).then(function(){var e=s.getCurrentUserIdFromLocalStorage();s.localSettingsSetup(e)})},i.prototype.getUserList=function(){var s=[];return e.usersAPI.getAllUsers().then(function(t){Object.keys(t).map(function(e){return o.addUserToUsersArray(t[e],e,s),!0})}).then(function(){return s})},i.prototype.userListener=function(e){this.startConversationWithUser(e),this.markMessageFromUserAsRead(e)},i.prototype.startConversationWithUser=function(e){var t=this;r.currentUserSettings.userId=e,s.getUserData(e).then(function(){getElement(r.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.remove(r.INVISIBLE_CLASS),t.saveCurrentConditionToLocalStorage()})},i.prototype.updateUsers=function(){var s=this,n=[];e.usersAPI.getAllUsers().then(function(t){Object.keys(t).map(function(e){return o.addUserToUsersArray(t[e],e,n),r.currentUserSettings.userId&&s.updateUserMessagesAndDisplayIt(),!0})}).then(function(){o.uList=n,r.currentDashboardCondition.filterBy&&s.filter(),r.currentDashboardCondition.sortBy&&s.sort(),s.setupUsersListeners(n)})},i.prototype.updateUserMessagesAndDisplayIt=function(){s.getUserData(r.currentUserSettings.userId),this.markMessageFromUserAsRead(r.currentUserSettings.userId)},i.prototype.setupCommonListenerFunctions=function(){var e=this;getElement(r.DOM.CSS_SEND_MESSAGE_BUTTON_CLASS).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,r.ADMIN_NAME)),getElement(r.DOM.CSS_CLOSE_CHAT_BUTTON_CLASS).addEventListener("click",e.closeConversation.bind(e)),getElement(r.DOM.CSS_FILTER_INPUT_ID).addEventListener("input",e.filter.bind(e)),getElement(r.DOM.CSS_SORT_SELECT_ID).addEventListener("input",e.sort.bind(e))},i.prototype.markMessageFromUserAsRead=function(e){var t=o.getUserFromUserListById(e);o.uList[t].sendNewMessage=!1,s.saveUserSettingsToDataSource([{userId:e,fieldName:"sendNewMessage",fieldValue:!1}]),this.toggleNewMessageIndicatorToUser()},i.prototype.closeConversation=function(){getElement(r.DOM.CSS_CHAT_CONTAINS_BLOCK_STYLE).classList.add(r.INVISIBLE_CLASS),r.currentUserSettings.userId=null,this.saveCurrentConditionToLocalStorage()},i.prototype.toggleNewMessageIndicatorToUser=function(){var t;Object.keys(o.uList).map(function(e){return t=o.uList[e].userElement.getElementsByClassName(r.CSS_HAVE_NEW_MESSAGE_STYLE)[0],o.uList[e].sendNewMessage&&!t&&((t=document.createElement("div")).classList.add(r.CSS_HAVE_NEW_MESSAGE_STYLE),o.uList[e].userElement.appendChild(t)),!o.uList[e].sendNewMessage&&t&&o.uList[e].userElement.removeChild(t),!0})},i.prototype.setupIntervalFunctions=function(){var e=this;n.push(setInterval(function(){e.updateUsers()},r.UPDATE_USERS_TIME))},i.prototype.closeApp=function(){n.forEach(function(e){clearInterval(e)})},new i}(mainConfig,dataSource,userDataManager,userListManager,sorter),launcher=function(e){var t={};function s(){}function n(){var e=mainConfig.launcher.srcStart+t.chatTitle.value+"'&chatUrl='"+t.chatUrl.value+"'&cssClass='"+t.chatClass.value+"'&position='"+t.chatPositionSelect.value+"'&allowMinimize='"+t.allowMinimize.checked+"'&allowDrag='"+t.allowDrag.checked+"'&showDateTime='"+t.showTime.checked+"'&requireName='"+t.requireName.checked+"'&requests='";t.networkRadioXMR.checked?e+="XHR'":e+="fetch'",e+=mainConfig.launcher.srcEnd,t.scriptCode.innerHTML=e}return s.prototype.startApp=function(){mainConfig.launcher.after.map(function(e){t[e]=getElement(mainConfig.launcher.pattern+e,!1,!0),t[e].addEventListener("input",n)})},s.prototype.closeApp=function(){t={}},new s}(),about=function(){function e(){}return e.prototype.startApp=function(){},e.prototype.closeApp=function(){},new e}(),matchesHtmlPath={dashboard:mainConfig.DASHBOARD_HTML_PATH,configuration:mainConfig.LAUNCHER_HTML_PATH,about:mainConfig.ABOUT_HTML_PATH},closeFunctions={dashboard:dashboard.closeApp.bind(dashboard),configuration:launcher.closeApp.bind(launcher),about:about.closeApp.bind(about)},startFunctions={dashboard:dashboard.startApp.bind(dashboard),configuration:launcher.startApp.bind(launcher),about:about.startApp.bind(about)};function handleUrl(e){var t;-1!==e.indexOf("#")&&(closePreviousPage(t=e.split("#").pop()),document.querySelectorAll("a."+mainConfig.NAVIGATION_ACTIVE_CSS).forEach(function(e){e.classList.remove(mainConfig.NAVIGATION_ACTIVE_CSS)}),document.querySelectorAll('a[href="#'+t+'"]').forEach(function(e){e.classList.add(mainConfig.NAVIGATION_ACTIVE_CSS)}),clearElementContent(mainConfig.CONTENT_CLASS),viewFactory.createView(matchesHtmlPath[t],null,mainConfig.CONTENT_CLASS).then(function(){startFunctions[t]()}))}function closePreviousPage(t){Object.keys(closeFunctions).map(function(e){e!==t&&closeFunctions[e]()})}window.addEventListener("hashchange",function(e){handleUrl(e.newURL)}),handleUrl(window.location.href+"#dashboard");
//# sourceMappingURL=data:application/json;charset=utf8;base64,
