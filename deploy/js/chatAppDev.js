var mainConfig={DOM:{MAIN_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft",AUTHORIZATION_MENU_CLASS:"root_chat_for_touchsoft_input-name-block",USER_NAME_INPUT_CLASS:"root_chat_for_touchsoft_input-name",SEND_USER_NAME_BUTTON:"root_chat_for_touchsoft_input-name-button",SEND_MESSAGE_MIN_SIZE_BUTTON:"root_chat_for_touchsoft_minimize-style__send-button",SEND_MESSAGE_FULL_SIZE_BUTTON:"root_chat_for_touchsoft__bottom_send-button",CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft__textarea",CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style__message-input",TITLE_BLOCK_CLASS:"root_chat_for_touchsoft-title",CHANGE_STYLE_BUTTON_MAX_SIZE:"root_chat_for_touchsoft__top_minimize-button",MINIMIZE_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style",SET_MIN_STYLE_BUTTON:"root_chat_for_touchsoft_minimize-style__max-button",SET_MAX_STYLE_BUTTON:"root_chat_for_touchsoft__top_minimize-button"},DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",CSS_CURRENT_INPUT_CLASS:"root_chat_for_touchsoft__textarea",currentUserSettings:{userId:null,userName:null,isMinimize:!1,readLastMessage:!1,sendNewMessage:!1,lastOnline:(new Date).getTime()},chatSettings:{allowDrag:!1,position:"right",title:"TouchSoft Chat",allowMinimize:!0,outerCssClass:"touchsoft-chat_main-block",typeOfRequest:"fetch",requireName:!0},INVISIBLE_CLASS:"invisible",CHAT_POSITION_RIGHT:"root_chat_for_touchsoft_right-position",CHAT_POSITION_LEFT:"root_chat_for_touchsoft_left-position",LOCAL_STORAGE_NAME:"userID_touchsoft_chat",DEFAULT_USER_NAME:"guest",DEFAULT_CSS_CLASS_FOR_CHAT:"touchsoft-chat_main-block",DEFAULT_CHAT_TITLE:"TouchSoft Chat",HTML_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/chatApplication/chat.html",CSS_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/css/chat.css",CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root_chat_for_touchsoft__top_messages",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",DISPLAY_MESSAGE_DATE:!0,DISPLAY_SENDER_NAME:!0,DISPLAY_MESSAGE:!0,UPDATE_USER_DATA_TIME:5e3};function parseSrcForParameters(e){var s={};return e.substr(e.indexOf("?")+1).split("&").forEach(function(e){var t=e.split("=");t[1]=t[1].replace(/'/g,""),s[t[0]]=t[1]}),s}function setOuterChatSettingToConfig(t,s){Object.keys(t).map(function(e){s.chatSettings[e]=t[e]})}setOuterChatSettingToConfig(parseSrcForParameters(document.currentScript.getAttribute("src")),mainConfig);var dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var n=s?"#":".";return t?document.querySelectorAll(n+e):document.querySelector(n+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},dataConnector=function(e){var t;function s(){}return s.prototype.requestFetch=function(e,t,s,n){return fetch(e,{headers:{Accept:n,"Content-Type":n},method:s,body:t}).then(function(e){return"application/json"===n?e.json():e.text()})},s.prototype.requestXMR=function(n,o,r,a){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(r,n,!0),s.setRequestHeader("Content-Type",a),s.onload=function(){e("application/json"===a?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},o?s.send(o):s.send()})},t=new s,"fetch"===e.typeOfRequest?{request:t.requestFetch}:{request:t.requestXMR}}(dataConnectorConfig),dataSource=function(o){var e;function t(){o=o}return t.prototype.createRequestPath=function(e,t,s){var n=e+"/users";return null!==t&&(n+="/"+t),null!==s&&(n+="/"+s),n+=".json"},t.prototype.getHTML=function(e){return o.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},t.prototype.getUserData=function(e){var s={},t=this.createRequestPath(dataBaseUrl,e,null);return o.request(t,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},t.prototype.getSettingField=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,t);return o.request(s,null,"GET","application/json")},t.prototype.setSettingField=function(e,t,s){var n=this.createRequestPath(dataBaseUrl,e,t);return o.request(n,JSON.stringify(s),"PUT","application/json")},t.prototype.sendMessage=function(e,t){var s=this.createRequestPath(dataBaseUrl,e,"messages"),n=JSON.stringify({date:t.date,message:t.message,title:"message",user:t.sender,itIsRead:t.read});return o.request(s,n,"POST","application/json")},t.prototype.getAllUsers=function(){var s={},e=this.createRequestPath(dataBaseUrl,null,null);return o.request(e,null,"GET","application/json").then(function(t){t&&Object.keys(t).map(function(e){return s[e]=t[e],!0})}).then(function(){return s})},{usersAPI:{getUserData:(e=new t).getUserData.bind(e),sendMessage:e.sendMessage.bind(e),setField:e.setSettingField.bind(e),getField:e.getSettingField.bind(e),getAllUsers:e.getAllUsers.bind(e)},commonAPI:{getHTML:e.getHTML.bind(e)}}}(dataConnector),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,n){var o=this.createMessageContainerDiv(n,s),r=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.CSS_CHAT_MESSAGE_DATE]),a=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.CSS_CHAT_MESSAGE]);return o.appendChild(r),o.appendChild(a),o.appendChild(i),o},e.prototype.getMessageObjectsForMarkAsRead=function(e,t){var s,n=[],o=e||u.currentUserSettings.userName,r=t||u.currentUserSettings.userId;for(s=this.messageList.length-1;0<=s;s--)if(this.messageList[s].sender!==o){if(this.messageList[s].read)break;n.push({userId:r,fieldName:"messages/"+this.messageList[s].id+"/itIsRead",fieldValue:!0})}return n},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var n=document.createElement("div");return s.forEach(function(e){n.classList.add(e)}),n.innerHTML=e,n},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e),this.displayMessages()},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(n){function e(){}function o(e,t,s,n,o){return{sender:s,message:e,read:n,date:t,id:o}}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.getUserData=function(e){return dataSource.usersAPI.getUserData(e).then(function(t){if(n.currentUserSettings.userName=t.userName,n.currentUserSettings.isMinimize=t.isMinimize,t.messages){var e,s=[];Object.keys(t.messages).map(function(e){s.push(o(t.messages[e].message,t.messages[e].date,t.messages[e].user,t.messages[e].itIsRead,e))}),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}})},e.prototype.createNewUserProfileToDataBase=function(){var t=this;Object.keys(n.currentUserSettings).map(function(e){t.saveSettingField(e)})},e.prototype.saveSettingField=function(e){this.saveUserSettingsToDataSource([{userId:n.currentUserSettings.userId,fieldName:e,fieldValue:n.currentUserSettings[e]}])},e.prototype.sendMessage=function(e){var t,s,n=o(this.getMessageFromInputElement(),(t=new Date,s=1===t.getMinutes().toString().length?"0"+t.getMinutes():t.getMinutes(),t.getHours().toString().concat(":",s)),e,!1);messageListManager.addMessageToMessageList(n),this.saveMessageToDataSource(n)},e.prototype.getMessageFromInputElement=function(){var e=getElement(n.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&this.saveUserSettingsToDataSource(e)},e.prototype.saveMessageToDataSource=function(e){if(e.sender===n.currentUserSettings.userName){console.log(e.sender);var t=[{userId:n.currentUserSettings.userId,fieldName:"sendNewMessage",fieldValue:!0}];this.saveUserSettingsToDataSource(t)}dataSource.usersAPI.sendMessage(n.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setField(e.userId,e.fieldName,e.fieldValue)})},new e}(mainConfig),viewFactory=function(n){function e(){}return e.prototype.createView=function(e,t,s){return new Promise(function(e,t){e("DEV")})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return n.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,n){var o=document.createElement("link");return n&&o.setAttribute("id",n),t&&o.setAttribute("rel",t),s&&o.setAttribute("type",s),o.setAttribute("href",e),o},new e}(dataSource),chatCustomizer=function(){function e(){}return e.prototype.setup=function(e){this.config=e},e.prototype.setupOuterChatSettings=function(){this.allowMinimize(),this.setPositionOfMainBlock(),this.setTitle(),this.allowDragNDrop()},e.prototype.allowDragNDrop=function(){var e=getElement(this.config.DOM.TITLE_BLOCK_CLASS),c=getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS);"false"!==this.config.chatSettings.allowDrag&&e.addEventListener("mousedown",function(e){var t,s,n,o,r,a,i;function u(e){c.style.left=e.pageX-s+"px",c.style.top=e.pageY-n+"px"}t={top:(i=c.getBoundingClientRect()).top+window.pageYOffset,left:i.left+window.pageXOffset},s=e.pageX-t.left,n=e.pageY-t.top,o=function(e){u(e)},r=function(){document.removeEventListener("mousemove",o),document.removeEventListener("mouseup",r)},a=function(){return!1},u(e),c.style.zIndex=1e3,document.addEventListener("mousemove",o),document.addEventListener("mouseup",r),c.addEventListener("dragstart",a)})},e.prototype.setPositionOfMainBlock=function(){"right"===this.config.chatSettings.position?getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(this.config.CHAT_POSITION_RIGHT):getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(this.config.CHAT_POSITION_LEFT)},e.prototype.setTitle=function(){this.config.chatSettings.title.length<1&&(this.config.chatSettings.title=this.config.DEFAULT_CHAT_TITLE),getElement(this.config.DOM.TITLE_BLOCK_CLASS).innerHTML=this.config.chatSettings.title},e.prototype.allowMinimize=function(){"false"===this.config.chatSettings.allowMinimize&&getElement(this.config.DOM.CHANGE_STYLE_BUTTON_MAX_SIZE).classList.add(this.config.INVISIBLE_CLASS)},e.prototype.setMainCssClass=function(){console.log(this.config.chatSettings.outerCssClass),this.config.chatSettings.outerCssClass.length<1&&(this.config.chatSettings.outerCssClass=this.config.DEFAULT_CSS_CLASS_FOR_CHAT),getElement(this.config.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS.parentNode).classList.add(this.config.chatSettings.outerCssClass)},new e}(),chatController=function(t){function s(e){return e+(new Date).getTime()}function e(){}return e.prototype.startApp=function(){var e=this;return this.setupChatView().then(function(){e.authorization(t.chatSettings.requireName),e.setupChatBasicListeners()}).then(function(){t.currentUserSettings.userId?userDataManager.getUserData(t.currentUserSettings.userId).then(function(){e.setupChatStyle(),e.setupIntervalFunctions(),e.setupChatSendListeners()}):e.setupChatStyle()}).then(function(){chatCustomizer.setup(t),chatCustomizer.setupOuterChatSettings()})},e.prototype.authorization=function(e){userDataManager.setup(t),t.currentUserSettings.userId=this.getUserIdFromLocalStorage(),t.currentUserSettings.userId||("false"===e?(t.currentUserSettings.userId=s(t.DEFAULT_USER_NAME),t.currentUserSettings.userName=t.DEFAULT_USER_NAME,this.saveUserIdToLocalStorage(t.currentUserSettings.userId),userDataManager.createNewUserProfileToDataBase()):this.toggleAuthorizationMenuVisible())},e.prototype.toggleAuthorizationMenuVisible=function(){getElement(t.DOM.AUTHORIZATION_MENU_CLASS).classList.toggle(t.INVISIBLE_CLASS)},e.prototype.getUserNameFromInput=function(){t.currentUserSettings.userName=getElement(t.DOM.USER_NAME_INPUT_CLASS).value,t.currentUserSettings.userId=s(t.currentUserSettings.userName),userDataManager.setup(t),userDataManager.createNewUserProfileToDataBase(),this.saveUserIdToLocalStorage(t.currentUserSettings.userId),this.toggleAuthorizationMenuVisible(),this.setupIntervalFunctions(),this.setupChatSendListeners()},e.prototype.setupChatSendListeners=function(){getElement(t.DOM.SEND_MESSAGE_FULL_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,t.currentUserSettings.userName)),getElement(t.DOM.SEND_MESSAGE_MIN_SIZE_BUTTON).addEventListener("click",userDataManager.sendMessage.bind(userDataManager,t.currentUserSettings.userName)),document.addEventListener("mousemove",userDataManager.setMessageAsRead.bind(userDataManager))},e.prototype.setupChatBasicListeners=function(){var e=this;getElement(t.DOM.SEND_USER_NAME_BUTTON).addEventListener("click",e.getUserNameFromInput.bind(e)),getElement(t.DOM.SET_MAX_STYLE_BUTTON).addEventListener("click",e.minMaxStyleToggle.bind(e)),getElement(t.DOM.SET_MIN_STYLE_BUTTON).addEventListener("click",e.minMaxStyleToggle.bind(e))},e.prototype.setupChatView=function(){return viewFactory.createView(t.HTML_FILE_PATH,t.CSS_FILE_PATH,null)},e.prototype.setupChatStyle=function(){t.currentUserSettings.isMinimize?getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS):getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS)},e.prototype.minMaxStyleToggle=function(){getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),t.currentUserSettings.isMinimize=!1===t.currentUserSettings.isMinimize,this.changeInputAndSendButtonClass(),userDataManager.saveSettingField("isMinimize")},e.prototype.activityNotify=function(){var e=new Date;t.currentUserSettings.lastOnline=e.getTime(),userDataManager.saveSettingField("lastOnline")},e.prototype.changeInputAndSendButtonClass=function(){t.currentUserSettings.isMinimize?t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS},e.prototype.saveUserIdToLocalStorage=function(e){localStorage.setItem(t.LOCAL_STORAGE_NAME,e)},e.prototype.getUserIdFromLocalStorage=function(){return localStorage.getItem(t.LOCAL_STORAGE_NAME)},e.prototype.setupIntervalFunctions=function(){var e=this;setInterval(function(){userDataManager.getUserData(t.currentUserSettings.userId),e.activityNotify()},t.UPDATE_USER_DATA_TIME)},new e}(mainConfig);chatController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
