var mainConfig={DOM:{MAIN_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft",AUTHORIZATION_MENU_CLASS:"root_chat_for_touchsoft_input-name-block",USER_NAME_INPUT_CLASS:"root_chat_for_touchsoft_input-name",SEND_USER_NAME_BUTTON:"root_chat_for_touchsoft_input-name-button",SEND_MESSAGE_MIN_SIZE_BUTTON:"root_chat_for_touchsoft_minimize-style__send-button",SEND_MESSAGE_FULL_SIZE_BUTTON:"root_chat_for_touchsoft__bottom_send-button",CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft__textarea",CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style__message-input",TITLE_BLOCK_CLASS:"root_chat_for_touchsoft-title",CHANGE_STYLE_BUTTON_MAX_SIZE:"root_chat_for_touchsoft__top_minimize-button",MINIMIZE_STYLE_CHAT_BLOCK_CLASS:"root_chat_for_touchsoft_minimize-style",SET_MIN_STYLE_BUTTON:"root_chat_for_touchsoft_minimize-style__max-button",SET_MAX_STYLE_BUTTON:"root_chat_for_touchsoft__top_minimize-button",CHAT_QUESTION_CSS:"root_chat_for_touchsoft_information-enter-name"},DATA_BASE_URL:"https://onlineconsultantwebapp.firebaseio.com",CSS_CURRENT_INPUT_CLASS:"root_chat_for_touchsoft__textarea",currentUserSettings:{userId:null,userName:null,isMinimize:!1,readLastMessage:!1,sendNewMessage:!1,lastOnline:(new Date).getTime()},chatSettings:{allowDrag:!1,position:"right",chatTitle:"TouchSoft Chat",allowMinimize:!0,outerCssClass:"touchsoft-chat_main-block",typeOfRequest:"fetch",requireName:!0},INVISIBLE_CLASS:"invisible",CHAT_POSITION_RIGHT:"root_chat_for_touchsoft_right-position",CHAT_POSITION_LEFT:"root_chat_for_touchsoft_left-position",LOCAL_STORAGE_NAME:"userID_touchsoft_chat_new",DEFAULT_USER_NAME:"guest",DEFAULT_CSS_CLASS_FOR_CHAT:"touchsoft-chat_main-block",DEFAULT_CHAT_TITLE:"TouchSoft Chat",HTML_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/html/chatApplication/chat.html",CSS_FILE_PATH:"https://rawgit.com/UnacceptableCondition/online_consultant_web_app/master/app/css/chat.css",messages:{CSS_USER_NOT_READ_MESSAGES:"root-touchsoft-dashboard_message-not-read",CSS_CHAT_MESSAGES_CONTAINER:"root_chat_for_touchsoft__top_messages",CSS_MESSAGE_CONTAINER:"root-touchsoft-dashboard_chat-message-elements",CSS_CHAT_MESSAGE_SENDER_NAME:"root-touchsoft-dashboard_chat-message-sender",CSS_CHAT_MESSAGE_DATE:"root-touchsoft-dashboard_chat-message-date",CSS_CHAT_MESSAGE:"root-touchsoft-dashboard_chat-message"},DISPLAY_MESSAGE_DATE:!0,DISPLAY_SENDER_NAME:!0,DISPLAY_MESSAGE:!0,UPDATE_USER_DATA_TIME:5e3,COMMAND_PATH_PREFIX:"https://onlineconsultantwebapp.firebaseio.com/usersSettings/"};function parseSrcForParameters(e){var s={};return e.substr(e.indexOf("?")+1).split("&").forEach(function(e){var t=e.split("=");t[1]=t[1].replace(/'/g,""),s[t[0]]=t[1]}),s}function setOuterChatSettingToConfig(t,s){Object.keys(t).map(function(e){return s.chatSettings[e]=t[e],!0})}setOuterChatSettingToConfig(parseSrcForParameters(document.currentScript.getAttribute("src")),mainConfig);var dataBaseUrl=mainConfig.DATA_BASE_URL,getElement=function(e,t,s){var n=s?"#":".";return t?document.querySelectorAll(n+e):document.querySelector(n+e)},dataConnectorConfig={typeOfRequest:mainConfig.chatSettings.typeOfRequest},dataConnector=function(e){var t;function s(){}return s.prototype.setupDataBaseAPI=function(e){return"fetch"===e?{request:t.requestFetch,getNewConnectorAPI:t.setupDataBaseAPI}:"XHR"===e?{request:t.requestXMR,getNewConnectorAPI:t.setupDataBaseAPI}:{request:t.requestXMR,createLongPollConnection:t.longPoll,getNewConnectorAPI:t.setupDataBaseAPI}},s.prototype.requestFetch=function(e,t,s,n){return fetch(e,{headers:{Accept:n,"Content-Type":n},method:s,body:t}).then(function(e){return"application/json"===n?e.json():e.text()})},s.prototype.requestXMR=function(n,a,r,o){return new Promise(function(e,t){var s=new XMLHttpRequest;s.open(r,n,!0),s.setRequestHeader("Content-Type",o),s.onload=function(){e("application/json"===o?JSON.parse(s.response):s.response)},s.onerror=function(){t(s.statusText)},a?s.send(a):s.send()})},s.prototype.longPoll=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!0),t.setRequestHeader("Accept","text/event-stream"),t},(t=new s).setupDataBaseAPI(e.typeOfRequest)}(dataConnectorConfig),dataSource=function(o,t){var s,a="userList",n="usersMessages",r="usersSettings",i={isMinimize:!1,readLastMessage:!0};function u(){}function c(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.createLongPollConnection(s)}function p(e,t){var s=this.createRequestPath(dataBaseUrl,t,null,e);return o.request.bind(null,s,null,"GET","application/json")}return u.prototype.createRequestPath=function(e,t,s,n){var a=e;return null!==n&&(a+="/"+n),null!==t&&(a+="/"+t),null!==s&&(a+="/"+s),a+=".json"},u.prototype.getHTML=function(e){return o.request(e,null,"GET","application/x-www-form-urlencoded; charset=UTF-8")},u.prototype.setData=function(e,t,s,n,a){var r;return r="PUT"===t?this.createRequestPath(dataBaseUrl,n,s,e):this.createRequestPath(dataBaseUrl,n,null,e),o.request(r,JSON.stringify(a),t,"application/json")},u.prototype.addNewUserToDataSource=function(t,e){var s=new Date,n=this;i.userName=e,Object.keys(i).map(function(e){return n.setData(r,"PUT",e,t,i[e]),!0}),this.setData(a,"PUT",null,t,{lastOnline:s.getTime(),sendNewMessage:!1})},u.prototype.getDataSourceAPI=function(e){return e&&(t.chatSettings.typeOfRequest=e),u.prototype.getData="longPoll"===t.chatSettings.typeOfRequest?c:p,{usersAPI:{getUserList:s.getData.bind(s,a),getUserSettings:s.getData.bind(s,r),getUserMessages:s.getData.bind(s,n),getSettingField:s.getData.bind(s,r),sendMessage:s.setData.bind(s,n,"POST"),setSettingField:s.setData.bind(s,r,"PUT"),addNewUserToDataSource:s.addNewUserToDataSource.bind(s),updateLastOnline:s.setData.bind(s,a,"PUT","lastOnline"),updateSendNewMessageFlag:s.setData.bind(s,a,"PUT","sendNewMessage"),updateMessageIsReadField:s.setData.bind(s,n,"PUT")},commonAPI:{getHTML:s.getHTML.bind(s),getDataSourceAPI:s.getDataSourceAPI.bind(s)}}},(s=new u).getDataSourceAPI()}(dataConnector,mainConfig),eventEmitter=function(){function e(){this.events={}}return e.prototype.addSubscribe=function(e,t){var s=this;return this.events[e]||(this.events[e]=[]),this.events[e].push(t),function(){s.events[e]=s.events[e].filter(function(e){return e!==t})}},e.prototype.emit=function(e,t){var s=this.events[e];s&&s.forEach(function(e){e.call(null,t)})},new e}(),longPollResponseParser=function(){var s={message:/message/,userList:/lastOnline.{1,}sendNewMessage/,lastOnline:/"path":"\/\w{1,}\/lastOnline/,sendNewMessage:/"path":"\/\w{1,}\/sendNewMessage/,setting:/readLastMessage/,read:/read/,getIp:/getIp/,askQuestion:/askQuestion/},a=/event: put/,t=/data: null/,r=/","data":/,o=/"path":"\/-/,n=/"data":{"lastOnline":\d+,"sendNewMessage":/,i=/data: {"path":"\/","data":{"getIp":/,u=/data: {"path":"\/","data":{"askQuestion":/,c=/data: {"path":"\/askQuestion","data":/,p=!0;function e(){}return e.prototype.getTypeOfChanges=function(t){return Object.keys(s).filter(function(e){return!!s[e].test(t)&&e})[0]},e.prototype.prepareDataBeforeJsonParse=function(e){return e[e.length-1].split(r)[1].trim().slice(0,-1)},e.prototype.parseUsersMessages=function(e,t){var s,n={},a={};return"read"===t?(n.id=e[e.length-1].split('data: {"path":"/').pop().split('/read","').shift(),n.value=e[e.length-1].split('/read","data":').pop().trim().slice(0,-1),n):o.test(e[e.length-1])?(s=e[e.length-1].split('data: {"path":"/').pop().split(r).shift(),n=JSON.parse(this.prepareDataBeforeJsonParse(e)),a[s]=n,a):this.getFirstData(e)},e.prototype.hasNewData=function(e){return!t.test(e[e.length-1])&&1<e.length},e.prototype.parseUserList=function(e,t){var s={};return p?(p=!1,this.getFirstData(e)):n.test(e[e.length-1])?(s[this.getUserId(e[e.length-1],null)]=this.getFirstData(e),s):(s=JSON.parse(e[e.length-1].split(r)[1].trim().slice(0,-1)),[this.getUserId(e[e.length-1],t),s])},e.prototype.getFirstData=function(e){try{return JSON.parse(this.prepareDataBeforeJsonParse(e))}catch(e){return null}},e.prototype.getUserId=function(e,t){return t?e.split(t).shift().split('data: {"path":"/').pop().slice(0,-1):e.split('data: {"path":"/').pop().split(",")[0].trim().slice(0,-1)},e.prototype.parseCommandAnswer=function(e){var t,s=/getIp/.test(e[e.length-1]),n=/askQuestion/.test(e[e.length-1]);return s&&n?(t=e[e.length-1].split(/data: {"path":"\/","data":/).pop().split("},"),[JSON.parse(t[0]+"}}"),JSON.parse("{"+t[1].trim().slice(0,-1))]):s?this.parseUserIpData(e):n?this.parseQuestionsData(e):void 0},e.prototype.parseUserIpData=function(e){return i.test(e)?JSON.parse('{"getIp":'+e[e.length-1].split(i).pop().trim().slice(0,-1)):JSON.parse(e[e.length-1].split(a).pop().split('data: {"path":"/getIp","data":').pop().trim().slice(0,-1))},e.prototype.parseQuestionsData=function(e){return u.test(e[e.length-1])?JSON.parse('{"askQuestion":'+e[e.length-1].split(u).pop().trim().slice(0,-1)):c.test(e[e.length-1])?JSON.parse(e[e.length-1].split(c).pop().trim().slice(0,-1)):JSON.parse('{"askQuestion":{"'+e[e.length-1].split('data: {"path":"/askQuestion/').pop().replace('","data"','"')+"}")},e.prototype.parse=function(e){var t=e.split(a),s=this.getTypeOfChanges(t[t.length-1]),n={type:s};return!!this.hasNewData(t)&&("message"===s||"read"===s?(n.object=this.parseUsersMessages(t,s),n):"sendNewMessage"===s||"lastOnline"===s||"userList"===s?(n.object=this.parseUserList(t,s),n):("getIp"===s||"askQuestion"===s)&&(n.object=this.parseCommandAnswer(t,s),n))},new e}(),instructionPerformer=function(e,a,t){var n=!1,s=null,r=!1,o=function(){var e,n=[];function t(e){var t;e instanceof Array?e.forEach(function(e){s(e)||n.push(e)}):s(e)||((t=Object.create(null))[e.commandName]=e,n.push(t))}function s(t){var s=!0;return Object.keys(t).map(function(e){s=t[e].isExecute}),s}function a(){var e,t,s;if(0<n.length)return e=n.shift(),t=e,s={},Object.keys(t).map(function(e){s.parameters=function(e){var t,s=[];for(t=0;t<e.parametersNumber;t++)s.push(e["parameter"+t]);return s}(t[e]),s.instuctionName=e,s.typeOfCommand=t[e].typeOfCommand}),s}return(e={}).next=a,e.add=t,Object.defineProperty(e,"length",{get:function(){return n.length},set:function(e){n.length=e},enumerable:!0,configurable:!0}),e}(),i=function(u){var c=null;function p(e,t){var s=u.currentUserSettings.userId;return a.request("https://onlineconsultantwebapp.firebaseio.com/usersSettings/"+s+"/"+t+".json",e,"PUT","application/json")}function e(t,s){return a.request("https://geoip-db.com/json/",null,"GET","multipart/form-data").then(function(e){return p(e,"commandsResponse/getIp").then(function(){return l(t).then(function(){s()})})})}function l(e){return a.request(u.COMMAND_PATH_PREFIX+u.currentUserSettings.userId+"/commands/"+e+"/isExecute.json",!0,"PUT","application/json")}function g(){getElement(u.DOM.AUTHORIZATION_MENU_CLASS).classList.toggle(u.INVISIBLE_CLASS)}function t(e,t,s,n,a,r){var o,i;o=function(){g(),a&&l(e),t&&t.call(n,s),r&&function(e,t){var s=getElement(u.DOM.USER_NAME_INPUT_CLASS).value;p(JSON.stringify(s),"commandsResponse/"+e+"/"+t[1])}.call(n,e,s)},i=s,getElement(u.DOM.CHAT_QUESTION_CSS).innerHTML=i[1],getElement(u.DOM.USER_NAME_INPUT_CLASS).value="",getElement(u.DOM.USER_NAME_INPUT_CLASS).placeholder=i[0],c&&getElement(u.DOM.SEND_USER_NAME_BUTTON).removeEventListener("click",c),c=function(e){e()}.bind(null,o),getElement(u.DOM.SEND_USER_NAME_BUTTON).addEventListener("click",c),g()}return{getIp:e,askQuestion:t}}(mainConfig);function u(){var t,s,n;r&&setTimeout(function(){a.request(e.COMMAND_PATH_PREFIX+e.currentUserSettings.userId+"/commands.json",null,"GET","application/json").then(function(e){0<(t=function(t){if(!t)return[];return Object.keys(t).filter(function(e){return!t[e].isExecute})}(e)).length?(n=t.pop(),s=function(e){var t,s=[];for(t=0;t<e.parametersNumber;t++)s.push(e["parameter"+t]);return s}(e[n]),instructionPerformer.execute(n,s,u,null,!0,!0)):u()})},e.UPDATE_USER_DATA_TIME)}function c(){(s=a.createLongPollConnection(e.COMMAND_PATH_PREFIX+e.currentUserSettings.userId+"/commands.json")).onreadystatechange=function(){var e;3===this.readyState&&200===this.status&&(e=t.parse(this.responseText).object)&&(o.add(e),function e(t){var s;0<o.length&&(t||!n)?(s=o.next(),n=!0,p(s.instuctionName,s.parameters,e.bind(null,!0),null,!0,!0)):t&&(n=!1)}())},s.send()}function p(e,t,s,n,a,r){if(!i[e])throw new Error("required command is not found");i[e].call(null,e,s,t,n,a,r)}return{execute:p,startApp:function(e){"longPoll"===e?c():(r=!0,u())},closeApp:function(){s&&s.abort(),r&&(r=!1)}}}(mainConfig,dataConnector,longPollResponseParser),messageListManager=function(u){function e(){}return e.prototype.setup=function(){this.messageList=[],this.cDOM={messagesBlock:getElement(u.messages.CSS_CHAT_MESSAGES_CONTAINER)}},e.prototype.createMessageElement=function(e,t,s,n){var a=this.createMessageContainerDiv(n,s),r=this.createDivForMessageBlock(t,u.DISPLAY_MESSAGE_DATE,[u.messages.CSS_CHAT_MESSAGE_DATE]),o=this.createDivForMessageBlock(s,u.DISPLAY_SENDER_NAME,[u.messages.CSS_CHAT_MESSAGE_SENDER_NAME]),i=this.createDivForMessageBlock(e,u.DISPLAY_MESSAGE,[u.messages.CSS_CHAT_MESSAGE]);return a.appendChild(r),a.appendChild(o),a.appendChild(i),a},e.prototype.getMessageObjectsForMarkAsRead=function(){var e,t=[],s=u.ADMIN_NAME||u.currentUserSettings.userName,n=u.currentUserSettings.userId;for(e=this.messageList.length-1;0<=e;e--)if(this.messageList[e].sender!==s){if(this.messageList[e].read)break;t.push({userId:n,fieldName:this.messageList[e].id+"/read",fieldValue:!0}),this.messageList[e].read=!0}return t},e.prototype.createMessageContainerDiv=function(e,t){var s=document.createElement("div");return s.classList.add(u.messages.CSS_MESSAGE_CONTAINER),e||u.currentUserSettings.userName===t||s.classList.add(u.messages.CSS_USER_NOT_READ_MESSAGES),s},e.prototype.createDivForMessageBlock=function(e,t,s){var n=document.createElement("div");return s.forEach(function(e){n.classList.add(e)}),n.innerHTML=e,n},e.prototype.createMessageList=function(e){var t=[];return e&&e.forEach(function(e){t.push(e)}),t},e.prototype.updateMessageList=function(e){0<this.getMessageObjectsForMarkAsRead().length&&(u.currentUserSettings.readLastMessage=!1),this.messageList=e,this.displayMessages()},e.prototype.addMessageToMessageList=function(e){this.messageList.push(e)},e.prototype.displayMessages=function(){var t,s=this;this.clearChat(),this.messageList.forEach(function(e){t=s.createMessageElement(e.message,e.date,e.sender,e.read),s.cDOM.messagesBlock.appendChild(t)})},e.prototype.clearChat=function(){for(;this.cDOM.messagesBlock.firstChild;)this.cDOM.messagesBlock.removeChild(this.cDOM.messagesBlock.firstChild)},new e}(mainConfig),userDataManager=function(i,s,n){function e(){var t=this;"longPoll"===i.chatSettings.typeOfRequest?(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){s.getUserCorrespondence(t),e()})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t;i.currentMessageConnection&&i.currentMessageConnection.abort(),i.currentMessageConnection=dataSource.usersAPI.getUserMessages(e),i.currentMessageConnection.onreadystatechange=function(){3===this.readyState&&200===this.status&&(t=n.parse(this.responseText))&&s.emit(t.type,t.object)},i.currentMessageConnection.send()}.bind(this),e.prototype.updateMessageList=function(t){t&&Object.keys(t).map(function(e){return t[e].id=e,messageListManager.addMessageToMessageList(t[e]),!0}),messageListManager.displayMessages()}.bind(this),s.addSubscribe("message",function(e){t.updateMessageList(e)}),s.addSubscribe("read",function(t){t&&messageListManager.messageList.forEach(function(e){e.id===t.id&&(e.read=t.value,messageListManager.displayMessages())})})):(e.prototype.getUserData=function(t){var s=this;return new Promise(function(e){return s.getUserCorrespondence(t).then(function(){e()})})}.bind(this),e.prototype.getUserCorrespondence=function(e){var t=this;return dataSource.usersAPI.getUserMessages(e)().then(function(e){t.updateMessageList(e)})}.bind(this),e.prototype.updateMessageList=function(t){var e,s=[];t&&Object.keys(t).map(function(e){return t[e].id=e,s.push(t[e]),!0}),messageListManager.displayMessages(),e=messageListManager.createMessageList(s),messageListManager.updateMessageList(e)}.bind(this))}return e.prototype.setup=function(){messageListManager.setup()},e.prototype.clearMessageList=function(){messageListManager.messageList=[]},e.prototype.createNewUserProfileToDataBase=function(e,t){dataSource.usersAPI.addNewUserToDataSource(e,t)},e.prototype.saveSettingField=function(e){dataSource.usersAPI.setSettingField(e,i.currentUserSettings.userId,i.currentUserSettings[e])},e.prototype.updateUserOnline=function(e){var t=new Date;dataSource.usersAPI.updateLastOnline(e,t.getTime())},e.prototype.sendMessage=function(){var e,t,s,n=this.getMessageFromInputElement(),a=(e=new Date,t=1===e.getMinutes().toString().length?"0"+e.getMinutes():e.getMinutes(),e.getHours().toString().concat(":",t)),r=i.currentUserSettings.userName||i.ADMIN_NAME,o={sender:r,message:n,read:!1,date:a,id:s};"longPoll"!==i.chatSettings.typeOfRequest&&(messageListManager.addMessageToMessageList(o),messageListManager.displayMessages()),this.saveMessageToDataSource(o)},e.prototype.getMessageFromInputElement=function(){var e=getElement(i.CSS_CURRENT_INPUT_CLASS),t=e.value;return e.value="",t},e.prototype.setMessageAsRead=function(){var e=messageListManager.getMessageObjectsForMarkAsRead();0<e.length&&(e.forEach(function(e){dataSource.usersAPI.updateMessageIsReadField(e.fieldName,e.userId,e.fieldValue)}),i.currentUserSettings.readLastMessage=!0),messageListManager.displayMessages()},e.prototype.saveMessageToDataSource=function(e){e.sender===i.currentUserSettings.userName&&dataSource.usersAPI.updateSendNewMessageFlag(i.currentUserSettings.userId,!0),dataSource.usersAPI.sendMessage(null,i.currentUserSettings.userId,e)},e.prototype.saveUserSettingsToDataSource=function(e){e.forEach(function(e){dataSource.usersAPI.setSettingField(e.fieldName,e.userId,e.fieldValue)})},new e}(mainConfig,eventEmitter,longPollResponseParser),viewFactory=function(n){function e(){}return e.prototype.createView=function(s,n,a){var r=this;return new Promise(function(e,t){s?(n&&r.includeViewCssToPage(r.createCSSLink(n,"stylesheet","text/css","touch-soft-chat-css")),e(r.includeViewHTMLToPage(s,a))):t(new Error("htmlPath is null. Please add htmlPath"))})},e.prototype.includeViewHTMLToPage=function(e,t){var s=t?getElement(t):document.body;return n.commonAPI.getHTML(e).then(function(e){s.innerHTML=e})},e.prototype.includeViewCssToPage=function(e){document.head.appendChild(e)},e.prototype.createCSSLink=function(e,t,s,n){var a=document.createElement("link");return n&&a.setAttribute("id",n),t&&a.setAttribute("rel",t),s&&a.setAttribute("type",s),a.setAttribute("href",e),a},new e}(dataSource),chatCustomizer=function(t){function e(){}return e.prototype.setupOuterChatSettings=function(){this.allowMinimize(),this.setPositionOfMainBlock(),this.setTitle(),this.setMainCssClass(),this.allowDragNDrop()},e.prototype.allowDragNDrop=function(){var e=getElement(t.DOM.TITLE_BLOCK_CLASS),c=getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS);"false"!==t.chatSettings.allowDrag&&e.addEventListener("mousedown",function(e){var t,s,n,a,r,o,i;function u(e){c.style.left=e.pageX-s+"px",c.style.top=e.pageY-n+"px"}t={top:(i=c.getBoundingClientRect()).top+window.pageYOffset,left:i.left+window.pageXOffset},s=e.pageX-t.left,n=e.pageY-t.top,a=function(e){u(e)},r=function(){document.removeEventListener("mousemove",a),document.removeEventListener("mouseup",r)},o=function(){return!1},u(e),c.style.zIndex=1e3,document.addEventListener("mousemove",a),document.addEventListener("mouseup",r),c.addEventListener("dragstart",o)})},e.prototype.setPositionOfMainBlock=function(){"right"===t.chatSettings.position?getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(t.CHAT_POSITION_RIGHT):getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.add(t.CHAT_POSITION_LEFT)},e.prototype.setTitle=function(){t.chatSettings.chatTitle.length<1&&(t.chatSettings.chatTitle=t.DEFAULT_CHAT_TITLE),getElement(t.DOM.TITLE_BLOCK_CLASS).innerHTML=t.chatSettings.chatTitle},e.prototype.allowMinimize=function(){"false"===t.chatSettings.allowMinimize&&getElement(t.DOM.CHANGE_STYLE_BUTTON_MAX_SIZE).classList.add(t.INVISIBLE_CLASS)},e.prototype.setMainCssClass=function(){t.chatSettings.outerCssClass.length<1&&(t.chatSettings.outerCssClass=t.DEFAULT_CSS_CLASS_FOR_CHAT),getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).parentNode.classList.add(t.chatSettings.outerCssClass)},new e}(mainConfig),chatController=function(t,s,n){var a=["authorization","enter your name, please",""],r=function(s){var n={write:function(e,t){var s=JSON.stringify(e);localStorage.setItem(t,s)},get:function(e){var t=localStorage.getItem(e),s=null;return t&&(s=JSON.parse(t)),s}};function e(){n.write({userId:s.currentUserSettings.userId,isMinimize:s.currentUserSettings.isMinimize,userName:s.currentUserSettings.userName},s.LOCAL_STORAGE_NAME)}function t(e){var t=n.get(s.LOCAL_STORAGE_NAME);return t&&(s.currentUserSettings.userId=t.userId,s.currentUserSettings.userName=t.userName,s.currentUserSettings.isMinimize=t.isMinimize),e instanceof Function&&e(t),t}return{saveCondition:e,setupCondition:t}}(mainConfig);function e(){this.createNewUser=n.createNewUserProfileToDataBase}return e.prototype.startApp=function(){var e=this;return this.setupChatView().then(function(){e.authorization(t.chatSettings.requireName),e.setupChatBasicListeners()}).then(function(){n.getUserData(t.currentUserSettings.userId).then(function(){e.setupChatStyle(),e.setupChatSendListeners(),chatCustomizer.setupOuterChatSettings(),s.startApp(t.chatSettings.typeOfRequest)})})},e.prototype.authorization=function(e){n.setup(),r.setupCondition()?(r.setupCondition(),this.setupIntervalFunctions()):(t.currentUserSettings.userId=t.DEFAULT_USER_NAME+(new Date).getTime(),"false"===e?(t.currentUserSettings.userName=t.DEFAULT_USER_NAME,r.saveCondition(),n.createNewUserProfileToDataBase(t.currentUserSettings.userId,t.currentUserSettings.userName),this.setupIntervalFunctions()):s.execute("askQuestion",a,this.getUserNameFromInput,this))},e.prototype.toggleAuthorizationMenuVisible=function(){getElement(t.DOM.AUTHORIZATION_MENU_CLASS).classList.toggle(t.INVISIBLE_CLASS)},e.prototype.getUserNameFromInput=function(){t.currentUserSettings.userName=getElement(t.DOM.USER_NAME_INPUT_CLASS).value,t.chatSettings.isMinimize=!1,this.createNewUser(t.currentUserSettings.userId,t.currentUserSettings.userName),this.setupIntervalFunctions(),r.saveCondition()},e.prototype.setupChatSendListeners=function(){getElement(t.DOM.SEND_MESSAGE_FULL_SIZE_BUTTON).addEventListener("click",n.sendMessage.bind(n,t.currentUserSettings.userName)),getElement(t.DOM.SEND_MESSAGE_MIN_SIZE_BUTTON).addEventListener("click",n.sendMessage.bind(n,t.currentUserSettings.userName)),document.addEventListener("mousemove",n.setMessageAsRead.bind(n))},e.prototype.setupChatBasicListeners=function(){getElement(t.DOM.SET_MAX_STYLE_BUTTON).addEventListener("click",this.minMaxStyleToggle.bind(this)),getElement(t.DOM.SET_MIN_STYLE_BUTTON).addEventListener("click",this.minMaxStyleToggle.bind(this))},e.prototype.setupChatView=function(){return viewFactory.createView(t.HTML_FILE_PATH,t.CSS_FILE_PATH,null)},e.prototype.setupChatStyle=function(){t.currentUserSettings.isMinimize?getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS):getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),this.changeInputAndSendButtonClass()},e.prototype.minMaxStyleToggle=function(){getElement(t.DOM.MAIN_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),getElement(t.DOM.MINIMIZE_STYLE_CHAT_BLOCK_CLASS).classList.toggle(t.INVISIBLE_CLASS),t.currentUserSettings.isMinimize=!1===t.currentUserSettings.isMinimize,this.changeInputAndSendButtonClass(),r.saveCondition()},e.prototype.activityNotify=function(){n.updateUserOnline(t.currentUserSettings.userId)},e.prototype.changeInputAndSendButtonClass=function(){t.currentUserSettings.isMinimize?t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MIN_SIZE_INPUT_MESSAGE_BLOCK_CLASS:t.CSS_CURRENT_INPUT_CLASS=t.DOM.CSS_MAX_SIZE_INPUT_MESSAGE_BLOCK_CLASS},e.prototype.setupIntervalFunctions=function(){var e=this;setInterval(function(){"longPoll"!==t.chatSettings.typeOfRequest&&n.getUserData(t.currentUserSettings.userId),e.activityNotify()},t.UPDATE_USER_DATA_TIME)},new e}(mainConfig,instructionPerformer,userDataManager);chatController.startApp();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
